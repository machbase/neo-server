// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: schedule.proto

package schedule

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListScheduleRequest) Reset() {
	*x = ListScheduleRequest{}
	mi := &file_schedule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduleRequest) ProtoMessage() {}

func (x *ListScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduleRequest.ProtoReflect.Descriptor instead.
func (*ListScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{0}
}

type ListScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse        string                 `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Schedules     []*Schedule            `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListScheduleResponse) Reset() {
	*x = ListScheduleResponse{}
	mi := &file_schedule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduleResponse) ProtoMessage() {}

func (x *ListScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduleResponse.ProtoReflect.Descriptor instead.
func (*ListScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{1}
}

func (x *ListScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListScheduleResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ListScheduleResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ListScheduleResponse) GetSchedules() []*Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	AutoStart     bool                   `protobuf:"varint,3,opt,name=autoStart,proto3" json:"autoStart,omitempty"`
	State         string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Task          string                 `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	Schedule      string                 `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Bridge        string                 `protobuf:"bytes,7,opt,name=bridge,proto3" json:"bridge,omitempty"`
	Topic         string                 `protobuf:"bytes,8,opt,name=topic,proto3" json:"topic,omitempty"`
	QoS           int32                  `protobuf:"varint,9,opt,name=QoS,proto3" json:"QoS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	mi := &file_schedule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{2}
}

func (x *Schedule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schedule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Schedule) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *Schedule) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Schedule) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *Schedule) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *Schedule) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *Schedule) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Schedule) GetQoS() int32 {
	if x != nil {
		return x.QoS
	}
	return 0
}

type AddScheduleRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	AutoStart bool                   `protobuf:"varint,3,opt,name=autoStart,proto3" json:"autoStart,omitempty"`
	Task      string                 `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Schedule  string                 `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Bridge    string                 `protobuf:"bytes,6,opt,name=bridge,proto3" json:"bridge,omitempty"`
	// Types that are valid to be assigned to Opt:
	//
	//	*AddScheduleRequest_Mqtt
	//	*AddScheduleRequest_Nats
	Opt           isAddScheduleRequest_Opt `protobuf_oneof:"opt"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddScheduleRequest) Reset() {
	*x = AddScheduleRequest{}
	mi := &file_schedule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScheduleRequest) ProtoMessage() {}

func (x *AddScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScheduleRequest.ProtoReflect.Descriptor instead.
func (*AddScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{3}
}

func (x *AddScheduleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddScheduleRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddScheduleRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *AddScheduleRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *AddScheduleRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *AddScheduleRequest) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *AddScheduleRequest) GetOpt() isAddScheduleRequest_Opt {
	if x != nil {
		return x.Opt
	}
	return nil
}

func (x *AddScheduleRequest) GetMqtt() *MqttOption {
	if x != nil {
		if x, ok := x.Opt.(*AddScheduleRequest_Mqtt); ok {
			return x.Mqtt
		}
	}
	return nil
}

func (x *AddScheduleRequest) GetNats() *NatsOption {
	if x != nil {
		if x, ok := x.Opt.(*AddScheduleRequest_Nats); ok {
			return x.Nats
		}
	}
	return nil
}

type isAddScheduleRequest_Opt interface {
	isAddScheduleRequest_Opt()
}

type AddScheduleRequest_Mqtt struct {
	Mqtt *MqttOption `protobuf:"bytes,7,opt,name=mqtt,proto3,oneof"`
}

type AddScheduleRequest_Nats struct {
	Nats *NatsOption `protobuf:"bytes,8,opt,name=nats,proto3,oneof"`
}

func (*AddScheduleRequest_Mqtt) isAddScheduleRequest_Opt() {}

func (*AddScheduleRequest_Nats) isAddScheduleRequest_Opt() {}

type MqttOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	QoS           int32                  `protobuf:"varint,2,opt,name=QoS,proto3" json:"QoS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MqttOption) Reset() {
	*x = MqttOption{}
	mi := &file_schedule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MqttOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MqttOption) ProtoMessage() {}

func (x *MqttOption) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MqttOption.ProtoReflect.Descriptor instead.
func (*MqttOption) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{4}
}

func (x *MqttOption) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MqttOption) GetQoS() int32 {
	if x != nil {
		return x.QoS
	}
	return 0
}

type NatsOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=Subject,proto3" json:"Subject,omitempty"`
	QueueName     string                 `protobuf:"bytes,2,opt,name=QueueName,proto3" json:"QueueName,omitempty"`
	StreamName    string                 `protobuf:"bytes,3,opt,name=StreamName,proto3" json:"StreamName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NatsOption) Reset() {
	*x = NatsOption{}
	mi := &file_schedule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NatsOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatsOption) ProtoMessage() {}

func (x *NatsOption) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatsOption.ProtoReflect.Descriptor instead.
func (*NatsOption) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{5}
}

func (x *NatsOption) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *NatsOption) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *NatsOption) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

type AddScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse        string                 `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddScheduleResponse) Reset() {
	*x = AddScheduleResponse{}
	mi := &file_schedule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScheduleResponse) ProtoMessage() {}

func (x *AddScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScheduleResponse.ProtoReflect.Descriptor instead.
func (*AddScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{6}
}

func (x *AddScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddScheduleResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AddScheduleResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type GetScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScheduleRequest) Reset() {
	*x = GetScheduleRequest{}
	mi := &file_schedule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleRequest) ProtoMessage() {}

func (x *GetScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{7}
}

func (x *GetScheduleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse        string                 `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Schedule      *Schedule              `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScheduleResponse) Reset() {
	*x = GetScheduleResponse{}
	mi := &file_schedule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleResponse) ProtoMessage() {}

func (x *GetScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{8}
}

func (x *GetScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetScheduleResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetScheduleResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *GetScheduleResponse) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type DelScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelScheduleRequest) Reset() {
	*x = DelScheduleRequest{}
	mi := &file_schedule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelScheduleRequest) ProtoMessage() {}

func (x *DelScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelScheduleRequest.ProtoReflect.Descriptor instead.
func (*DelScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{9}
}

func (x *DelScheduleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DelScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse        string                 `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelScheduleResponse) Reset() {
	*x = DelScheduleResponse{}
	mi := &file_schedule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelScheduleResponse) ProtoMessage() {}

func (x *DelScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelScheduleResponse.ProtoReflect.Descriptor instead.
func (*DelScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{10}
}

func (x *DelScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DelScheduleResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DelScheduleResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type UpdateScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AutoStart     bool                   `protobuf:"varint,2,opt,name=autoStart,proto3" json:"autoStart,omitempty"`
	Task          string                 `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
	Schedule      string                 `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Bridge        string                 `protobuf:"bytes,5,opt,name=bridge,proto3" json:"bridge,omitempty"`
	Topic         string                 `protobuf:"bytes,6,opt,name=topic,proto3" json:"topic,omitempty"`
	QoS           int32                  `protobuf:"varint,7,opt,name=QoS,proto3" json:"QoS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScheduleRequest) Reset() {
	*x = UpdateScheduleRequest{}
	mi := &file_schedule_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleRequest) ProtoMessage() {}

func (x *UpdateScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleRequest.ProtoReflect.Descriptor instead.
func (*UpdateScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateScheduleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateScheduleRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *UpdateScheduleRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *UpdateScheduleRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *UpdateScheduleRequest) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *UpdateScheduleRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UpdateScheduleRequest) GetQoS() int32 {
	if x != nil {
		return x.QoS
	}
	return 0
}

type UpdateScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse        string                 `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScheduleResponse) Reset() {
	*x = UpdateScheduleResponse{}
	mi := &file_schedule_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleResponse) ProtoMessage() {}

func (x *UpdateScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleResponse.ProtoReflect.Descriptor instead.
func (*UpdateScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateScheduleResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateScheduleResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type StartScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartScheduleRequest) Reset() {
	*x = StartScheduleRequest{}
	mi := &file_schedule_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartScheduleRequest) ProtoMessage() {}

func (x *StartScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartScheduleRequest.ProtoReflect.Descriptor instead.
func (*StartScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{13}
}

func (x *StartScheduleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StartScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse        string                 `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartScheduleResponse) Reset() {
	*x = StartScheduleResponse{}
	mi := &file_schedule_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartScheduleResponse) ProtoMessage() {}

func (x *StartScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartScheduleResponse.ProtoReflect.Descriptor instead.
func (*StartScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{14}
}

func (x *StartScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartScheduleResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StartScheduleResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type StopScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopScheduleRequest) Reset() {
	*x = StopScheduleRequest{}
	mi := &file_schedule_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopScheduleRequest) ProtoMessage() {}

func (x *StopScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopScheduleRequest.ProtoReflect.Descriptor instead.
func (*StopScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{15}
}

func (x *StopScheduleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StopScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse        string                 `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopScheduleResponse) Reset() {
	*x = StopScheduleResponse{}
	mi := &file_schedule_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopScheduleResponse) ProtoMessage() {}

func (x *StopScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopScheduleResponse.ProtoReflect.Descriptor instead.
func (*StopScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_proto_rawDescGZIP(), []int{16}
}

func (x *StopScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StopScheduleResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StopScheduleResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

var File_schedule_proto protoreflect.FileDescriptor

const file_schedule_proto_rawDesc = "" +
	"\n" +
	"\x0eschedule.proto\x12\bschedule\"\x15\n" +
	"\x13ListScheduleRequest\"\x92\x01\n" +
	"\x14ListScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x16\n" +
	"\x06elapse\x18\x03 \x01(\tR\x06elapse\x120\n" +
	"\tschedules\x18\x04 \x03(\v2\x12.schedule.ScheduleR\tschedules\"\xd6\x01\n" +
	"\bSchedule\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1c\n" +
	"\tautoStart\x18\x03 \x01(\bR\tautoStart\x12\x14\n" +
	"\x05state\x18\x04 \x01(\tR\x05state\x12\x12\n" +
	"\x04task\x18\x05 \x01(\tR\x04task\x12\x1a\n" +
	"\bschedule\x18\x06 \x01(\tR\bschedule\x12\x16\n" +
	"\x06bridge\x18\a \x01(\tR\x06bridge\x12\x14\n" +
	"\x05topic\x18\b \x01(\tR\x05topic\x12\x10\n" +
	"\x03QoS\x18\t \x01(\x05R\x03QoS\"\x81\x02\n" +
	"\x12AddScheduleRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1c\n" +
	"\tautoStart\x18\x03 \x01(\bR\tautoStart\x12\x12\n" +
	"\x04task\x18\x04 \x01(\tR\x04task\x12\x1a\n" +
	"\bschedule\x18\x05 \x01(\tR\bschedule\x12\x16\n" +
	"\x06bridge\x18\x06 \x01(\tR\x06bridge\x12*\n" +
	"\x04mqtt\x18\a \x01(\v2\x14.schedule.MqttOptionH\x00R\x04mqtt\x12*\n" +
	"\x04nats\x18\b \x01(\v2\x14.schedule.NatsOptionH\x00R\x04natsB\x05\n" +
	"\x03opt\"4\n" +
	"\n" +
	"MqttOption\x12\x14\n" +
	"\x05Topic\x18\x01 \x01(\tR\x05Topic\x12\x10\n" +
	"\x03QoS\x18\x02 \x01(\x05R\x03QoS\"d\n" +
	"\n" +
	"NatsOption\x12\x18\n" +
	"\aSubject\x18\x01 \x01(\tR\aSubject\x12\x1c\n" +
	"\tQueueName\x18\x02 \x01(\tR\tQueueName\x12\x1e\n" +
	"\n" +
	"StreamName\x18\x03 \x01(\tR\n" +
	"StreamName\"_\n" +
	"\x13AddScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x16\n" +
	"\x06elapse\x18\x03 \x01(\tR\x06elapse\"(\n" +
	"\x12GetScheduleRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x8f\x01\n" +
	"\x13GetScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x16\n" +
	"\x06elapse\x18\x03 \x01(\tR\x06elapse\x12.\n" +
	"\bschedule\x18\x04 \x01(\v2\x12.schedule.ScheduleR\bschedule\"(\n" +
	"\x12DelScheduleRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"_\n" +
	"\x13DelScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x16\n" +
	"\x06elapse\x18\x03 \x01(\tR\x06elapse\"\xb9\x01\n" +
	"\x15UpdateScheduleRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tautoStart\x18\x02 \x01(\bR\tautoStart\x12\x12\n" +
	"\x04task\x18\x03 \x01(\tR\x04task\x12\x1a\n" +
	"\bschedule\x18\x04 \x01(\tR\bschedule\x12\x16\n" +
	"\x06bridge\x18\x05 \x01(\tR\x06bridge\x12\x14\n" +
	"\x05topic\x18\x06 \x01(\tR\x05topic\x12\x10\n" +
	"\x03QoS\x18\a \x01(\x05R\x03QoS\"b\n" +
	"\x16UpdateScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x16\n" +
	"\x06elapse\x18\x03 \x01(\tR\x06elapse\"*\n" +
	"\x14StartScheduleRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"a\n" +
	"\x15StartScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x16\n" +
	"\x06elapse\x18\x03 \x01(\tR\x06elapse\")\n" +
	"\x13StopScheduleRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"`\n" +
	"\x14StopScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x16\n" +
	"\x06elapse\x18\x03 \x01(\tR\x06elapse2\xc3\x04\n" +
	"\n" +
	"Management\x12O\n" +
	"\fListSchedule\x12\x1d.schedule.ListScheduleRequest\x1a\x1e.schedule.ListScheduleResponse\"\x00\x12L\n" +
	"\vAddSchedule\x12\x1c.schedule.AddScheduleRequest\x1a\x1d.schedule.AddScheduleResponse\"\x00\x12L\n" +
	"\vGetSchedule\x12\x1c.schedule.GetScheduleRequest\x1a\x1d.schedule.GetScheduleResponse\"\x00\x12L\n" +
	"\vDelSchedule\x12\x1c.schedule.DelScheduleRequest\x1a\x1d.schedule.DelScheduleResponse\"\x00\x12U\n" +
	"\x0eUpdateSchedule\x12\x1f.schedule.UpdateScheduleRequest\x1a .schedule.UpdateScheduleResponse\"\x00\x12R\n" +
	"\rStartSchedule\x12\x1e.schedule.StartScheduleRequest\x1a\x1f.schedule.StartScheduleResponse\"\x00\x12O\n" +
	"\fStopSchedule\x12\x1d.schedule.StopScheduleRequest\x1a\x1e.schedule.StopScheduleResponse\"\x00B0Z.github.com/machbase/neo-server/v8/api/scheduleb\x06proto3"

var (
	file_schedule_proto_rawDescOnce sync.Once
	file_schedule_proto_rawDescData []byte
)

func file_schedule_proto_rawDescGZIP() []byte {
	file_schedule_proto_rawDescOnce.Do(func() {
		file_schedule_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schedule_proto_rawDesc), len(file_schedule_proto_rawDesc)))
	})
	return file_schedule_proto_rawDescData
}

var file_schedule_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_schedule_proto_goTypes = []any{
	(*ListScheduleRequest)(nil),    // 0: schedule.ListScheduleRequest
	(*ListScheduleResponse)(nil),   // 1: schedule.ListScheduleResponse
	(*Schedule)(nil),               // 2: schedule.Schedule
	(*AddScheduleRequest)(nil),     // 3: schedule.AddScheduleRequest
	(*MqttOption)(nil),             // 4: schedule.MqttOption
	(*NatsOption)(nil),             // 5: schedule.NatsOption
	(*AddScheduleResponse)(nil),    // 6: schedule.AddScheduleResponse
	(*GetScheduleRequest)(nil),     // 7: schedule.GetScheduleRequest
	(*GetScheduleResponse)(nil),    // 8: schedule.GetScheduleResponse
	(*DelScheduleRequest)(nil),     // 9: schedule.DelScheduleRequest
	(*DelScheduleResponse)(nil),    // 10: schedule.DelScheduleResponse
	(*UpdateScheduleRequest)(nil),  // 11: schedule.UpdateScheduleRequest
	(*UpdateScheduleResponse)(nil), // 12: schedule.UpdateScheduleResponse
	(*StartScheduleRequest)(nil),   // 13: schedule.StartScheduleRequest
	(*StartScheduleResponse)(nil),  // 14: schedule.StartScheduleResponse
	(*StopScheduleRequest)(nil),    // 15: schedule.StopScheduleRequest
	(*StopScheduleResponse)(nil),   // 16: schedule.StopScheduleResponse
}
var file_schedule_proto_depIdxs = []int32{
	2,  // 0: schedule.ListScheduleResponse.schedules:type_name -> schedule.Schedule
	4,  // 1: schedule.AddScheduleRequest.mqtt:type_name -> schedule.MqttOption
	5,  // 2: schedule.AddScheduleRequest.nats:type_name -> schedule.NatsOption
	2,  // 3: schedule.GetScheduleResponse.schedule:type_name -> schedule.Schedule
	0,  // 4: schedule.Management.ListSchedule:input_type -> schedule.ListScheduleRequest
	3,  // 5: schedule.Management.AddSchedule:input_type -> schedule.AddScheduleRequest
	7,  // 6: schedule.Management.GetSchedule:input_type -> schedule.GetScheduleRequest
	9,  // 7: schedule.Management.DelSchedule:input_type -> schedule.DelScheduleRequest
	11, // 8: schedule.Management.UpdateSchedule:input_type -> schedule.UpdateScheduleRequest
	13, // 9: schedule.Management.StartSchedule:input_type -> schedule.StartScheduleRequest
	15, // 10: schedule.Management.StopSchedule:input_type -> schedule.StopScheduleRequest
	1,  // 11: schedule.Management.ListSchedule:output_type -> schedule.ListScheduleResponse
	6,  // 12: schedule.Management.AddSchedule:output_type -> schedule.AddScheduleResponse
	8,  // 13: schedule.Management.GetSchedule:output_type -> schedule.GetScheduleResponse
	10, // 14: schedule.Management.DelSchedule:output_type -> schedule.DelScheduleResponse
	12, // 15: schedule.Management.UpdateSchedule:output_type -> schedule.UpdateScheduleResponse
	14, // 16: schedule.Management.StartSchedule:output_type -> schedule.StartScheduleResponse
	16, // 17: schedule.Management.StopSchedule:output_type -> schedule.StopScheduleResponse
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_schedule_proto_init() }
func file_schedule_proto_init() {
	if File_schedule_proto != nil {
		return
	}
	file_schedule_proto_msgTypes[3].OneofWrappers = []any{
		(*AddScheduleRequest_Mqtt)(nil),
		(*AddScheduleRequest_Nats)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schedule_proto_rawDesc), len(file_schedule_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_schedule_proto_goTypes,
		DependencyIndexes: file_schedule_proto_depIdxs,
		MessageInfos:      file_schedule_proto_msgTypes,
	}.Build()
	File_schedule_proto = out.File
	file_schedule_proto_goTypes = nil
	file_schedule_proto_depIdxs = nil
}

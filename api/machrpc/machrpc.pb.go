// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: machrpc.proto

package machrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *ConnHandle) Reset() {
	*x = ConnHandle{}
	mi := &file_machrpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnHandle) ProtoMessage() {}

func (x *ConnHandle) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnHandle.ProtoReflect.Descriptor instead.
func (*ConnHandle) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{0}
}

func (x *ConnHandle) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type ConnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ConnRequest) Reset() {
	*x = ConnRequest{}
	mi := &file_machrpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnRequest) ProtoMessage() {}

func (x *ConnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnRequest.ProtoReflect.Descriptor instead.
func (*ConnRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{1}
}

func (x *ConnRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ConnRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ConnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string      `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string      `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Conn    *ConnHandle `protobuf:"bytes,4,opt,name=conn,proto3" json:"conn,omitempty"`
}

func (x *ConnResponse) Reset() {
	*x = ConnResponse{}
	mi := &file_machrpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnResponse) ProtoMessage() {}

func (x *ConnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnResponse.ProtoReflect.Descriptor instead.
func (*ConnResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{2}
}

func (x *ConnResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConnResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ConnResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ConnResponse) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

type ConnCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn *ConnHandle `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
}

func (x *ConnCloseRequest) Reset() {
	*x = ConnCloseRequest{}
	mi := &file_machrpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnCloseRequest) ProtoMessage() {}

func (x *ConnCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnCloseRequest.ProtoReflect.Descriptor instead.
func (*ConnCloseRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{3}
}

func (x *ConnCloseRequest) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

type ConnCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *ConnCloseResponse) Reset() {
	*x = ConnCloseResponse{}
	mi := &file_machrpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnCloseResponse) ProtoMessage() {}

func (x *ConnCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnCloseResponse.ProtoReflect.Descriptor instead.
func (*ConnCloseResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{4}
}

func (x *ConnCloseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConnCloseResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ConnCloseResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn  *ConnHandle `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Token int64       `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_machrpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{5}
}

func (x *PingRequest) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *PingRequest) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Token   int64  `protobuf:"varint,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_machrpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{6}
}

func (x *PingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PingResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PingResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *PingResponse) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

type AppenderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn      *ConnHandle `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	TableName string      `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
}

func (x *AppenderRequest) Reset() {
	*x = AppenderRequest{}
	mi := &file_machrpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppenderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppenderRequest) ProtoMessage() {}

func (x *AppenderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppenderRequest.ProtoReflect.Descriptor instead.
func (*AppenderRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{7}
}

func (x *AppenderRequest) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *AppenderRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type AppenderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason    string          `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse    string          `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Handle    *AppenderHandle `protobuf:"bytes,4,opt,name=handle,proto3" json:"handle,omitempty"`
	TableName string          `protobuf:"bytes,5,opt,name=tableName,proto3" json:"tableName,omitempty"`
	TableType int32           `protobuf:"varint,6,opt,name=tableType,proto3" json:"tableType,omitempty"`
}

func (x *AppenderResponse) Reset() {
	*x = AppenderResponse{}
	mi := &file_machrpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppenderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppenderResponse) ProtoMessage() {}

func (x *AppenderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppenderResponse.ProtoReflect.Descriptor instead.
func (*AppenderResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{8}
}

func (x *AppenderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AppenderResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AppenderResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *AppenderResponse) GetHandle() *AppenderHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *AppenderResponse) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *AppenderResponse) GetTableType() int32 {
	if x != nil {
		return x.TableType
	}
	return 0
}

type AppenderHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle string      `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Conn   *ConnHandle `protobuf:"bytes,2,opt,name=conn,proto3" json:"conn,omitempty"`
}

func (x *AppenderHandle) Reset() {
	*x = AppenderHandle{}
	mi := &file_machrpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppenderHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppenderHandle) ProtoMessage() {}

func (x *AppenderHandle) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppenderHandle.ProtoReflect.Descriptor instead.
func (*AppenderHandle) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{9}
}

func (x *AppenderHandle) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *AppenderHandle) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

type AppendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle  *AppenderHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Records []*AppendRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *AppendData) Reset() {
	*x = AppendData{}
	mi := &file_machrpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendData) ProtoMessage() {}

func (x *AppendData) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendData.ProtoReflect.Descriptor instead.
func (*AppendData) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{10}
}

func (x *AppendData) GetHandle() *AppenderHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *AppendData) GetRecords() []*AppendRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AppendRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tuple []*AppendDatum `protobuf:"bytes,1,rep,name=tuple,proto3" json:"tuple,omitempty"`
}

func (x *AppendRecord) Reset() {
	*x = AppendRecord{}
	mi := &file_machrpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRecord) ProtoMessage() {}

func (x *AppendRecord) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRecord.ProtoReflect.Descriptor instead.
func (*AppendRecord) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{11}
}

func (x *AppendRecord) GetTuple() []*AppendDatum {
	if x != nil {
		return x.Tuple
	}
	return nil
}

type AppendDatum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*AppendDatum_VInt32
	//	*AppendDatum_VUint32
	//	*AppendDatum_VInt64
	//	*AppendDatum_VUint64
	//	*AppendDatum_VFloat
	//	*AppendDatum_VDouble
	//	*AppendDatum_VString
	//	*AppendDatum_VBool
	//	*AppendDatum_VBytes
	//	*AppendDatum_VIp
	//	*AppendDatum_VTime
	//	*AppendDatum_VNull
	Value isAppendDatum_Value `protobuf_oneof:"value"`
}

func (x *AppendDatum) Reset() {
	*x = AppendDatum{}
	mi := &file_machrpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendDatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendDatum) ProtoMessage() {}

func (x *AppendDatum) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendDatum.ProtoReflect.Descriptor instead.
func (*AppendDatum) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{12}
}

func (m *AppendDatum) GetValue() isAppendDatum_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AppendDatum) GetVInt32() int32 {
	if x, ok := x.GetValue().(*AppendDatum_VInt32); ok {
		return x.VInt32
	}
	return 0
}

func (x *AppendDatum) GetVUint32() uint32 {
	if x, ok := x.GetValue().(*AppendDatum_VUint32); ok {
		return x.VUint32
	}
	return 0
}

func (x *AppendDatum) GetVInt64() int64 {
	if x, ok := x.GetValue().(*AppendDatum_VInt64); ok {
		return x.VInt64
	}
	return 0
}

func (x *AppendDatum) GetVUint64() uint64 {
	if x, ok := x.GetValue().(*AppendDatum_VUint64); ok {
		return x.VUint64
	}
	return 0
}

func (x *AppendDatum) GetVFloat() float32 {
	if x, ok := x.GetValue().(*AppendDatum_VFloat); ok {
		return x.VFloat
	}
	return 0
}

func (x *AppendDatum) GetVDouble() float64 {
	if x, ok := x.GetValue().(*AppendDatum_VDouble); ok {
		return x.VDouble
	}
	return 0
}

func (x *AppendDatum) GetVString() string {
	if x, ok := x.GetValue().(*AppendDatum_VString); ok {
		return x.VString
	}
	return ""
}

func (x *AppendDatum) GetVBool() bool {
	if x, ok := x.GetValue().(*AppendDatum_VBool); ok {
		return x.VBool
	}
	return false
}

func (x *AppendDatum) GetVBytes() []byte {
	if x, ok := x.GetValue().(*AppendDatum_VBytes); ok {
		return x.VBytes
	}
	return nil
}

func (x *AppendDatum) GetVIp() string {
	if x, ok := x.GetValue().(*AppendDatum_VIp); ok {
		return x.VIp
	}
	return ""
}

func (x *AppendDatum) GetVTime() int64 {
	if x, ok := x.GetValue().(*AppendDatum_VTime); ok {
		return x.VTime
	}
	return 0
}

func (x *AppendDatum) GetVNull() bool {
	if x, ok := x.GetValue().(*AppendDatum_VNull); ok {
		return x.VNull
	}
	return false
}

type isAppendDatum_Value interface {
	isAppendDatum_Value()
}

type AppendDatum_VInt32 struct {
	VInt32 int32 `protobuf:"varint,1,opt,name=v_int32,json=vInt32,proto3,oneof"`
}

type AppendDatum_VUint32 struct {
	VUint32 uint32 `protobuf:"varint,11,opt,name=v_uint32,json=vUint32,proto3,oneof"`
}

type AppendDatum_VInt64 struct {
	VInt64 int64 `protobuf:"varint,2,opt,name=v_int64,json=vInt64,proto3,oneof"`
}

type AppendDatum_VUint64 struct {
	VUint64 uint64 `protobuf:"varint,12,opt,name=v_uint64,json=vUint64,proto3,oneof"`
}

type AppendDatum_VFloat struct {
	VFloat float32 `protobuf:"fixed32,3,opt,name=v_float,json=vFloat,proto3,oneof"`
}

type AppendDatum_VDouble struct {
	VDouble float64 `protobuf:"fixed64,4,opt,name=v_double,json=vDouble,proto3,oneof"`
}

type AppendDatum_VString struct {
	VString string `protobuf:"bytes,5,opt,name=v_string,json=vString,proto3,oneof"`
}

type AppendDatum_VBool struct {
	VBool bool `protobuf:"varint,6,opt,name=v_bool,json=vBool,proto3,oneof"`
}

type AppendDatum_VBytes struct {
	VBytes []byte `protobuf:"bytes,7,opt,name=v_bytes,json=vBytes,proto3,oneof"`
}

type AppendDatum_VIp struct {
	VIp string `protobuf:"bytes,8,opt,name=v_ip,json=vIp,proto3,oneof"`
}

type AppendDatum_VTime struct {
	VTime int64 `protobuf:"varint,9,opt,name=v_time,json=vTime,proto3,oneof"`
}

type AppendDatum_VNull struct {
	VNull bool `protobuf:"varint,10,opt,name=v_null,json=vNull,proto3,oneof"`
}

func (*AppendDatum_VInt32) isAppendDatum_Value() {}

func (*AppendDatum_VUint32) isAppendDatum_Value() {}

func (*AppendDatum_VInt64) isAppendDatum_Value() {}

func (*AppendDatum_VUint64) isAppendDatum_Value() {}

func (*AppendDatum_VFloat) isAppendDatum_Value() {}

func (*AppendDatum_VDouble) isAppendDatum_Value() {}

func (*AppendDatum_VString) isAppendDatum_Value() {}

func (*AppendDatum_VBool) isAppendDatum_Value() {}

func (*AppendDatum_VBytes) isAppendDatum_Value() {}

func (*AppendDatum_VIp) isAppendDatum_Value() {}

func (*AppendDatum_VTime) isAppendDatum_Value() {}

func (*AppendDatum_VNull) isAppendDatum_Value() {}

type AppendDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason       string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse       string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	SuccessCount int64  `protobuf:"varint,4,opt,name=successCount,proto3" json:"successCount,omitempty"`
	FailCount    int64  `protobuf:"varint,5,opt,name=failCount,proto3" json:"failCount,omitempty"`
}

func (x *AppendDone) Reset() {
	*x = AppendDone{}
	mi := &file_machrpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendDone) ProtoMessage() {}

func (x *AppendDone) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendDone.ProtoReflect.Descriptor instead.
func (*AppendDone) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{13}
}

func (x *AppendDone) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AppendDone) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AppendDone) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *AppendDone) GetSuccessCount() int64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *AppendDone) GetFailCount() int64 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

type ExplainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn *ConnHandle `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Sql  string      `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Full bool        `protobuf:"varint,3,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *ExplainRequest) Reset() {
	*x = ExplainRequest{}
	mi := &file_machrpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExplainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainRequest) ProtoMessage() {}

func (x *ExplainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainRequest.ProtoReflect.Descriptor instead.
func (*ExplainRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{14}
}

func (x *ExplainRequest) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *ExplainRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *ExplainRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type ExplainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Plan    string `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *ExplainResponse) Reset() {
	*x = ExplainResponse{}
	mi := &file_machrpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExplainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainResponse) ProtoMessage() {}

func (x *ExplainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainResponse.ProtoReflect.Descriptor instead.
func (*ExplainResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{15}
}

func (x *ExplainResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExplainResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExplainResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ExplainResponse) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn   *ConnHandle  `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Sql    string       `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Params []*anypb.Any `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	mi := &file_machrpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{16}
}

func (x *ExecRequest) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *ExecRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *ExecRequest) GetParams() []*anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason       string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse       string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	RowsAffected int64  `protobuf:"varint,4,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
	Message      string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	mi := &file_machrpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{17}
}

func (x *ExecResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ExecResponse) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

func (x *ExecResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryRowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn   *ConnHandle  `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Sql    string       `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Params []*anypb.Any `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryRowRequest) Reset() {
	*x = QueryRowRequest{}
	mi := &file_machrpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRowRequest) ProtoMessage() {}

func (x *QueryRowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRowRequest.ProtoReflect.Descriptor instead.
func (*QueryRowRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{18}
}

func (x *QueryRowRequest) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *QueryRowRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *QueryRowRequest) GetParams() []*anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

type QueryRowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason       string       `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse       string       `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Values       []*anypb.Any `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	RowsAffected int64        `protobuf:"varint,5,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
	Message      string       `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueryRowResponse) Reset() {
	*x = QueryRowResponse{}
	mi := &file_machrpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRowResponse) ProtoMessage() {}

func (x *QueryRowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRowResponse.ProtoReflect.Descriptor instead.
func (*QueryRowResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{19}
}

func (x *QueryRowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *QueryRowResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *QueryRowResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *QueryRowResponse) GetValues() []*anypb.Any {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *QueryRowResponse) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

func (x *QueryRowResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn   *ConnHandle  `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Sql    string       `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Params []*anypb.Any `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_machrpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{20}
}

func (x *QueryRequest) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *QueryRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *QueryRequest) GetParams() []*anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason       string      `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse       string      `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	RowsHandle   *RowsHandle `protobuf:"bytes,4,opt,name=rowsHandle,proto3" json:"rowsHandle,omitempty"` // only available if stmt is fetchable
	RowsAffected int64       `protobuf:"varint,5,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_machrpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{21}
}

func (x *QueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *QueryResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *QueryResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *QueryResponse) GetRowsHandle() *RowsHandle {
	if x != nil {
		return x.RowsHandle
	}
	return nil
}

func (x *QueryResponse) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

type ColumnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string    `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Columns []*Column `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *ColumnsResponse) Reset() {
	*x = ColumnsResponse{}
	mi := &file_machrpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsResponse) ProtoMessage() {}

func (x *ColumnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsResponse.ProtoReflect.Descriptor instead.
func (*ColumnsResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{22}
}

func (x *ColumnsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ColumnsResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ColumnsResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ColumnsResponse) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size   int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Length int32  `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_machrpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{23}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Column) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Column) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type RowsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle string      `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Conn   *ConnHandle `protobuf:"bytes,2,opt,name=conn,proto3" json:"conn,omitempty"`
}

func (x *RowsHandle) Reset() {
	*x = RowsHandle{}
	mi := &file_machrpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowsHandle) ProtoMessage() {}

func (x *RowsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowsHandle.ProtoReflect.Descriptor instead.
func (*RowsHandle) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{24}
}

func (x *RowsHandle) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *RowsHandle) GetConn() *ConnHandle {
	if x != nil {
		return x.Conn
	}
	return nil
}

type RowsFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason    string       `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse    string       `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	HasNoRows bool         `protobuf:"varint,4,opt,name=hasNoRows,proto3" json:"hasNoRows,omitempty"`
	Values    []*anypb.Any `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RowsFetchResponse) Reset() {
	*x = RowsFetchResponse{}
	mi := &file_machrpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowsFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowsFetchResponse) ProtoMessage() {}

func (x *RowsFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowsFetchResponse.ProtoReflect.Descriptor instead.
func (*RowsFetchResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{25}
}

func (x *RowsFetchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RowsFetchResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RowsFetchResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *RowsFetchResponse) GetHasNoRows() bool {
	if x != nil {
		return x.HasNoRows
	}
	return false
}

func (x *RowsFetchResponse) GetValues() []*anypb.Any {
	if x != nil {
		return x.Values
	}
	return nil
}

type RowsCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *RowsCloseResponse) Reset() {
	*x = RowsCloseResponse{}
	mi := &file_machrpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowsCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowsCloseResponse) ProtoMessage() {}

func (x *RowsCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowsCloseResponse.ProtoReflect.Descriptor instead.
func (*RowsCloseResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{26}
}

func (x *RowsCloseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RowsCloseResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RowsCloseResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type UserAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginName string `protobuf:"bytes,1,opt,name=loginName,proto3" json:"loginName,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UserAuthRequest) Reset() {
	*x = UserAuthRequest{}
	mi := &file_machrpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthRequest) ProtoMessage() {}

func (x *UserAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthRequest.ProtoReflect.Descriptor instead.
func (*UserAuthRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{27}
}

func (x *UserAuthRequest) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *UserAuthRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UserAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *UserAuthResponse) Reset() {
	*x = UserAuthResponse{}
	mi := &file_machrpc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthResponse) ProtoMessage() {}

func (x *UserAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthResponse.ProtoReflect.Descriptor instead.
func (*UserAuthResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{28}
}

func (x *UserAuthResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UserAuthResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UserAuthResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type SessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statz    bool `protobuf:"varint,1,opt,name=statz,proto3" json:"statz,omitempty"`
	Sessions bool `protobuf:"varint,2,opt,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *SessionsRequest) Reset() {
	*x = SessionsRequest{}
	mi := &file_machrpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsRequest) ProtoMessage() {}

func (x *SessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsRequest.ProtoReflect.Descriptor instead.
func (*SessionsRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{29}
}

func (x *SessionsRequest) GetStatz() bool {
	if x != nil {
		return x.Statz
	}
	return false
}

func (x *SessionsRequest) GetSessions() bool {
	if x != nil {
		return x.Sessions
	}
	return false
}

type SessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason   string     `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse   string     `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Statz    *Statz     `protobuf:"bytes,4,opt,name=statz,proto3" json:"statz,omitempty"`
	Sessions []*Session `protobuf:"bytes,5,rep,name=Sessions,proto3" json:"Sessions,omitempty"`
}

func (x *SessionsResponse) Reset() {
	*x = SessionsResponse{}
	mi := &file_machrpc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsResponse) ProtoMessage() {}

func (x *SessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsResponse.ProtoReflect.Descriptor instead.
func (*SessionsResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{30}
}

func (x *SessionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SessionsResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SessionsResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *SessionsResponse) GetStatz() *Statz {
	if x != nil {
		return x.Statz
	}
	return nil
}

func (x *SessionsResponse) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type Statz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conns          int64 `protobuf:"varint,1,opt,name=conns,proto3" json:"conns,omitempty"`
	Stmts          int64 `protobuf:"varint,2,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Appenders      int64 `protobuf:"varint,3,opt,name=appenders,proto3" json:"appenders,omitempty"`
	ConnsInUse     int32 `protobuf:"varint,4,opt,name=connsInUse,proto3" json:"connsInUse,omitempty"`
	StmtsInUse     int32 `protobuf:"varint,5,opt,name=stmtsInUse,proto3" json:"stmtsInUse,omitempty"`
	AppendersInUse int32 `protobuf:"varint,6,opt,name=appendersInUse,proto3" json:"appendersInUse,omitempty"`
	RawConns       int32 `protobuf:"varint,7,opt,name=rawConns,proto3" json:"rawConns,omitempty"`
}

func (x *Statz) Reset() {
	*x = Statz{}
	mi := &file_machrpc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Statz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statz) ProtoMessage() {}

func (x *Statz) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statz.ProtoReflect.Descriptor instead.
func (*Statz) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{31}
}

func (x *Statz) GetConns() int64 {
	if x != nil {
		return x.Conns
	}
	return 0
}

func (x *Statz) GetStmts() int64 {
	if x != nil {
		return x.Stmts
	}
	return 0
}

func (x *Statz) GetAppenders() int64 {
	if x != nil {
		return x.Appenders
	}
	return 0
}

func (x *Statz) GetConnsInUse() int32 {
	if x != nil {
		return x.ConnsInUse
	}
	return 0
}

func (x *Statz) GetStmtsInUse() int32 {
	if x != nil {
		return x.StmtsInUse
	}
	return 0
}

func (x *Statz) GetAppendersInUse() int32 {
	if x != nil {
		return x.AppendersInUse
	}
	return 0
}

func (x *Statz) GetRawConns() int32 {
	if x != nil {
		return x.RawConns
	}
	return 0
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreTime       int64  `protobuf:"varint,2,opt,name=creTime,proto3" json:"creTime,omitempty"`
	LatestSqlTime int64  `protobuf:"varint,3,opt,name=latestSqlTime,proto3" json:"latestSqlTime,omitempty"`
	LatestSql     string `protobuf:"bytes,4,opt,name=latestSql,proto3" json:"latestSql,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_machrpc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{32}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetCreTime() int64 {
	if x != nil {
		return x.CreTime
	}
	return 0
}

func (x *Session) GetLatestSqlTime() int64 {
	if x != nil {
		return x.LatestSqlTime
	}
	return 0
}

func (x *Session) GetLatestSql() string {
	if x != nil {
		return x.LatestSql
	}
	return ""
}

type KillSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Force bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *KillSessionRequest) Reset() {
	*x = KillSessionRequest{}
	mi := &file_machrpc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillSessionRequest) ProtoMessage() {}

func (x *KillSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillSessionRequest.ProtoReflect.Descriptor instead.
func (*KillSessionRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{33}
}

func (x *KillSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KillSessionRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type KillSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *KillSessionResponse) Reset() {
	*x = KillSessionResponse{}
	mi := &file_machrpc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillSessionResponse) ProtoMessage() {}

func (x *KillSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillSessionResponse.ProtoReflect.Descriptor instead.
func (*KillSessionResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{34}
}

func (x *KillSessionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KillSessionResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *KillSessionResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

var File_machrpc_proto protoreflect.FileDescriptor

var file_machrpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x22, 0x3b, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x22, 0x5d, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xc9, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x0e,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x22,
	0x6e, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x3a, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2a, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x07, 0x76,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x76, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x76, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b,
	0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x07, 0x76,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x76, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x05, 0x76, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x76, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x04, 0x76, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x76, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x76, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5f, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x22, 0x6f, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x22, 0x76, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73,
	0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x7a, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c,
	0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc8,
	0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x77, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x71, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x22, 0x5c, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x4d,
	0x0a, 0x0a, 0x52, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x22, 0xa9, 0x01,
	0x0a, 0x11, 0x52, 0x6f, 0x77, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x11, 0x52, 0x6f, 0x77,
	0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x5c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x7a, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x7a, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x7a,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x7a, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x7a, 0x12, 0x2c, 0x0a,
	0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x7a, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x55, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x43, 0x6f,
	0x6e, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x77, 0x43, 0x6f,
	0x6e, 0x6e, 0x73, 0x22, 0x77, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x22, 0x3a, 0x0a, 0x12,
	0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x5f, 0x0a, 0x13, 0x4b, 0x69, 0x6c, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x32, 0xbb, 0x07, 0x0a, 0x08, 0x4d, 0x61,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x14,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x45, 0x78,
	0x65, 0x63, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x12, 0x18, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70,
	0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x15, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x18,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x52, 0x6f,
	0x77, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x1a, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x52, 0x6f,
	0x77, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x1a, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x06, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x6f, 0x6e,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3e, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x12, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x4b,
	0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x6e,
	0x65, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_machrpc_proto_rawDescOnce sync.Once
	file_machrpc_proto_rawDescData = file_machrpc_proto_rawDesc
)

func file_machrpc_proto_rawDescGZIP() []byte {
	file_machrpc_proto_rawDescOnce.Do(func() {
		file_machrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_machrpc_proto_rawDescData)
	})
	return file_machrpc_proto_rawDescData
}

var file_machrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_machrpc_proto_goTypes = []any{
	(*ConnHandle)(nil),          // 0: machrpc.ConnHandle
	(*ConnRequest)(nil),         // 1: machrpc.ConnRequest
	(*ConnResponse)(nil),        // 2: machrpc.ConnResponse
	(*ConnCloseRequest)(nil),    // 3: machrpc.ConnCloseRequest
	(*ConnCloseResponse)(nil),   // 4: machrpc.ConnCloseResponse
	(*PingRequest)(nil),         // 5: machrpc.PingRequest
	(*PingResponse)(nil),        // 6: machrpc.PingResponse
	(*AppenderRequest)(nil),     // 7: machrpc.AppenderRequest
	(*AppenderResponse)(nil),    // 8: machrpc.AppenderResponse
	(*AppenderHandle)(nil),      // 9: machrpc.AppenderHandle
	(*AppendData)(nil),          // 10: machrpc.AppendData
	(*AppendRecord)(nil),        // 11: machrpc.AppendRecord
	(*AppendDatum)(nil),         // 12: machrpc.AppendDatum
	(*AppendDone)(nil),          // 13: machrpc.AppendDone
	(*ExplainRequest)(nil),      // 14: machrpc.ExplainRequest
	(*ExplainResponse)(nil),     // 15: machrpc.ExplainResponse
	(*ExecRequest)(nil),         // 16: machrpc.ExecRequest
	(*ExecResponse)(nil),        // 17: machrpc.ExecResponse
	(*QueryRowRequest)(nil),     // 18: machrpc.QueryRowRequest
	(*QueryRowResponse)(nil),    // 19: machrpc.QueryRowResponse
	(*QueryRequest)(nil),        // 20: machrpc.QueryRequest
	(*QueryResponse)(nil),       // 21: machrpc.QueryResponse
	(*ColumnsResponse)(nil),     // 22: machrpc.ColumnsResponse
	(*Column)(nil),              // 23: machrpc.Column
	(*RowsHandle)(nil),          // 24: machrpc.RowsHandle
	(*RowsFetchResponse)(nil),   // 25: machrpc.RowsFetchResponse
	(*RowsCloseResponse)(nil),   // 26: machrpc.RowsCloseResponse
	(*UserAuthRequest)(nil),     // 27: machrpc.UserAuthRequest
	(*UserAuthResponse)(nil),    // 28: machrpc.UserAuthResponse
	(*SessionsRequest)(nil),     // 29: machrpc.SessionsRequest
	(*SessionsResponse)(nil),    // 30: machrpc.SessionsResponse
	(*Statz)(nil),               // 31: machrpc.Statz
	(*Session)(nil),             // 32: machrpc.Session
	(*KillSessionRequest)(nil),  // 33: machrpc.KillSessionRequest
	(*KillSessionResponse)(nil), // 34: machrpc.KillSessionResponse
	(*anypb.Any)(nil),           // 35: google.protobuf.Any
}
var file_machrpc_proto_depIdxs = []int32{
	0,  // 0: machrpc.ConnResponse.conn:type_name -> machrpc.ConnHandle
	0,  // 1: machrpc.ConnCloseRequest.conn:type_name -> machrpc.ConnHandle
	0,  // 2: machrpc.PingRequest.conn:type_name -> machrpc.ConnHandle
	0,  // 3: machrpc.AppenderRequest.conn:type_name -> machrpc.ConnHandle
	9,  // 4: machrpc.AppenderResponse.handle:type_name -> machrpc.AppenderHandle
	0,  // 5: machrpc.AppenderHandle.conn:type_name -> machrpc.ConnHandle
	9,  // 6: machrpc.AppendData.handle:type_name -> machrpc.AppenderHandle
	11, // 7: machrpc.AppendData.records:type_name -> machrpc.AppendRecord
	12, // 8: machrpc.AppendRecord.tuple:type_name -> machrpc.AppendDatum
	0,  // 9: machrpc.ExplainRequest.conn:type_name -> machrpc.ConnHandle
	0,  // 10: machrpc.ExecRequest.conn:type_name -> machrpc.ConnHandle
	35, // 11: machrpc.ExecRequest.params:type_name -> google.protobuf.Any
	0,  // 12: machrpc.QueryRowRequest.conn:type_name -> machrpc.ConnHandle
	35, // 13: machrpc.QueryRowRequest.params:type_name -> google.protobuf.Any
	35, // 14: machrpc.QueryRowResponse.values:type_name -> google.protobuf.Any
	0,  // 15: machrpc.QueryRequest.conn:type_name -> machrpc.ConnHandle
	35, // 16: machrpc.QueryRequest.params:type_name -> google.protobuf.Any
	24, // 17: machrpc.QueryResponse.rowsHandle:type_name -> machrpc.RowsHandle
	23, // 18: machrpc.ColumnsResponse.columns:type_name -> machrpc.Column
	0,  // 19: machrpc.RowsHandle.conn:type_name -> machrpc.ConnHandle
	35, // 20: machrpc.RowsFetchResponse.values:type_name -> google.protobuf.Any
	31, // 21: machrpc.SessionsResponse.statz:type_name -> machrpc.Statz
	32, // 22: machrpc.SessionsResponse.Sessions:type_name -> machrpc.Session
	1,  // 23: machrpc.Machbase.Conn:input_type -> machrpc.ConnRequest
	3,  // 24: machrpc.Machbase.ConnClose:input_type -> machrpc.ConnCloseRequest
	5,  // 25: machrpc.Machbase.Ping:input_type -> machrpc.PingRequest
	16, // 26: machrpc.Machbase.Exec:input_type -> machrpc.ExecRequest
	18, // 27: machrpc.Machbase.QueryRow:input_type -> machrpc.QueryRowRequest
	20, // 28: machrpc.Machbase.Query:input_type -> machrpc.QueryRequest
	24, // 29: machrpc.Machbase.Columns:input_type -> machrpc.RowsHandle
	24, // 30: machrpc.Machbase.RowsFetch:input_type -> machrpc.RowsHandle
	24, // 31: machrpc.Machbase.RowsClose:input_type -> machrpc.RowsHandle
	7,  // 32: machrpc.Machbase.Appender:input_type -> machrpc.AppenderRequest
	10, // 33: machrpc.Machbase.Append:input_type -> machrpc.AppendData
	14, // 34: machrpc.Machbase.Explain:input_type -> machrpc.ExplainRequest
	27, // 35: machrpc.Machbase.UserAuth:input_type -> machrpc.UserAuthRequest
	29, // 36: machrpc.Machbase.Sessions:input_type -> machrpc.SessionsRequest
	33, // 37: machrpc.Machbase.KillSession:input_type -> machrpc.KillSessionRequest
	2,  // 38: machrpc.Machbase.Conn:output_type -> machrpc.ConnResponse
	4,  // 39: machrpc.Machbase.ConnClose:output_type -> machrpc.ConnCloseResponse
	6,  // 40: machrpc.Machbase.Ping:output_type -> machrpc.PingResponse
	17, // 41: machrpc.Machbase.Exec:output_type -> machrpc.ExecResponse
	19, // 42: machrpc.Machbase.QueryRow:output_type -> machrpc.QueryRowResponse
	21, // 43: machrpc.Machbase.Query:output_type -> machrpc.QueryResponse
	22, // 44: machrpc.Machbase.Columns:output_type -> machrpc.ColumnsResponse
	25, // 45: machrpc.Machbase.RowsFetch:output_type -> machrpc.RowsFetchResponse
	26, // 46: machrpc.Machbase.RowsClose:output_type -> machrpc.RowsCloseResponse
	8,  // 47: machrpc.Machbase.Appender:output_type -> machrpc.AppenderResponse
	13, // 48: machrpc.Machbase.Append:output_type -> machrpc.AppendDone
	15, // 49: machrpc.Machbase.Explain:output_type -> machrpc.ExplainResponse
	28, // 50: machrpc.Machbase.UserAuth:output_type -> machrpc.UserAuthResponse
	30, // 51: machrpc.Machbase.Sessions:output_type -> machrpc.SessionsResponse
	34, // 52: machrpc.Machbase.KillSession:output_type -> machrpc.KillSessionResponse
	38, // [38:53] is the sub-list for method output_type
	23, // [23:38] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_machrpc_proto_init() }
func file_machrpc_proto_init() {
	if File_machrpc_proto != nil {
		return
	}
	file_machrpc_proto_msgTypes[12].OneofWrappers = []any{
		(*AppendDatum_VInt32)(nil),
		(*AppendDatum_VUint32)(nil),
		(*AppendDatum_VInt64)(nil),
		(*AppendDatum_VUint64)(nil),
		(*AppendDatum_VFloat)(nil),
		(*AppendDatum_VDouble)(nil),
		(*AppendDatum_VString)(nil),
		(*AppendDatum_VBool)(nil),
		(*AppendDatum_VBytes)(nil),
		(*AppendDatum_VIp)(nil),
		(*AppendDatum_VTime)(nil),
		(*AppendDatum_VNull)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_machrpc_proto_goTypes,
		DependencyIndexes: file_machrpc_proto_depIdxs,
		MessageInfos:      file_machrpc_proto_msgTypes,
	}.Build()
	File_machrpc_proto = out.File
	file_machrpc_proto_rawDesc = nil
	file_machrpc_proto_goTypes = nil
	file_machrpc_proto_depIdxs = nil
}

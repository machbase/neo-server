// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: bridge.proto

package bridge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Management_ListBridge_FullMethodName = "/bridge.Management/ListBridge"
	Management_AddBridge_FullMethodName  = "/bridge.Management/AddBridge"
	Management_GetBridge_FullMethodName  = "/bridge.Management/GetBridge"
	Management_DelBridge_FullMethodName  = "/bridge.Management/DelBridge"
	Management_TestBridge_FullMethodName = "/bridge.Management/TestBridge"
)

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	ListBridge(ctx context.Context, in *ListBridgeRequest, opts ...grpc.CallOption) (*ListBridgeResponse, error)
	AddBridge(ctx context.Context, in *AddBridgeRequest, opts ...grpc.CallOption) (*AddBridgeResponse, error)
	GetBridge(ctx context.Context, in *GetBridgeRequest, opts ...grpc.CallOption) (*GetBridgeResponse, error)
	DelBridge(ctx context.Context, in *DelBridgeRequest, opts ...grpc.CallOption) (*DelBridgeResponse, error)
	TestBridge(ctx context.Context, in *TestBridgeRequest, opts ...grpc.CallOption) (*TestBridgeResponse, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) ListBridge(ctx context.Context, in *ListBridgeRequest, opts ...grpc.CallOption) (*ListBridgeResponse, error) {
	out := new(ListBridgeResponse)
	err := c.cc.Invoke(ctx, Management_ListBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddBridge(ctx context.Context, in *AddBridgeRequest, opts ...grpc.CallOption) (*AddBridgeResponse, error) {
	out := new(AddBridgeResponse)
	err := c.cc.Invoke(ctx, Management_AddBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetBridge(ctx context.Context, in *GetBridgeRequest, opts ...grpc.CallOption) (*GetBridgeResponse, error) {
	out := new(GetBridgeResponse)
	err := c.cc.Invoke(ctx, Management_GetBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DelBridge(ctx context.Context, in *DelBridgeRequest, opts ...grpc.CallOption) (*DelBridgeResponse, error) {
	out := new(DelBridgeResponse)
	err := c.cc.Invoke(ctx, Management_DelBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) TestBridge(ctx context.Context, in *TestBridgeRequest, opts ...grpc.CallOption) (*TestBridgeResponse, error) {
	out := new(TestBridgeResponse)
	err := c.cc.Invoke(ctx, Management_TestBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	ListBridge(context.Context, *ListBridgeRequest) (*ListBridgeResponse, error)
	AddBridge(context.Context, *AddBridgeRequest) (*AddBridgeResponse, error)
	GetBridge(context.Context, *GetBridgeRequest) (*GetBridgeResponse, error)
	DelBridge(context.Context, *DelBridgeRequest) (*DelBridgeResponse, error)
	TestBridge(context.Context, *TestBridgeRequest) (*TestBridgeResponse, error)
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) ListBridge(context.Context, *ListBridgeRequest) (*ListBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBridge not implemented")
}
func (UnimplementedManagementServer) AddBridge(context.Context, *AddBridgeRequest) (*AddBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBridge not implemented")
}
func (UnimplementedManagementServer) GetBridge(context.Context, *GetBridgeRequest) (*GetBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridge not implemented")
}
func (UnimplementedManagementServer) DelBridge(context.Context, *DelBridgeRequest) (*DelBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBridge not implemented")
}
func (UnimplementedManagementServer) TestBridge(context.Context, *TestBridgeRequest) (*TestBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestBridge not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_ListBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListBridge(ctx, req.(*ListBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_AddBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddBridge(ctx, req.(*AddBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetBridge(ctx, req.(*GetBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DelBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DelBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DelBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DelBridge(ctx, req.(*DelBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_TestBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).TestBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_TestBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).TestBridge(ctx, req.(*TestBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBridge",
			Handler:    _Management_ListBridge_Handler,
		},
		{
			MethodName: "AddBridge",
			Handler:    _Management_AddBridge_Handler,
		},
		{
			MethodName: "GetBridge",
			Handler:    _Management_GetBridge_Handler,
		},
		{
			MethodName: "DelBridge",
			Handler:    _Management_DelBridge_Handler,
		},
		{
			MethodName: "TestBridge",
			Handler:    _Management_TestBridge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}

const (
	Runtime_Exec_FullMethodName                = "/bridge.Runtime/Exec"
	Runtime_SqlQueryResultFetch_FullMethodName = "/bridge.Runtime/SqlQueryResultFetch"
	Runtime_SqlQueryResultClose_FullMethodName = "/bridge.Runtime/SqlQueryResultClose"
)

// RuntimeClient is the client API for Runtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeClient interface {
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	SqlQueryResultFetch(ctx context.Context, in *SqlQueryResult, opts ...grpc.CallOption) (*SqlQueryResultFetchResponse, error)
	SqlQueryResultClose(ctx context.Context, in *SqlQueryResult, opts ...grpc.CallOption) (*SqlQueryResultCloseResponse, error)
}

type runtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeClient(cc grpc.ClientConnInterface) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, Runtime_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) SqlQueryResultFetch(ctx context.Context, in *SqlQueryResult, opts ...grpc.CallOption) (*SqlQueryResultFetchResponse, error) {
	out := new(SqlQueryResultFetchResponse)
	err := c.cc.Invoke(ctx, Runtime_SqlQueryResultFetch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) SqlQueryResultClose(ctx context.Context, in *SqlQueryResult, opts ...grpc.CallOption) (*SqlQueryResultCloseResponse, error) {
	out := new(SqlQueryResultCloseResponse)
	err := c.cc.Invoke(ctx, Runtime_SqlQueryResultClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServer is the server API for Runtime service.
// All implementations must embed UnimplementedRuntimeServer
// for forward compatibility
type RuntimeServer interface {
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	SqlQueryResultFetch(context.Context, *SqlQueryResult) (*SqlQueryResultFetchResponse, error)
	SqlQueryResultClose(context.Context, *SqlQueryResult) (*SqlQueryResultCloseResponse, error)
	mustEmbedUnimplementedRuntimeServer()
}

// UnimplementedRuntimeServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeServer struct {
}

func (UnimplementedRuntimeServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedRuntimeServer) SqlQueryResultFetch(context.Context, *SqlQueryResult) (*SqlQueryResultFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqlQueryResultFetch not implemented")
}
func (UnimplementedRuntimeServer) SqlQueryResultClose(context.Context, *SqlQueryResult) (*SqlQueryResultCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqlQueryResultClose not implemented")
}
func (UnimplementedRuntimeServer) mustEmbedUnimplementedRuntimeServer() {}

// UnsafeRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServer will
// result in compilation errors.
type UnsafeRuntimeServer interface {
	mustEmbedUnimplementedRuntimeServer()
}

func RegisterRuntimeServer(s grpc.ServiceRegistrar, srv RuntimeServer) {
	s.RegisterService(&Runtime_ServiceDesc, srv)
}

func _Runtime_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtime_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_SqlQueryResultFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlQueryResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).SqlQueryResultFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtime_SqlQueryResultFetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).SqlQueryResultFetch(ctx, req.(*SqlQueryResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_SqlQueryResultClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlQueryResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).SqlQueryResultClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtime_SqlQueryResultClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).SqlQueryResultClose(ctx, req.(*SqlQueryResult))
	}
	return interceptor(ctx, in, info, handler)
}

// Runtime_ServiceDesc is the grpc.ServiceDesc for Runtime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runtime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _Runtime_Exec_Handler,
		},
		{
			MethodName: "SqlQueryResultFetch",
			Handler:    _Runtime_SqlQueryResultFetch_Handler,
		},
		{
			MethodName: "SqlQueryResultClose",
			Handler:    _Runtime_SqlQueryResultClose_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: bridge.proto

package bridge

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBridgeRequest) Reset() {
	*x = ListBridgeRequest{}
	mi := &file_bridge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBridgeRequest) ProtoMessage() {}

func (x *ListBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBridgeRequest.ProtoReflect.Descriptor instead.
func (*ListBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{0}
}

type ListBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string    `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Bridges []*Bridge `protobuf:"bytes,4,rep,name=bridges,proto3" json:"bridges,omitempty"`
}

func (x *ListBridgeResponse) Reset() {
	*x = ListBridgeResponse{}
	mi := &file_bridge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBridgeResponse) ProtoMessage() {}

func (x *ListBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBridgeResponse.ProtoReflect.Descriptor instead.
func (*ListBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *ListBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ListBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ListBridgeResponse) GetBridges() []*Bridge {
	if x != nil {
		return x.Bridges
	}
	return nil
}

type Bridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Bridge) Reset() {
	*x = Bridge{}
	mi := &file_bridge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge) ProtoMessage() {}

func (x *Bridge) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bridge.ProtoReflect.Descriptor instead.
func (*Bridge) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *Bridge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bridge) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Bridge) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AddBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *AddBridgeRequest) Reset() {
	*x = AddBridgeRequest{}
	mi := &file_bridge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBridgeRequest) ProtoMessage() {}

func (x *AddBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBridgeRequest.ProtoReflect.Descriptor instead.
func (*AddBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *AddBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddBridgeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddBridgeRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AddBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *AddBridgeResponse) Reset() {
	*x = AddBridgeResponse{}
	mi := &file_bridge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBridgeResponse) ProtoMessage() {}

func (x *AddBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBridgeResponse.ProtoReflect.Descriptor instead.
func (*AddBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *AddBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AddBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type GetBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBridgeRequest) Reset() {
	*x = GetBridgeRequest{}
	mi := &file_bridge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeRequest) ProtoMessage() {}

func (x *GetBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeRequest.ProtoReflect.Descriptor instead.
func (*GetBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{5}
}

func (x *GetBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string  `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string  `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Bridge  *Bridge `protobuf:"bytes,4,opt,name=bridge,proto3" json:"bridge,omitempty"`
}

func (x *GetBridgeResponse) Reset() {
	*x = GetBridgeResponse{}
	mi := &file_bridge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeResponse) ProtoMessage() {}

func (x *GetBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeResponse.ProtoReflect.Descriptor instead.
func (*GetBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *GetBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *GetBridgeResponse) GetBridge() *Bridge {
	if x != nil {
		return x.Bridge
	}
	return nil
}

type DelBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DelBridgeRequest) Reset() {
	*x = DelBridgeRequest{}
	mi := &file_bridge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBridgeRequest) ProtoMessage() {}

func (x *DelBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBridgeRequest.ProtoReflect.Descriptor instead.
func (*DelBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *DelBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DelBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *DelBridgeResponse) Reset() {
	*x = DelBridgeResponse{}
	mi := &file_bridge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBridgeResponse) ProtoMessage() {}

func (x *DelBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBridgeResponse.ProtoReflect.Descriptor instead.
func (*DelBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{8}
}

func (x *DelBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DelBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DelBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type TestBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TestBridgeRequest) Reset() {
	*x = TestBridgeRequest{}
	mi := &file_bridge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBridgeRequest) ProtoMessage() {}

func (x *TestBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBridgeRequest.ProtoReflect.Descriptor instead.
func (*TestBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{9}
}

func (x *TestBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TestBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *TestBridgeResponse) Reset() {
	*x = TestBridgeResponse{}
	mi := &file_bridge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBridgeResponse) ProtoMessage() {}

func (x *TestBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBridgeResponse.ProtoReflect.Descriptor instead.
func (*TestBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{10}
}

func (x *TestBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TestBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TestBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type StatsBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatsBridgeRequest) Reset() {
	*x = StatsBridgeRequest{}
	mi := &file_bridge_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsBridgeRequest) ProtoMessage() {}

func (x *StatsBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsBridgeRequest.ProtoReflect.Descriptor instead.
func (*StatsBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{11}
}

func (x *StatsBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StatsBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse   string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	InMsgs   uint64 `protobuf:"varint,4,opt,name=inMsgs,proto3" json:"inMsgs,omitempty"`
	InBytes  uint64 `protobuf:"varint,5,opt,name=inBytes,proto3" json:"inBytes,omitempty"`
	OutMsgs  uint64 `protobuf:"varint,6,opt,name=outMsgs,proto3" json:"outMsgs,omitempty"`
	OutBytes uint64 `protobuf:"varint,7,opt,name=outBytes,proto3" json:"outBytes,omitempty"`
	Inserted uint64 `protobuf:"varint,8,opt,name=inserted,proto3" json:"inserted,omitempty"`
	Appended uint64 `protobuf:"varint,9,opt,name=appended,proto3" json:"appended,omitempty"`
}

func (x *StatsBridgeResponse) Reset() {
	*x = StatsBridgeResponse{}
	mi := &file_bridge_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsBridgeResponse) ProtoMessage() {}

func (x *StatsBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsBridgeResponse.ProtoReflect.Descriptor instead.
func (*StatsBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{12}
}

func (x *StatsBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StatsBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StatsBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *StatsBridgeResponse) GetInMsgs() uint64 {
	if x != nil {
		return x.InMsgs
	}
	return 0
}

func (x *StatsBridgeResponse) GetInBytes() uint64 {
	if x != nil {
		return x.InBytes
	}
	return 0
}

func (x *StatsBridgeResponse) GetOutMsgs() uint64 {
	if x != nil {
		return x.OutMsgs
	}
	return 0
}

func (x *StatsBridgeResponse) GetOutBytes() uint64 {
	if x != nil {
		return x.OutBytes
	}
	return 0
}

func (x *StatsBridgeResponse) GetInserted() uint64 {
	if x != nil {
		return x.Inserted
	}
	return 0
}

func (x *StatsBridgeResponse) GetAppended() uint64 {
	if x != nil {
		return x.Appended
	}
	return 0
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Command:
	//
	//	*ExecRequest_SqlExec
	//	*ExecRequest_SqlQuery
	//	*ExecRequest_Invoke
	Command isExecRequest_Command `protobuf_oneof:"command"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	mi := &file_bridge_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{13}
}

func (x *ExecRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ExecRequest) GetCommand() isExecRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *ExecRequest) GetSqlExec() *SqlRequest {
	if x, ok := x.GetCommand().(*ExecRequest_SqlExec); ok {
		return x.SqlExec
	}
	return nil
}

func (x *ExecRequest) GetSqlQuery() *SqlRequest {
	if x, ok := x.GetCommand().(*ExecRequest_SqlQuery); ok {
		return x.SqlQuery
	}
	return nil
}

func (x *ExecRequest) GetInvoke() *InvokeRequest {
	if x, ok := x.GetCommand().(*ExecRequest_Invoke); ok {
		return x.Invoke
	}
	return nil
}

type isExecRequest_Command interface {
	isExecRequest_Command()
}

type ExecRequest_SqlExec struct {
	SqlExec *SqlRequest `protobuf:"bytes,2,opt,name=sqlExec,proto3,oneof"`
}

type ExecRequest_SqlQuery struct {
	SqlQuery *SqlRequest `protobuf:"bytes,3,opt,name=sqlQuery,proto3,oneof"`
}

type ExecRequest_Invoke struct {
	Invoke *InvokeRequest `protobuf:"bytes,4,opt,name=invoke,proto3,oneof"`
}

func (*ExecRequest_SqlExec) isExecRequest_Command() {}

func (*ExecRequest_SqlQuery) isExecRequest_Command() {}

func (*ExecRequest_Invoke) isExecRequest_Command() {}

type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	// Types that are assignable to Result:
	//
	//	*ExecResponse_SqlExecResult
	//	*ExecResponse_SqlQueryResult
	//	*ExecResponse_InvokeResult
	Result isExecResponse_Result `protobuf_oneof:"result"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	mi := &file_bridge_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{14}
}

func (x *ExecResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (m *ExecResponse) GetResult() isExecResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ExecResponse) GetSqlExecResult() *SqlExecResult {
	if x, ok := x.GetResult().(*ExecResponse_SqlExecResult); ok {
		return x.SqlExecResult
	}
	return nil
}

func (x *ExecResponse) GetSqlQueryResult() *SqlQueryResult {
	if x, ok := x.GetResult().(*ExecResponse_SqlQueryResult); ok {
		return x.SqlQueryResult
	}
	return nil
}

func (x *ExecResponse) GetInvokeResult() *InvokeResult {
	if x, ok := x.GetResult().(*ExecResponse_InvokeResult); ok {
		return x.InvokeResult
	}
	return nil
}

type isExecResponse_Result interface {
	isExecResponse_Result()
}

type ExecResponse_SqlExecResult struct {
	SqlExecResult *SqlExecResult `protobuf:"bytes,4,opt,name=sqlExecResult,proto3,oneof"`
}

type ExecResponse_SqlQueryResult struct {
	SqlQueryResult *SqlQueryResult `protobuf:"bytes,5,opt,name=sqlQueryResult,proto3,oneof"`
}

type ExecResponse_InvokeResult struct {
	InvokeResult *InvokeResult `protobuf:"bytes,6,opt,name=invokeResult,proto3,oneof"`
}

func (*ExecResponse_SqlExecResult) isExecResponse_Result() {}

func (*ExecResponse_SqlQueryResult) isExecResponse_Result() {}

func (*ExecResponse_InvokeResult) isExecResponse_Result() {}

type SqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlText string   `protobuf:"bytes,1,opt,name=sqlText,proto3" json:"sqlText,omitempty"`
	Params  []*Datum `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *SqlRequest) Reset() {
	*x = SqlRequest{}
	mi := &file_bridge_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRequest) ProtoMessage() {}

func (x *SqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRequest.ProtoReflect.Descriptor instead.
func (*SqlRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{15}
}

func (x *SqlRequest) GetSqlText() string {
	if x != nil {
		return x.SqlText
	}
	return ""
}

func (x *SqlRequest) GetParams() []*Datum {
	if x != nil {
		return x.Params
	}
	return nil
}

type SqlExecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastInsertedId int64 `protobuf:"varint,1,opt,name=lastInsertedId,proto3" json:"lastInsertedId,omitempty"`
	RowsAffected   int64 `protobuf:"varint,2,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
}

func (x *SqlExecResult) Reset() {
	*x = SqlExecResult{}
	mi := &file_bridge_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlExecResult) ProtoMessage() {}

func (x *SqlExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlExecResult.ProtoReflect.Descriptor instead.
func (*SqlExecResult) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{16}
}

func (x *SqlExecResult) GetLastInsertedId() int64 {
	if x != nil {
		return x.LastInsertedId
	}
	return 0
}

func (x *SqlExecResult) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

type SqlQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle string                 `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Fields []*SqlQueryResultField `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *SqlQueryResult) Reset() {
	*x = SqlQueryResult{}
	mi := &file_bridge_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlQueryResult) ProtoMessage() {}

func (x *SqlQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlQueryResult.ProtoReflect.Descriptor instead.
func (*SqlQueryResult) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{17}
}

func (x *SqlQueryResult) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *SqlQueryResult) GetFields() []*SqlQueryResultField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type InvokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args  []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	Stdin []byte   `protobuf:"bytes,2,opt,name=stdin,proto3" json:"stdin,omitempty"`
}

func (x *InvokeRequest) Reset() {
	*x = InvokeRequest{}
	mi := &file_bridge_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeRequest) ProtoMessage() {}

func (x *InvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeRequest.ProtoReflect.Descriptor instead.
func (*InvokeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{18}
}

func (x *InvokeRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *InvokeRequest) GetStdin() []byte {
	if x != nil {
		return x.Stdin
	}
	return nil
}

type InvokeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode int32  `protobuf:"varint,1,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Stdout   []byte `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr   []byte `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *InvokeResult) Reset() {
	*x = InvokeResult{}
	mi := &file_bridge_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeResult) ProtoMessage() {}

func (x *InvokeResult) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeResult.ProtoReflect.Descriptor instead.
func (*InvokeResult) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{19}
}

func (x *InvokeResult) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *InvokeResult) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *InvokeResult) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

type SqlQueryResultField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size   int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Length int32  `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *SqlQueryResultField) Reset() {
	*x = SqlQueryResultField{}
	mi := &file_bridge_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlQueryResultField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlQueryResultField) ProtoMessage() {}

func (x *SqlQueryResultField) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlQueryResultField.ProtoReflect.Descriptor instead.
func (*SqlQueryResultField) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{20}
}

func (x *SqlQueryResultField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlQueryResultField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SqlQueryResultField) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SqlQueryResultField) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type SqlQueryResultFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason    string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse    string   `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	HasNoRows bool     `protobuf:"varint,4,opt,name=hasNoRows,proto3" json:"hasNoRows,omitempty"`
	Values    []*Datum `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SqlQueryResultFetchResponse) Reset() {
	*x = SqlQueryResultFetchResponse{}
	mi := &file_bridge_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlQueryResultFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlQueryResultFetchResponse) ProtoMessage() {}

func (x *SqlQueryResultFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlQueryResultFetchResponse.ProtoReflect.Descriptor instead.
func (*SqlQueryResultFetchResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{21}
}

func (x *SqlQueryResultFetchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SqlQueryResultFetchResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SqlQueryResultFetchResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *SqlQueryResultFetchResponse) GetHasNoRows() bool {
	if x != nil {
		return x.HasNoRows
	}
	return false
}

func (x *SqlQueryResultFetchResponse) GetValues() []*Datum {
	if x != nil {
		return x.Values
	}
	return nil
}

type Datum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Datum_VInt32
	//	*Datum_VUint32
	//	*Datum_VInt64
	//	*Datum_VUint64
	//	*Datum_VFloat
	//	*Datum_VDouble
	//	*Datum_VString
	//	*Datum_VBool
	//	*Datum_VBytes
	//	*Datum_VIp
	//	*Datum_VTime
	//	*Datum_VNull
	Value isDatum_Value `protobuf_oneof:"value"`
}

func (x *Datum) Reset() {
	*x = Datum{}
	mi := &file_bridge_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{22}
}

func (m *Datum) GetValue() isDatum_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Datum) GetVInt32() int32 {
	if x, ok := x.GetValue().(*Datum_VInt32); ok {
		return x.VInt32
	}
	return 0
}

func (x *Datum) GetVUint32() uint32 {
	if x, ok := x.GetValue().(*Datum_VUint32); ok {
		return x.VUint32
	}
	return 0
}

func (x *Datum) GetVInt64() int64 {
	if x, ok := x.GetValue().(*Datum_VInt64); ok {
		return x.VInt64
	}
	return 0
}

func (x *Datum) GetVUint64() uint64 {
	if x, ok := x.GetValue().(*Datum_VUint64); ok {
		return x.VUint64
	}
	return 0
}

func (x *Datum) GetVFloat() float32 {
	if x, ok := x.GetValue().(*Datum_VFloat); ok {
		return x.VFloat
	}
	return 0
}

func (x *Datum) GetVDouble() float64 {
	if x, ok := x.GetValue().(*Datum_VDouble); ok {
		return x.VDouble
	}
	return 0
}

func (x *Datum) GetVString() string {
	if x, ok := x.GetValue().(*Datum_VString); ok {
		return x.VString
	}
	return ""
}

func (x *Datum) GetVBool() bool {
	if x, ok := x.GetValue().(*Datum_VBool); ok {
		return x.VBool
	}
	return false
}

func (x *Datum) GetVBytes() []byte {
	if x, ok := x.GetValue().(*Datum_VBytes); ok {
		return x.VBytes
	}
	return nil
}

func (x *Datum) GetVIp() string {
	if x, ok := x.GetValue().(*Datum_VIp); ok {
		return x.VIp
	}
	return ""
}

func (x *Datum) GetVTime() int64 {
	if x, ok := x.GetValue().(*Datum_VTime); ok {
		return x.VTime
	}
	return 0
}

func (x *Datum) GetVNull() bool {
	if x, ok := x.GetValue().(*Datum_VNull); ok {
		return x.VNull
	}
	return false
}

type isDatum_Value interface {
	isDatum_Value()
}

type Datum_VInt32 struct {
	VInt32 int32 `protobuf:"varint,1,opt,name=v_int32,json=vInt32,proto3,oneof"`
}

type Datum_VUint32 struct {
	VUint32 uint32 `protobuf:"varint,11,opt,name=v_uint32,json=vUint32,proto3,oneof"`
}

type Datum_VInt64 struct {
	VInt64 int64 `protobuf:"varint,2,opt,name=v_int64,json=vInt64,proto3,oneof"`
}

type Datum_VUint64 struct {
	VUint64 uint64 `protobuf:"varint,12,opt,name=v_uint64,json=vUint64,proto3,oneof"`
}

type Datum_VFloat struct {
	VFloat float32 `protobuf:"fixed32,3,opt,name=v_float,json=vFloat,proto3,oneof"`
}

type Datum_VDouble struct {
	VDouble float64 `protobuf:"fixed64,4,opt,name=v_double,json=vDouble,proto3,oneof"`
}

type Datum_VString struct {
	VString string `protobuf:"bytes,5,opt,name=v_string,json=vString,proto3,oneof"`
}

type Datum_VBool struct {
	VBool bool `protobuf:"varint,6,opt,name=v_bool,json=vBool,proto3,oneof"`
}

type Datum_VBytes struct {
	VBytes []byte `protobuf:"bytes,7,opt,name=v_bytes,json=vBytes,proto3,oneof"`
}

type Datum_VIp struct {
	VIp string `protobuf:"bytes,8,opt,name=v_ip,json=vIp,proto3,oneof"`
}

type Datum_VTime struct {
	VTime int64 `protobuf:"varint,9,opt,name=v_time,json=vTime,proto3,oneof"`
}

type Datum_VNull struct {
	VNull bool `protobuf:"varint,10,opt,name=v_null,json=vNull,proto3,oneof"`
}

func (*Datum_VInt32) isDatum_Value() {}

func (*Datum_VUint32) isDatum_Value() {}

func (*Datum_VInt64) isDatum_Value() {}

func (*Datum_VUint64) isDatum_Value() {}

func (*Datum_VFloat) isDatum_Value() {}

func (*Datum_VDouble) isDatum_Value() {}

func (*Datum_VString) isDatum_Value() {}

func (*Datum_VBool) isDatum_Value() {}

func (*Datum_VBytes) isDatum_Value() {}

func (*Datum_VIp) isDatum_Value() {}

func (*Datum_VTime) isDatum_Value() {}

func (*Datum_VNull) isDatum_Value() {}

type SqlQueryResultCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *SqlQueryResultCloseResponse) Reset() {
	*x = SqlQueryResultCloseResponse{}
	mi := &file_bridge_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlQueryResultCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlQueryResultCloseResponse) ProtoMessage() {}

func (x *SqlQueryResultCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlQueryResultCloseResponse.ProtoReflect.Descriptor instead.
func (*SqlQueryResultCloseResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{23}
}

func (x *SqlQueryResultCloseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SqlQueryResultCloseResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SqlQueryResultCloseResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

var File_bridge_proto protoreflect.FileDescriptor

var file_bridge_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x07, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4e, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5d, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x4d, 0x73, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x4d, 0x73, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x73,
	0x71, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a,
	0x06, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x0c, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4d, 0x0a, 0x0a, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x71, 0x6c,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x71, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x75, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5b, 0x0a, 0x0d, 0x53, 0x71,
	0x6c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x5d, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x64, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69,
	0x6e, 0x22, 0x5a, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x69, 0x0a,
	0x13, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x52, 0x6f, 0x77, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x25, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x76, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x08,
	0x76, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x76, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x76, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x06, 0x76, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x08,
	0x76, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x19, 0x0a, 0x07, 0x76, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x06, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x04, 0x76, 0x5f,
	0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x76, 0x49, 0x70, 0x12,
	0x17, 0x0a, 0x06, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x05, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x4e, 0x75, 0x6c,
	0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x1b, 0x53, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x32, 0xb0, 0x03, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x12, 0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x18,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xea, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x13, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x16,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x13, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x23, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x6e, 0x65, 0x6f, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bridge_proto_rawDescOnce sync.Once
	file_bridge_proto_rawDescData = file_bridge_proto_rawDesc
)

func file_bridge_proto_rawDescGZIP() []byte {
	file_bridge_proto_rawDescOnce.Do(func() {
		file_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_bridge_proto_rawDescData)
	})
	return file_bridge_proto_rawDescData
}

var file_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_bridge_proto_goTypes = []any{
	(*ListBridgeRequest)(nil),           // 0: bridge.ListBridgeRequest
	(*ListBridgeResponse)(nil),          // 1: bridge.ListBridgeResponse
	(*Bridge)(nil),                      // 2: bridge.Bridge
	(*AddBridgeRequest)(nil),            // 3: bridge.AddBridgeRequest
	(*AddBridgeResponse)(nil),           // 4: bridge.AddBridgeResponse
	(*GetBridgeRequest)(nil),            // 5: bridge.GetBridgeRequest
	(*GetBridgeResponse)(nil),           // 6: bridge.GetBridgeResponse
	(*DelBridgeRequest)(nil),            // 7: bridge.DelBridgeRequest
	(*DelBridgeResponse)(nil),           // 8: bridge.DelBridgeResponse
	(*TestBridgeRequest)(nil),           // 9: bridge.TestBridgeRequest
	(*TestBridgeResponse)(nil),          // 10: bridge.TestBridgeResponse
	(*StatsBridgeRequest)(nil),          // 11: bridge.StatsBridgeRequest
	(*StatsBridgeResponse)(nil),         // 12: bridge.StatsBridgeResponse
	(*ExecRequest)(nil),                 // 13: bridge.ExecRequest
	(*ExecResponse)(nil),                // 14: bridge.ExecResponse
	(*SqlRequest)(nil),                  // 15: bridge.SqlRequest
	(*SqlExecResult)(nil),               // 16: bridge.SqlExecResult
	(*SqlQueryResult)(nil),              // 17: bridge.SqlQueryResult
	(*InvokeRequest)(nil),               // 18: bridge.InvokeRequest
	(*InvokeResult)(nil),                // 19: bridge.InvokeResult
	(*SqlQueryResultField)(nil),         // 20: bridge.SqlQueryResultField
	(*SqlQueryResultFetchResponse)(nil), // 21: bridge.SqlQueryResultFetchResponse
	(*Datum)(nil),                       // 22: bridge.Datum
	(*SqlQueryResultCloseResponse)(nil), // 23: bridge.SqlQueryResultCloseResponse
}
var file_bridge_proto_depIdxs = []int32{
	2,  // 0: bridge.ListBridgeResponse.bridges:type_name -> bridge.Bridge
	2,  // 1: bridge.GetBridgeResponse.bridge:type_name -> bridge.Bridge
	15, // 2: bridge.ExecRequest.sqlExec:type_name -> bridge.SqlRequest
	15, // 3: bridge.ExecRequest.sqlQuery:type_name -> bridge.SqlRequest
	18, // 4: bridge.ExecRequest.invoke:type_name -> bridge.InvokeRequest
	16, // 5: bridge.ExecResponse.sqlExecResult:type_name -> bridge.SqlExecResult
	17, // 6: bridge.ExecResponse.sqlQueryResult:type_name -> bridge.SqlQueryResult
	19, // 7: bridge.ExecResponse.invokeResult:type_name -> bridge.InvokeResult
	22, // 8: bridge.SqlRequest.params:type_name -> bridge.Datum
	20, // 9: bridge.SqlQueryResult.fields:type_name -> bridge.SqlQueryResultField
	22, // 10: bridge.SqlQueryResultFetchResponse.values:type_name -> bridge.Datum
	0,  // 11: bridge.Management.ListBridge:input_type -> bridge.ListBridgeRequest
	3,  // 12: bridge.Management.AddBridge:input_type -> bridge.AddBridgeRequest
	5,  // 13: bridge.Management.GetBridge:input_type -> bridge.GetBridgeRequest
	7,  // 14: bridge.Management.DelBridge:input_type -> bridge.DelBridgeRequest
	9,  // 15: bridge.Management.TestBridge:input_type -> bridge.TestBridgeRequest
	11, // 16: bridge.Management.StatsBridge:input_type -> bridge.StatsBridgeRequest
	13, // 17: bridge.Runtime.Exec:input_type -> bridge.ExecRequest
	17, // 18: bridge.Runtime.SqlQueryResultFetch:input_type -> bridge.SqlQueryResult
	17, // 19: bridge.Runtime.SqlQueryResultClose:input_type -> bridge.SqlQueryResult
	1,  // 20: bridge.Management.ListBridge:output_type -> bridge.ListBridgeResponse
	4,  // 21: bridge.Management.AddBridge:output_type -> bridge.AddBridgeResponse
	6,  // 22: bridge.Management.GetBridge:output_type -> bridge.GetBridgeResponse
	8,  // 23: bridge.Management.DelBridge:output_type -> bridge.DelBridgeResponse
	10, // 24: bridge.Management.TestBridge:output_type -> bridge.TestBridgeResponse
	12, // 25: bridge.Management.StatsBridge:output_type -> bridge.StatsBridgeResponse
	14, // 26: bridge.Runtime.Exec:output_type -> bridge.ExecResponse
	21, // 27: bridge.Runtime.SqlQueryResultFetch:output_type -> bridge.SqlQueryResultFetchResponse
	23, // 28: bridge.Runtime.SqlQueryResultClose:output_type -> bridge.SqlQueryResultCloseResponse
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_bridge_proto_init() }
func file_bridge_proto_init() {
	if File_bridge_proto != nil {
		return
	}
	file_bridge_proto_msgTypes[13].OneofWrappers = []any{
		(*ExecRequest_SqlExec)(nil),
		(*ExecRequest_SqlQuery)(nil),
		(*ExecRequest_Invoke)(nil),
	}
	file_bridge_proto_msgTypes[14].OneofWrappers = []any{
		(*ExecResponse_SqlExecResult)(nil),
		(*ExecResponse_SqlQueryResult)(nil),
		(*ExecResponse_InvokeResult)(nil),
	}
	file_bridge_proto_msgTypes[22].OneofWrappers = []any{
		(*Datum_VInt32)(nil),
		(*Datum_VUint32)(nil),
		(*Datum_VInt64)(nil),
		(*Datum_VUint64)(nil),
		(*Datum_VFloat)(nil),
		(*Datum_VDouble)(nil),
		(*Datum_VString)(nil),
		(*Datum_VBool)(nil),
		(*Datum_VBytes)(nil),
		(*Datum_VIp)(nil),
		(*Datum_VTime)(nil),
		(*Datum_VNull)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bridge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_bridge_proto_goTypes,
		DependencyIndexes: file_bridge_proto_depIdxs,
		MessageInfos:      file_bridge_proto_msgTypes,
	}.Build()
	File_bridge_proto = out.File
	file_bridge_proto_rawDesc = nil
	file_bridge_proto_goTypes = nil
	file_bridge_proto_depIdxs = nil
}

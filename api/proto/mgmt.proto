syntax = "proto3";

package mgmt;

option go_package = "github.com/machbase/neo-server/v8/api/mgmt";

service Management {
    rpc ListKey(ListKeyRequest) returns (ListKeyResponse) {}
    rpc GenKey(GenKeyRequest) returns (GenKeyResponse) {}
    rpc DelKey(DelKeyRequest) returns (DelKeyResponse) {}
    rpc ServerKey(ServerKeyRequest) returns (ServerKeyResponse) {}
    rpc ListSshKey(ListSshKeyRequest) returns (ListSshKeyResponse) {}
    rpc AddSshKey(AddSshKeyRequest) returns (AddSshKeyResponse) {}
    rpc DelSshKey(DelSshKeyRequest) returns (DelSshKeyResponse) {}
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}
    rpc ListShell(ListShellRequest) returns (ListShellResponse) {}
    rpc AddShell(AddShellRequest) returns (AddShellResponse) {}
    rpc DelShell(DelShellRequest) returns (DelShellResponse) {}
    rpc ServicePorts(ServicePortsRequest) returns (ServicePortsResponse) {}
    rpc ServerInfo(ServerInfoRequest) returns (ServerInfoResponse) {}
    rpc Sessions(SessionsRequest) returns (SessionsResponse) {}
    rpc KillSession(KillSessionRequest) returns (KillSessionResponse) {}
    rpc MaxOpenConns(MaxOpenConnsRequest) returns (MaxOpenConnsResponse) {}
    rpc HttpDebugMode(HttpDebugModeRequest) returns (HttpDebugModeResponse) {}
}

message ListShellRequest{
}

message ListShellResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
    repeated ShellDefinition shells = 4;
}

message ShellDefinition {
    string id = 1;
    string name = 2;
    string command = 3;
}

message AddShellRequest{
    string name = 1;
    string command = 2;
}

message AddShellResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
}

message DelShellRequest{
    string id = 1;
}

message DelShellResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
}

message ListSshKeyRequest {
}

message ListSshKeyResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
    repeated SshKey sshKeys = 4;
}

message SshKey {
    string keyType = 1;
    string fingerprint = 2;
    string comment = 3;
}

message AddSshKeyRequest {
    string keyType = 1;
    string key = 2;
    string comment = 3;
}

message AddSshKeyResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
}

message DelSshKeyRequest {
    string fingerprint = 1;
}

message DelSshKeyResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
}

message ListKeyRequest {
}

message ListKeyResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
    repeated KeyInfo keys = 4;
}

message GenKeyRequest {
    string id = 1;
    string type = 2;      // rsa, ecdsa
    int64  notBefore = 3; // unix epoch in seconds
    int64  notAfter = 4;  // unix epoch in seconds
}

message GenKeyResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
    string id = 4;
    string token = 5;
    string key = 6;
    string certificate = 7;
}

message DelKeyRequest {
    string id = 1;
}

message DelKeyResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
}

message KeyInfo {
    string id = 1;
    int64  notBefore = 3;
    int64  notAfter = 4;
}

message ServerKeyRequest {
}

message ServerKeyResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
    string certificate = 4;
}

message ShutdownRequest {
}

message ShutdownResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
}

message ServicePortsRequest {
    string service = 1;
}

message ServicePortsResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
    repeated Port ports = 4;
}

message Port {
    string service = 1;
    string address = 2;
}

message ServerInfoRequest {
}

message ServerInfoResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
    Version version = 4;
    Runtime runtime = 5;
}

message Version {
    int32 major = 1;
    int32 minor = 2;
    int32 patch = 3;
    string gitSHA = 4;
    string buildTimestamp = 5;
    string buildCompiler = 6;
    string engine = 7;
}

message Runtime {
    string OS             = 1;
    string arch           = 2;
    int32  pid            = 3;
    int64  uptimeInSecond = 4;
    int32  processes      = 5;
    int32  goroutines     = 6;
    map<string, uint64> mem = 7;
}

message SessionsRequest {
    bool statz = 1;
    bool sessions = 2;
}

message SessionsResponse {
    bool success = 1;
    string reason = 2;
    string elapse = 3;
    Statz statz = 4;
    repeated Session Sessions = 5;
}

message Statz {
    int64 conns          = 1;
    int64 stmts          = 2;
    int64 appenders      = 3;
    int32 connsInUse     = 4;
    int32 stmtsInUse     = 5;
    int32 appendersInUse = 6;
    int32 rawConns       = 7;
    uint64 connWaitTime  = 8;
    uint64 connUseTime   = 9;
}

message Session {
    string id            = 1;
    int64  creTime       = 2;
    int64  latestSqlTime = 3;
    string latestSql     = 4;
}

message KillSessionRequest {
    string id       = 1;
    bool   force    = 2;
}

message KillSessionResponse {
    bool   success  = 1;
    string reason   = 2;
    string elapse   = 3;
}

message MaxOpenConnsRequest {
    string cmd   = 1;   // get, set
    int32  limit = 2;   // set
}

message MaxOpenConnsResponse {
    bool   success      = 1;
    string reason       = 2;
    string elapse       = 3;
    int32  limit        = 4; // get
    int32  remains      = 5; // get
}

message HttpDebugModeRequest {
    string cmd        = 1;  // get, set
    bool   enable     = 2;  // set
    int64  logLatency = 3;  // set
}

message HttpDebugModeResponse {
    bool   success      = 1;
    string reason       = 2;
    string elapse       = 3;
    bool   enable       = 4; // get
    int64  logLatency   = 5; // get
}
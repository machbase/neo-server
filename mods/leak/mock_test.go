// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package leak_test

import (
	"github.com/machbase/neo-spi"
	"sync"
	"time"
)

// Ensure, that RowsMock does implement spi.Rows.
// If this is not the case, regenerate this file with moq.
var _ spi.Rows = &RowsMock{}

// RowsMock is a mock implementation of spi.Rows.
//
//	func TestSomethingThatUsesRows(t *testing.T) {
//
//		// make and configure a mocked spi.Rows
//		mockedRows := &RowsMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			ColumnsFunc: func() (spi.Columns, error) {
//				panic("mock out the Columns method")
//			},
//			IsFetchableFunc: func() bool {
//				panic("mock out the IsFetchable method")
//			},
//			MessageFunc: func() string {
//				panic("mock out the Message method")
//			},
//			NextFunc: func() bool {
//				panic("mock out the Next method")
//			},
//			RowsAffectedFunc: func() int64 {
//				panic("mock out the RowsAffected method")
//			},
//			ScanFunc: func(cols ...any) error {
//				panic("mock out the Scan method")
//			},
//		}
//
//		// use mockedRows in code that requires spi.Rows
//		// and then make assertions.
//
//	}
type RowsMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ColumnsFunc mocks the Columns method.
	ColumnsFunc func() (spi.Columns, error)

	// IsFetchableFunc mocks the IsFetchable method.
	IsFetchableFunc func() bool

	// MessageFunc mocks the Message method.
	MessageFunc func() string

	// NextFunc mocks the Next method.
	NextFunc func() bool

	// RowsAffectedFunc mocks the RowsAffected method.
	RowsAffectedFunc func() int64

	// ScanFunc mocks the Scan method.
	ScanFunc func(cols ...any) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Columns holds details about calls to the Columns method.
		Columns []struct {
		}
		// IsFetchable holds details about calls to the IsFetchable method.
		IsFetchable []struct {
		}
		// Message holds details about calls to the Message method.
		Message []struct {
		}
		// Next holds details about calls to the Next method.
		Next []struct {
		}
		// RowsAffected holds details about calls to the RowsAffected method.
		RowsAffected []struct {
		}
		// Scan holds details about calls to the Scan method.
		Scan []struct {
			// Cols is the cols argument value.
			Cols []any
		}
	}
	lockClose        sync.RWMutex
	lockColumns      sync.RWMutex
	lockIsFetchable  sync.RWMutex
	lockMessage      sync.RWMutex
	lockNext         sync.RWMutex
	lockRowsAffected sync.RWMutex
	lockScan         sync.RWMutex
}

// Close calls CloseFunc.
func (mock *RowsMock) Close() error {
	if mock.CloseFunc == nil {
		panic("RowsMock.CloseFunc: method is nil but Rows.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedRows.CloseCalls())
func (mock *RowsMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Columns calls ColumnsFunc.
func (mock *RowsMock) Columns() (spi.Columns, error) {
	if mock.ColumnsFunc == nil {
		panic("RowsMock.ColumnsFunc: method is nil but Rows.Columns was just called")
	}
	callInfo := struct {
	}{}
	mock.lockColumns.Lock()
	mock.calls.Columns = append(mock.calls.Columns, callInfo)
	mock.lockColumns.Unlock()
	return mock.ColumnsFunc()
}

// ColumnsCalls gets all the calls that were made to Columns.
// Check the length with:
//
//	len(mockedRows.ColumnsCalls())
func (mock *RowsMock) ColumnsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockColumns.RLock()
	calls = mock.calls.Columns
	mock.lockColumns.RUnlock()
	return calls
}

// IsFetchable calls IsFetchableFunc.
func (mock *RowsMock) IsFetchable() bool {
	if mock.IsFetchableFunc == nil {
		panic("RowsMock.IsFetchableFunc: method is nil but Rows.IsFetchable was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsFetchable.Lock()
	mock.calls.IsFetchable = append(mock.calls.IsFetchable, callInfo)
	mock.lockIsFetchable.Unlock()
	return mock.IsFetchableFunc()
}

// IsFetchableCalls gets all the calls that were made to IsFetchable.
// Check the length with:
//
//	len(mockedRows.IsFetchableCalls())
func (mock *RowsMock) IsFetchableCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsFetchable.RLock()
	calls = mock.calls.IsFetchable
	mock.lockIsFetchable.RUnlock()
	return calls
}

// Message calls MessageFunc.
func (mock *RowsMock) Message() string {
	if mock.MessageFunc == nil {
		panic("RowsMock.MessageFunc: method is nil but Rows.Message was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMessage.Lock()
	mock.calls.Message = append(mock.calls.Message, callInfo)
	mock.lockMessage.Unlock()
	return mock.MessageFunc()
}

// MessageCalls gets all the calls that were made to Message.
// Check the length with:
//
//	len(mockedRows.MessageCalls())
func (mock *RowsMock) MessageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMessage.RLock()
	calls = mock.calls.Message
	mock.lockMessage.RUnlock()
	return calls
}

// Next calls NextFunc.
func (mock *RowsMock) Next() bool {
	if mock.NextFunc == nil {
		panic("RowsMock.NextFunc: method is nil but Rows.Next was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc()
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//
//	len(mockedRows.NextCalls())
func (mock *RowsMock) NextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}

// RowsAffected calls RowsAffectedFunc.
func (mock *RowsMock) RowsAffected() int64 {
	if mock.RowsAffectedFunc == nil {
		panic("RowsMock.RowsAffectedFunc: method is nil but Rows.RowsAffected was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRowsAffected.Lock()
	mock.calls.RowsAffected = append(mock.calls.RowsAffected, callInfo)
	mock.lockRowsAffected.Unlock()
	return mock.RowsAffectedFunc()
}

// RowsAffectedCalls gets all the calls that were made to RowsAffected.
// Check the length with:
//
//	len(mockedRows.RowsAffectedCalls())
func (mock *RowsMock) RowsAffectedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRowsAffected.RLock()
	calls = mock.calls.RowsAffected
	mock.lockRowsAffected.RUnlock()
	return calls
}

// Scan calls ScanFunc.
func (mock *RowsMock) Scan(cols ...any) error {
	if mock.ScanFunc == nil {
		panic("RowsMock.ScanFunc: method is nil but Rows.Scan was just called")
	}
	callInfo := struct {
		Cols []any
	}{
		Cols: cols,
	}
	mock.lockScan.Lock()
	mock.calls.Scan = append(mock.calls.Scan, callInfo)
	mock.lockScan.Unlock()
	return mock.ScanFunc(cols...)
}

// ScanCalls gets all the calls that were made to Scan.
// Check the length with:
//
//	len(mockedRows.ScanCalls())
func (mock *RowsMock) ScanCalls() []struct {
	Cols []any
} {
	var calls []struct {
		Cols []any
	}
	mock.lockScan.RLock()
	calls = mock.calls.Scan
	mock.lockScan.RUnlock()
	return calls
}

// Ensure, that AppenderMock does implement spi.Appender.
// If this is not the case, regenerate this file with moq.
var _ spi.Appender = &AppenderMock{}

// AppenderMock is a mock implementation of spi.Appender.
//
//	func TestSomethingThatUsesAppender(t *testing.T) {
//
//		// make and configure a mocked spi.Appender
//		mockedAppender := &AppenderMock{
//			AppendFunc: func(values ...any) error {
//				panic("mock out the Append method")
//			},
//			AppendWithTimestampFunc: func(ts time.Time, values ...any) error {
//				panic("mock out the AppendWithTimestamp method")
//			},
//			CloseFunc: func() (int64, int64, error) {
//				panic("mock out the Close method")
//			},
//			ColumnsFunc: func() (spi.Columns, error) {
//				panic("mock out the Columns method")
//			},
//			TableNameFunc: func() string {
//				panic("mock out the TableName method")
//			},
//			TableTypeFunc: func() spi.TableType {
//				panic("mock out the TableType method")
//			},
//		}
//
//		// use mockedAppender in code that requires spi.Appender
//		// and then make assertions.
//
//	}
type AppenderMock struct {
	// AppendFunc mocks the Append method.
	AppendFunc func(values ...any) error

	// AppendWithTimestampFunc mocks the AppendWithTimestamp method.
	AppendWithTimestampFunc func(ts time.Time, values ...any) error

	// CloseFunc mocks the Close method.
	CloseFunc func() (int64, int64, error)

	// ColumnsFunc mocks the Columns method.
	ColumnsFunc func() (spi.Columns, error)

	// TableNameFunc mocks the TableName method.
	TableNameFunc func() string

	// TableTypeFunc mocks the TableType method.
	TableTypeFunc func() spi.TableType

	// calls tracks calls to the methods.
	calls struct {
		// Append holds details about calls to the Append method.
		Append []struct {
			// Values is the values argument value.
			Values []any
		}
		// AppendWithTimestamp holds details about calls to the AppendWithTimestamp method.
		AppendWithTimestamp []struct {
			// Ts is the ts argument value.
			Ts time.Time
			// Values is the values argument value.
			Values []any
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Columns holds details about calls to the Columns method.
		Columns []struct {
		}
		// TableName holds details about calls to the TableName method.
		TableName []struct {
		}
		// TableType holds details about calls to the TableType method.
		TableType []struct {
		}
	}
	lockAppend              sync.RWMutex
	lockAppendWithTimestamp sync.RWMutex
	lockClose               sync.RWMutex
	lockColumns             sync.RWMutex
	lockTableName           sync.RWMutex
	lockTableType           sync.RWMutex
}

// Append calls AppendFunc.
func (mock *AppenderMock) Append(values ...any) error {
	if mock.AppendFunc == nil {
		panic("AppenderMock.AppendFunc: method is nil but Appender.Append was just called")
	}
	callInfo := struct {
		Values []any
	}{
		Values: values,
	}
	mock.lockAppend.Lock()
	mock.calls.Append = append(mock.calls.Append, callInfo)
	mock.lockAppend.Unlock()
	return mock.AppendFunc(values...)
}

// AppendCalls gets all the calls that were made to Append.
// Check the length with:
//
//	len(mockedAppender.AppendCalls())
func (mock *AppenderMock) AppendCalls() []struct {
	Values []any
} {
	var calls []struct {
		Values []any
	}
	mock.lockAppend.RLock()
	calls = mock.calls.Append
	mock.lockAppend.RUnlock()
	return calls
}

// AppendWithTimestamp calls AppendWithTimestampFunc.
func (mock *AppenderMock) AppendWithTimestamp(ts time.Time, values ...any) error {
	if mock.AppendWithTimestampFunc == nil {
		panic("AppenderMock.AppendWithTimestampFunc: method is nil but Appender.AppendWithTimestamp was just called")
	}
	callInfo := struct {
		Ts     time.Time
		Values []any
	}{
		Ts:     ts,
		Values: values,
	}
	mock.lockAppendWithTimestamp.Lock()
	mock.calls.AppendWithTimestamp = append(mock.calls.AppendWithTimestamp, callInfo)
	mock.lockAppendWithTimestamp.Unlock()
	return mock.AppendWithTimestampFunc(ts, values...)
}

// AppendWithTimestampCalls gets all the calls that were made to AppendWithTimestamp.
// Check the length with:
//
//	len(mockedAppender.AppendWithTimestampCalls())
func (mock *AppenderMock) AppendWithTimestampCalls() []struct {
	Ts     time.Time
	Values []any
} {
	var calls []struct {
		Ts     time.Time
		Values []any
	}
	mock.lockAppendWithTimestamp.RLock()
	calls = mock.calls.AppendWithTimestamp
	mock.lockAppendWithTimestamp.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *AppenderMock) Close() (int64, int64, error) {
	if mock.CloseFunc == nil {
		panic("AppenderMock.CloseFunc: method is nil but Appender.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedAppender.CloseCalls())
func (mock *AppenderMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Columns calls ColumnsFunc.
func (mock *AppenderMock) Columns() (spi.Columns, error) {
	if mock.ColumnsFunc == nil {
		panic("AppenderMock.ColumnsFunc: method is nil but Appender.Columns was just called")
	}
	callInfo := struct {
	}{}
	mock.lockColumns.Lock()
	mock.calls.Columns = append(mock.calls.Columns, callInfo)
	mock.lockColumns.Unlock()
	return mock.ColumnsFunc()
}

// ColumnsCalls gets all the calls that were made to Columns.
// Check the length with:
//
//	len(mockedAppender.ColumnsCalls())
func (mock *AppenderMock) ColumnsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockColumns.RLock()
	calls = mock.calls.Columns
	mock.lockColumns.RUnlock()
	return calls
}

// TableName calls TableNameFunc.
func (mock *AppenderMock) TableName() string {
	if mock.TableNameFunc == nil {
		panic("AppenderMock.TableNameFunc: method is nil but Appender.TableName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTableName.Lock()
	mock.calls.TableName = append(mock.calls.TableName, callInfo)
	mock.lockTableName.Unlock()
	return mock.TableNameFunc()
}

// TableNameCalls gets all the calls that were made to TableName.
// Check the length with:
//
//	len(mockedAppender.TableNameCalls())
func (mock *AppenderMock) TableNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTableName.RLock()
	calls = mock.calls.TableName
	mock.lockTableName.RUnlock()
	return calls
}

// TableType calls TableTypeFunc.
func (mock *AppenderMock) TableType() spi.TableType {
	if mock.TableTypeFunc == nil {
		panic("AppenderMock.TableTypeFunc: method is nil but Appender.TableType was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTableType.Lock()
	mock.calls.TableType = append(mock.calls.TableType, callInfo)
	mock.lockTableType.Unlock()
	return mock.TableTypeFunc()
}

// TableTypeCalls gets all the calls that were made to TableType.
// Check the length with:
//
//	len(mockedAppender.TableTypeCalls())
func (mock *AppenderMock) TableTypeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTableType.RLock()
	calls = mock.calls.TableType
	mock.lockTableType.RUnlock()
	return calls
}

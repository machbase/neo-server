// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/machbase/neo-spi"
	"sync"
)

// Ensure, that DatabaseClientMock does implement spi.DatabaseClient.
// If this is not the case, regenerate this file with moq.
var _ spi.DatabaseClient = &DatabaseClientMock{}

// DatabaseClientMock is a mock implementation of spi.DatabaseClient.
//
//	func TestSomethingThatUsesDatabaseClient(t *testing.T) {
//
//		// make and configure a mocked spi.DatabaseClient
//		mockedDatabaseClient := &DatabaseClientMock{
//			AppenderFunc: func(tableName string, opts ...spi.AppendOption) (spi.Appender, error) {
//				panic("mock out the Appender method")
//			},
//			ConnectFunc: func(serverAddr string, opts ...any) error {
//				panic("mock out the Connect method")
//			},
//			DisconnectFunc: func()  {
//				panic("mock out the Disconnect method")
//			},
//			ExecFunc: func(sqlText string, params ...any) spi.Result {
//				panic("mock out the Exec method")
//			},
//			ExecContextFunc: func(ctx context.Context, sqlText string, params ...any) spi.Result {
//				panic("mock out the ExecContext method")
//			},
//			ExplainFunc: func(sqlText string) (string, error) {
//				panic("mock out the Explain method")
//			},
//			GetServerInfoFunc: func() (*spi.ServerInfo, error) {
//				panic("mock out the GetServerInfo method")
//			},
//			QueryFunc: func(sqlText string, params ...any) (spi.Rows, error) {
//				panic("mock out the Query method")
//			},
//			QueryContextFunc: func(ctx context.Context, sqlText string, params ...any) (spi.Rows, error) {
//				panic("mock out the QueryContext method")
//			},
//			QueryRowFunc: func(sqlText string, params ...any) spi.Row {
//				panic("mock out the QueryRow method")
//			},
//			QueryRowContextFunc: func(ctx context.Context, sqlText string, params ...any) spi.Row {
//				panic("mock out the QueryRowContext method")
//			},
//		}
//
//		// use mockedDatabaseClient in code that requires spi.DatabaseClient
//		// and then make assertions.
//
//	}
type DatabaseClientMock struct {
	// AppenderFunc mocks the Appender method.
	AppenderFunc func(tableName string, opts ...spi.AppendOption) (spi.Appender, error)

	// ConnectFunc mocks the Connect method.
	ConnectFunc func(serverAddr string, opts ...any) error

	// DisconnectFunc mocks the Disconnect method.
	DisconnectFunc func()

	// ExecFunc mocks the Exec method.
	ExecFunc func(sqlText string, params ...any) spi.Result

	// ExecContextFunc mocks the ExecContext method.
	ExecContextFunc func(ctx context.Context, sqlText string, params ...any) spi.Result

	// ExplainFunc mocks the Explain method.
	ExplainFunc func(sqlText string) (string, error)

	// GetServerInfoFunc mocks the GetServerInfo method.
	GetServerInfoFunc func() (*spi.ServerInfo, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(sqlText string, params ...any) (spi.Rows, error)

	// QueryContextFunc mocks the QueryContext method.
	QueryContextFunc func(ctx context.Context, sqlText string, params ...any) (spi.Rows, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(sqlText string, params ...any) spi.Row

	// QueryRowContextFunc mocks the QueryRowContext method.
	QueryRowContextFunc func(ctx context.Context, sqlText string, params ...any) spi.Row

	// calls tracks calls to the methods.
	calls struct {
		// Appender holds details about calls to the Appender method.
		Appender []struct {
			// TableName is the tableName argument value.
			TableName string
			// Opts is the opts argument value.
			Opts []spi.AppendOption
		}
		// Connect holds details about calls to the Connect method.
		Connect []struct {
			// ServerAddr is the serverAddr argument value.
			ServerAddr string
			// Opts is the opts argument value.
			Opts []any
		}
		// Disconnect holds details about calls to the Disconnect method.
		Disconnect []struct {
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// ExecContext holds details about calls to the ExecContext method.
		ExecContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// Explain holds details about calls to the Explain method.
		Explain []struct {
			// SqlText is the sqlText argument value.
			SqlText string
		}
		// GetServerInfo holds details about calls to the GetServerInfo method.
		GetServerInfo []struct {
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// QueryContext holds details about calls to the QueryContext method.
		QueryContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// QueryRowContext holds details about calls to the QueryRowContext method.
		QueryRowContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
	}
	lockAppender        sync.RWMutex
	lockConnect         sync.RWMutex
	lockDisconnect      sync.RWMutex
	lockExec            sync.RWMutex
	lockExecContext     sync.RWMutex
	lockExplain         sync.RWMutex
	lockGetServerInfo   sync.RWMutex
	lockQuery           sync.RWMutex
	lockQueryContext    sync.RWMutex
	lockQueryRow        sync.RWMutex
	lockQueryRowContext sync.RWMutex
}

// Appender calls AppenderFunc.
func (mock *DatabaseClientMock) Appender(tableName string, opts ...spi.AppendOption) (spi.Appender, error) {
	if mock.AppenderFunc == nil {
		panic("DatabaseClientMock.AppenderFunc: method is nil but DatabaseClient.Appender was just called")
	}
	callInfo := struct {
		TableName string
		Opts      []spi.AppendOption
	}{
		TableName: tableName,
		Opts:      opts,
	}
	mock.lockAppender.Lock()
	mock.calls.Appender = append(mock.calls.Appender, callInfo)
	mock.lockAppender.Unlock()
	return mock.AppenderFunc(tableName, opts...)
}

// AppenderCalls gets all the calls that were made to Appender.
// Check the length with:
//
//	len(mockedDatabaseClient.AppenderCalls())
func (mock *DatabaseClientMock) AppenderCalls() []struct {
	TableName string
	Opts      []spi.AppendOption
} {
	var calls []struct {
		TableName string
		Opts      []spi.AppendOption
	}
	mock.lockAppender.RLock()
	calls = mock.calls.Appender
	mock.lockAppender.RUnlock()
	return calls
}

// Connect calls ConnectFunc.
func (mock *DatabaseClientMock) Connect(serverAddr string, opts ...any) error {
	if mock.ConnectFunc == nil {
		panic("DatabaseClientMock.ConnectFunc: method is nil but DatabaseClient.Connect was just called")
	}
	callInfo := struct {
		ServerAddr string
		Opts       []any
	}{
		ServerAddr: serverAddr,
		Opts:       opts,
	}
	mock.lockConnect.Lock()
	mock.calls.Connect = append(mock.calls.Connect, callInfo)
	mock.lockConnect.Unlock()
	return mock.ConnectFunc(serverAddr, opts...)
}

// ConnectCalls gets all the calls that were made to Connect.
// Check the length with:
//
//	len(mockedDatabaseClient.ConnectCalls())
func (mock *DatabaseClientMock) ConnectCalls() []struct {
	ServerAddr string
	Opts       []any
} {
	var calls []struct {
		ServerAddr string
		Opts       []any
	}
	mock.lockConnect.RLock()
	calls = mock.calls.Connect
	mock.lockConnect.RUnlock()
	return calls
}

// Disconnect calls DisconnectFunc.
func (mock *DatabaseClientMock) Disconnect() {
	if mock.DisconnectFunc == nil {
		panic("DatabaseClientMock.DisconnectFunc: method is nil but DatabaseClient.Disconnect was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDisconnect.Lock()
	mock.calls.Disconnect = append(mock.calls.Disconnect, callInfo)
	mock.lockDisconnect.Unlock()
	mock.DisconnectFunc()
}

// DisconnectCalls gets all the calls that were made to Disconnect.
// Check the length with:
//
//	len(mockedDatabaseClient.DisconnectCalls())
func (mock *DatabaseClientMock) DisconnectCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDisconnect.RLock()
	calls = mock.calls.Disconnect
	mock.lockDisconnect.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *DatabaseClientMock) Exec(sqlText string, params ...any) spi.Result {
	if mock.ExecFunc == nil {
		panic("DatabaseClientMock.ExecFunc: method is nil but DatabaseClient.Exec was just called")
	}
	callInfo := struct {
		SqlText string
		Params  []any
	}{
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(sqlText, params...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedDatabaseClient.ExecCalls())
func (mock *DatabaseClientMock) ExecCalls() []struct {
	SqlText string
	Params  []any
} {
	var calls []struct {
		SqlText string
		Params  []any
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// ExecContext calls ExecContextFunc.
func (mock *DatabaseClientMock) ExecContext(ctx context.Context, sqlText string, params ...any) spi.Result {
	if mock.ExecContextFunc == nil {
		panic("DatabaseClientMock.ExecContextFunc: method is nil but DatabaseClient.ExecContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}{
		Ctx:     ctx,
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockExecContext.Lock()
	mock.calls.ExecContext = append(mock.calls.ExecContext, callInfo)
	mock.lockExecContext.Unlock()
	return mock.ExecContextFunc(ctx, sqlText, params...)
}

// ExecContextCalls gets all the calls that were made to ExecContext.
// Check the length with:
//
//	len(mockedDatabaseClient.ExecContextCalls())
func (mock *DatabaseClientMock) ExecContextCalls() []struct {
	Ctx     context.Context
	SqlText string
	Params  []any
} {
	var calls []struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}
	mock.lockExecContext.RLock()
	calls = mock.calls.ExecContext
	mock.lockExecContext.RUnlock()
	return calls
}

// Explain calls ExplainFunc.
func (mock *DatabaseClientMock) Explain(sqlText string) (string, error) {
	if mock.ExplainFunc == nil {
		panic("DatabaseClientMock.ExplainFunc: method is nil but DatabaseClient.Explain was just called")
	}
	callInfo := struct {
		SqlText string
	}{
		SqlText: sqlText,
	}
	mock.lockExplain.Lock()
	mock.calls.Explain = append(mock.calls.Explain, callInfo)
	mock.lockExplain.Unlock()
	return mock.ExplainFunc(sqlText)
}

// ExplainCalls gets all the calls that were made to Explain.
// Check the length with:
//
//	len(mockedDatabaseClient.ExplainCalls())
func (mock *DatabaseClientMock) ExplainCalls() []struct {
	SqlText string
} {
	var calls []struct {
		SqlText string
	}
	mock.lockExplain.RLock()
	calls = mock.calls.Explain
	mock.lockExplain.RUnlock()
	return calls
}

// GetServerInfo calls GetServerInfoFunc.
func (mock *DatabaseClientMock) GetServerInfo() (*spi.ServerInfo, error) {
	if mock.GetServerInfoFunc == nil {
		panic("DatabaseClientMock.GetServerInfoFunc: method is nil but DatabaseClient.GetServerInfo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetServerInfo.Lock()
	mock.calls.GetServerInfo = append(mock.calls.GetServerInfo, callInfo)
	mock.lockGetServerInfo.Unlock()
	return mock.GetServerInfoFunc()
}

// GetServerInfoCalls gets all the calls that were made to GetServerInfo.
// Check the length with:
//
//	len(mockedDatabaseClient.GetServerInfoCalls())
func (mock *DatabaseClientMock) GetServerInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetServerInfo.RLock()
	calls = mock.calls.GetServerInfo
	mock.lockGetServerInfo.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DatabaseClientMock) Query(sqlText string, params ...any) (spi.Rows, error) {
	if mock.QueryFunc == nil {
		panic("DatabaseClientMock.QueryFunc: method is nil but DatabaseClient.Query was just called")
	}
	callInfo := struct {
		SqlText string
		Params  []any
	}{
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(sqlText, params...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedDatabaseClient.QueryCalls())
func (mock *DatabaseClientMock) QueryCalls() []struct {
	SqlText string
	Params  []any
} {
	var calls []struct {
		SqlText string
		Params  []any
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// QueryContext calls QueryContextFunc.
func (mock *DatabaseClientMock) QueryContext(ctx context.Context, sqlText string, params ...any) (spi.Rows, error) {
	if mock.QueryContextFunc == nil {
		panic("DatabaseClientMock.QueryContextFunc: method is nil but DatabaseClient.QueryContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}{
		Ctx:     ctx,
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockQueryContext.Lock()
	mock.calls.QueryContext = append(mock.calls.QueryContext, callInfo)
	mock.lockQueryContext.Unlock()
	return mock.QueryContextFunc(ctx, sqlText, params...)
}

// QueryContextCalls gets all the calls that were made to QueryContext.
// Check the length with:
//
//	len(mockedDatabaseClient.QueryContextCalls())
func (mock *DatabaseClientMock) QueryContextCalls() []struct {
	Ctx     context.Context
	SqlText string
	Params  []any
} {
	var calls []struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}
	mock.lockQueryContext.RLock()
	calls = mock.calls.QueryContext
	mock.lockQueryContext.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *DatabaseClientMock) QueryRow(sqlText string, params ...any) spi.Row {
	if mock.QueryRowFunc == nil {
		panic("DatabaseClientMock.QueryRowFunc: method is nil but DatabaseClient.QueryRow was just called")
	}
	callInfo := struct {
		SqlText string
		Params  []any
	}{
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	mock.lockQueryRow.Unlock()
	return mock.QueryRowFunc(sqlText, params...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//
//	len(mockedDatabaseClient.QueryRowCalls())
func (mock *DatabaseClientMock) QueryRowCalls() []struct {
	SqlText string
	Params  []any
} {
	var calls []struct {
		SqlText string
		Params  []any
	}
	mock.lockQueryRow.RLock()
	calls = mock.calls.QueryRow
	mock.lockQueryRow.RUnlock()
	return calls
}

// QueryRowContext calls QueryRowContextFunc.
func (mock *DatabaseClientMock) QueryRowContext(ctx context.Context, sqlText string, params ...any) spi.Row {
	if mock.QueryRowContextFunc == nil {
		panic("DatabaseClientMock.QueryRowContextFunc: method is nil but DatabaseClient.QueryRowContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}{
		Ctx:     ctx,
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockQueryRowContext.Lock()
	mock.calls.QueryRowContext = append(mock.calls.QueryRowContext, callInfo)
	mock.lockQueryRowContext.Unlock()
	return mock.QueryRowContextFunc(ctx, sqlText, params...)
}

// QueryRowContextCalls gets all the calls that were made to QueryRowContext.
// Check the length with:
//
//	len(mockedDatabaseClient.QueryRowContextCalls())
func (mock *DatabaseClientMock) QueryRowContextCalls() []struct {
	Ctx     context.Context
	SqlText string
	Params  []any
} {
	var calls []struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}
	mock.lockQueryRowContext.RLock()
	calls = mock.calls.QueryRowContext
	mock.lockQueryRowContext.RUnlock()
	return calls
}

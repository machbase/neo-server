// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/machbase/neo-spi"
	"sync"
)

// Ensure, that DatabaseAuthMock does implement spi.DatabaseAuth.
// If this is not the case, regenerate this file with moq.
var _ spi.DatabaseAuth = &DatabaseAuthMock{}

// DatabaseAuthMock is a mock implementation of spi.DatabaseAuth.
//
//	func TestSomethingThatUsesDatabaseAuth(t *testing.T) {
//
//		// make and configure a mocked spi.DatabaseAuth
//		mockedDatabaseAuth := &DatabaseAuthMock{
//			UserAuthFunc: func(user string, password string) (bool, error) {
//				panic("mock out the UserAuth method")
//			},
//		}
//
//		// use mockedDatabaseAuth in code that requires spi.DatabaseAuth
//		// and then make assertions.
//
//	}
type DatabaseAuthMock struct {
	// UserAuthFunc mocks the UserAuth method.
	UserAuthFunc func(user string, password string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// UserAuth holds details about calls to the UserAuth method.
		UserAuth []struct {
			// User is the user argument value.
			User string
			// Password is the password argument value.
			Password string
		}
	}
	lockUserAuth sync.RWMutex
}

// UserAuth calls UserAuthFunc.
func (mock *DatabaseAuthMock) UserAuth(user string, password string) (bool, error) {
	if mock.UserAuthFunc == nil {
		panic("DatabaseAuthMock.UserAuthFunc: method is nil but DatabaseAuth.UserAuth was just called")
	}
	callInfo := struct {
		User     string
		Password string
	}{
		User:     user,
		Password: password,
	}
	mock.lockUserAuth.Lock()
	mock.calls.UserAuth = append(mock.calls.UserAuth, callInfo)
	mock.lockUserAuth.Unlock()
	return mock.UserAuthFunc(user, password)
}

// UserAuthCalls gets all the calls that were made to UserAuth.
// Check the length with:
//
//	len(mockedDatabaseAuth.UserAuthCalls())
func (mock *DatabaseAuthMock) UserAuthCalls() []struct {
	User     string
	Password string
} {
	var calls []struct {
		User     string
		Password string
	}
	mock.lockUserAuth.RLock()
	calls = mock.calls.UserAuth
	mock.lockUserAuth.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/machbase/neo-spi"
	"sync"
)

// Ensure, that RowMock does implement spi.Row.
// If this is not the case, regenerate this file with moq.
var _ spi.Row = &RowMock{}

// RowMock is a mock implementation of spi.Row.
//
//	func TestSomethingThatUsesRow(t *testing.T) {
//
//		// make and configure a mocked spi.Row
//		mockedRow := &RowMock{
//			ErrFunc: func() error {
//				panic("mock out the Err method")
//			},
//			MessageFunc: func() string {
//				panic("mock out the Message method")
//			},
//			RowsAffectedFunc: func() int64 {
//				panic("mock out the RowsAffected method")
//			},
//			ScanFunc: func(cols ...any) error {
//				panic("mock out the Scan method")
//			},
//			SuccessFunc: func() bool {
//				panic("mock out the Success method")
//			},
//			ValuesFunc: func() []any {
//				panic("mock out the Values method")
//			},
//		}
//
//		// use mockedRow in code that requires spi.Row
//		// and then make assertions.
//
//	}
type RowMock struct {
	// ErrFunc mocks the Err method.
	ErrFunc func() error

	// MessageFunc mocks the Message method.
	MessageFunc func() string

	// RowsAffectedFunc mocks the RowsAffected method.
	RowsAffectedFunc func() int64

	// ScanFunc mocks the Scan method.
	ScanFunc func(cols ...any) error

	// SuccessFunc mocks the Success method.
	SuccessFunc func() bool

	// ValuesFunc mocks the Values method.
	ValuesFunc func() []any

	// calls tracks calls to the methods.
	calls struct {
		// Err holds details about calls to the Err method.
		Err []struct {
		}
		// Message holds details about calls to the Message method.
		Message []struct {
		}
		// RowsAffected holds details about calls to the RowsAffected method.
		RowsAffected []struct {
		}
		// Scan holds details about calls to the Scan method.
		Scan []struct {
			// Cols is the cols argument value.
			Cols []any
		}
		// Success holds details about calls to the Success method.
		Success []struct {
		}
		// Values holds details about calls to the Values method.
		Values []struct {
		}
	}
	lockErr          sync.RWMutex
	lockMessage      sync.RWMutex
	lockRowsAffected sync.RWMutex
	lockScan         sync.RWMutex
	lockSuccess      sync.RWMutex
	lockValues       sync.RWMutex
}

// Err calls ErrFunc.
func (mock *RowMock) Err() error {
	if mock.ErrFunc == nil {
		panic("RowMock.ErrFunc: method is nil but Row.Err was just called")
	}
	callInfo := struct {
	}{}
	mock.lockErr.Lock()
	mock.calls.Err = append(mock.calls.Err, callInfo)
	mock.lockErr.Unlock()
	return mock.ErrFunc()
}

// ErrCalls gets all the calls that were made to Err.
// Check the length with:
//
//	len(mockedRow.ErrCalls())
func (mock *RowMock) ErrCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockErr.RLock()
	calls = mock.calls.Err
	mock.lockErr.RUnlock()
	return calls
}

// Message calls MessageFunc.
func (mock *RowMock) Message() string {
	if mock.MessageFunc == nil {
		panic("RowMock.MessageFunc: method is nil but Row.Message was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMessage.Lock()
	mock.calls.Message = append(mock.calls.Message, callInfo)
	mock.lockMessage.Unlock()
	return mock.MessageFunc()
}

// MessageCalls gets all the calls that were made to Message.
// Check the length with:
//
//	len(mockedRow.MessageCalls())
func (mock *RowMock) MessageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMessage.RLock()
	calls = mock.calls.Message
	mock.lockMessage.RUnlock()
	return calls
}

// RowsAffected calls RowsAffectedFunc.
func (mock *RowMock) RowsAffected() int64 {
	if mock.RowsAffectedFunc == nil {
		panic("RowMock.RowsAffectedFunc: method is nil but Row.RowsAffected was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRowsAffected.Lock()
	mock.calls.RowsAffected = append(mock.calls.RowsAffected, callInfo)
	mock.lockRowsAffected.Unlock()
	return mock.RowsAffectedFunc()
}

// RowsAffectedCalls gets all the calls that were made to RowsAffected.
// Check the length with:
//
//	len(mockedRow.RowsAffectedCalls())
func (mock *RowMock) RowsAffectedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRowsAffected.RLock()
	calls = mock.calls.RowsAffected
	mock.lockRowsAffected.RUnlock()
	return calls
}

// Scan calls ScanFunc.
func (mock *RowMock) Scan(cols ...any) error {
	if mock.ScanFunc == nil {
		panic("RowMock.ScanFunc: method is nil but Row.Scan was just called")
	}
	callInfo := struct {
		Cols []any
	}{
		Cols: cols,
	}
	mock.lockScan.Lock()
	mock.calls.Scan = append(mock.calls.Scan, callInfo)
	mock.lockScan.Unlock()
	return mock.ScanFunc(cols...)
}

// ScanCalls gets all the calls that were made to Scan.
// Check the length with:
//
//	len(mockedRow.ScanCalls())
func (mock *RowMock) ScanCalls() []struct {
	Cols []any
} {
	var calls []struct {
		Cols []any
	}
	mock.lockScan.RLock()
	calls = mock.calls.Scan
	mock.lockScan.RUnlock()
	return calls
}

// Success calls SuccessFunc.
func (mock *RowMock) Success() bool {
	if mock.SuccessFunc == nil {
		panic("RowMock.SuccessFunc: method is nil but Row.Success was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSuccess.Lock()
	mock.calls.Success = append(mock.calls.Success, callInfo)
	mock.lockSuccess.Unlock()
	return mock.SuccessFunc()
}

// SuccessCalls gets all the calls that were made to Success.
// Check the length with:
//
//	len(mockedRow.SuccessCalls())
func (mock *RowMock) SuccessCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSuccess.RLock()
	calls = mock.calls.Success
	mock.lockSuccess.RUnlock()
	return calls
}

// Values calls ValuesFunc.
func (mock *RowMock) Values() []any {
	if mock.ValuesFunc == nil {
		panic("RowMock.ValuesFunc: method is nil but Row.Values was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValues.Lock()
	mock.calls.Values = append(mock.calls.Values, callInfo)
	mock.lockValues.Unlock()
	return mock.ValuesFunc()
}

// ValuesCalls gets all the calls that were made to Values.
// Check the length with:
//
//	len(mockedRow.ValuesCalls())
func (mock *RowMock) ValuesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValues.RLock()
	calls = mock.calls.Values
	mock.lockValues.RUnlock()
	return calls
}

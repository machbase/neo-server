{"data":[{"id":"168801026145860","type":"mrk","contents":"# Flowchart\n## Node shapes\n\n```mermaid\nflowchart LR\n  id1(\"(Text box)\") --> id2([\"[Text box]\"]) \n  id2 --> id3[[\"[[subroutine]]\"]]\n  id3 --> id4[(\"[(database)]\")]\n  id4 --> id5((\"((circle))\"))\n\n  id6>\">asymmetric]\"] --> id7{\"{rhombus}\"}\n  id7 --> id8{{\"{{hexagon}}\"}}\n  id8 --> id9[/\"[/paralleogram/]\"/]\n\n  idA[\\\"[\\parallegram alt\\]\"\\] --> idB[/\"[/Trapezoid\\]\"\\]\n  idB -->idC[\\\"[\\Trapezoid alt/]\"/]\n  idC -->idD(((\"(((double circle)))\")))\n```","result":"","status":true,"height":459,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true},{"id":"1688010717006613","type":"mrk","contents":"## Links\n\n```mermaid\nflowchart LR\n    A(\"-->\") --> B\n    B(\"---\") --- C\n    C(\"-- Text here! ---\") -- Text here! --- D\n    D(\"-- text -->\") -- text --> E\n    E(\"-.->\") -.-> F0(F)\n    F(\"-. dotted .->\") -. dotted .-> G\n    G(\"== thick ==>\") == thick ==> H\n    H(\"~~~\") ~~~ I(Invisible Link)\n    T1(\"--o\") --o T2\n    T2(\"--x\") --x T3\n    T3(\"o--o\") o--o T4\n    T4(\"<-->\") <--> T5\n    T5(\"x--x\") x--x T6\n```","status":true,"height":460,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true},{"id":"1688011112887899","type":"mrk","contents":"## Sub groups \n\n```mermaid\nflowchart LR\n  subgraph TOP\n    direction TB\n    subgraph B1\n        direction RL\n        i1 -->f1\n    end\n    subgraph B2\n        direction BT\n        i2 -->f2\n    end\n  end\n  A --> TOP --> B\n  B1 --> B2\n```","status":true,"height":457,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688011175188920","type":"mrk","contents":"# Sequence diagrams\n\n```mermaid\nsequenceDiagram\n    autonumber\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row.\n    Alice-)John: See you later!\n```\n### Loops\nIt is possible to express loops in a sequence diagram. This is done by the notation\n```\nloop Loop text\n... statements ...\nend\n```\n```mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n### Other Syntax\n### Alt\nIt is possible to express alternative paths in a sequence diagram. This is done by the notation\n\n``` \nalt Describing text   \n... statements ...   \nelse   \n... statements ...   \nend   \nor if there is sequence that is optional (if without else).    \n\nopt Describing text   \n... statements ...   \nend   \n```\n### Parallel\nIt is possible to show actions that are happening in parallel.   \n```\npar [Action 1]   \n... statements ...   \nand [Action 2]   \n... statements ...   \nand [Action N]   \n... statements ...   \nend   \n```\n### Background Highlighting\nIt is possible to highlight flows by providing colored background rects. This is done by the notation\nThe colors are defined using rgb and rgba syntax.\n```mermaid\nsequenceDiagram\n    autonumber\n    rect rgb(191, 223, 255)\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n    end\n```","status":true,"height":252,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689050801768756","type":"mrk","contents":"# Class diagrams\n```mermaid\n---\ntitle: Animal example\n---\nclassDiagram\n    note \"From Duck till Zebra\"\n    Animal <|-- Duck\n    note for Duck \"can fly\\ncan swim\\ncan dive\\ncan help in debugging\"\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }\n```\n### Syntax\nTo describe the visibility (or encapsulation) of an attribute or method/function that is a part of a class (i.e. a class member), optional notation may be placed before that members' name:\n\n`+` Public   \n`-` Private   \n`#` Protected   \n`~` Package/Internal   \n\n### Defining Relationship\nA relationship is a general term covering the specific types of logical connections found on class and object diagrams.\n\n```mermaid\nclassDiagram\ndirection TD\nclassA --|> classB : Inheritance\nclassC --* classD : Composition\nclassE --o classF : Aggregation\nclassG --> classH : Association\nclassI -- classJ : Link(Solid)\nclassK ..> classL : Dependency\nclassM ..|> classN : Realization\nclassO .. classP : Link(Dashed)\n```\n|Type|\tDescription|\n|--|------|\n|<\\|--|Inheritance|\n|*--|Composition|\n|o--|Aggregation|\n|-->|Association|\n|--|Link (Solid)|\n|..>|Dependency|\n|..\\|>|Realization|\n|..|Link (Dashed)|\n\n\n### Define Namespace\nA namespace groups classes.\n```mermaid\nclassDiagram\ndirection LR\nnamespace Namespace {\n    class Triangle\n    class Rectangle {\n      double width\n      double height\n    }\n}\n```","status":true,"height":200,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689051205243986","type":"mrk","contents":"# State diagrams\n\n```mermaid\n---\ntitle: Simple state diagrams\n---\nstateDiagram-v2\n    [*] --> Still\n    Still --> [*]\n\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n```\n### Setting the direction of the diagram\nWith state diagrams you can use the direction statement to set the direction which the diagram will render\n```mermaid\nstateDiagram\n    direction LR\n    [*] --> Still\n    Still --> [*]\n\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n```\n\n### Composite states\nIn order to define a composite state you need to use the state keyword followed by an id and the body of the composite state between {}. See the example\n\n```mermaid\nstateDiagram-v2\n    [*] --> First\n    First --> Second\n    First --> Third\n\n    state First {\n        [*] --> fir\n        fir --> [*]\n    }\n    state Second {\n        [*] --> sec\n        sec --> [*]\n    }\n    state Third {\n        [*] --> thi\n        thi --> [*]\n    }\n```\n### Choice\nSometimes you need to model a choice between two or more paths, you can do so using `<<choice>>`\n```mermaid\nstateDiagram-v2\n    state if_state <<choice>>\n    [*] --> IsPositive\n    IsPositive --> if_state\n    if_state --> False: if n < 0\n    if_state --> True : if n >= 0\n```","status":true,"height":200,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689054780738802","type":"mrk","contents":"# Theming \n### Available Themes\n1. `default` - This is the default theme for all diagrams.\n\n2. `neutral` - This theme is great for black and white documents that will be printed.\n\n3. `dark` - This theme goes well with dark-colored elements or dark-mode.\n  \n4. `forest` - This theme contains shades of green.\n\n5. `base` - This is the only theme that can be modified. Use this theme as the base for customizations.\n### Diagram-specific Themes\n```mermaid\n%%{init: {'theme': 'base'}}%%\ngraph TD\n  a --> b\n```\n### Customizing Themes with `themeVariables`\nTo make a custom theme, modify `themeVariables` via `init`.\n```mermaid\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n      'primaryColor': '#0b1de3',\n      'primaryTextColor': '#fff',\n      'primaryBorderColor': '#0b1de3',\n      'lineColor': '#F8B229',\n      'secondaryColor': '#941e53',\n      'tertiaryColor': '#fff'\n    }\n  }\n}%%\n        graph TD\n          A[Christmas] -->|Get money| B(Go shopping)\n          B --> C{Let me think}\n          B --> G[/Another/]\n          C ==>|One| D[Laptop]\n          C -->|Two| E[iPhone]\n          C -->|Three| F[fa:fa-car Car]\n          subgraph section\n            C\n            D\n            E\n            F\n            G\n          end\n```\n## more information\n[mermaid.js.org](https://mermaid.js.org/config/theming.html)","status":true,"height":200,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""}]}
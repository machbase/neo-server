{"data":[{"id":"1693192376587365","contents":"# Go HTTP client program writing data\n\n> For smooth practice, the following query should be run to prepare tables and data.","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693192436841365","contents":"CREATE TAG TABLE EXAMPLE (NAME VARCHAR(20) PRIMARY KEY, TIME DATETIME BASETIME, VALUE DOUBLE SUMMARIZED);","height":200,"minimal":false,"type":"sql","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693192436664252","contents":"If you are a Go programmer and prefer to write RESTful API client, this is the way to go.\n\n### Step 1.\n\nFind [full source code from github](https://github.com/machbase/neo-docs/tree/main/examples/go/http_wave/http_wave.go)\n\n### Step 2.\n\nCopy source code and save it as `http_wave.go` or just run script below\n\n```sh\ncurl -o http_wave.go \"https://raw.githubusercontent.com/machbase/neo-docs/main/examples/go/http_wave/http_wave.go\"\n```\n\n### Step 3.\n\n```sh\ngo run http_wave.go\n```\n\nThis Go code generates sine & cosine wave data and writes them into EXAMPLE table.\n\n## Code explains\n\nDefine data structure that represents the payload of write API.\n\n```go\ntype WriteReq struct {\n    Table string       `json:\"table\"`\n    Data  WriteReqData `json:\"data\"`\n}\n\ntype WriteReqData struct {\n    Columns []string `json:\"columns\"`\n    Rows    [][]any  `json:\"rows\"`\n}\n```\n\nThe API for writing data via HTTP is explained in [here](https://neo.machbase.com/docs/api-http/write) \nand it expects to receive JSON payload.\n\nWe can prepare payload like below code, so that write multiple records within a payload.\nAssume `sin`, `cos` variables are properly initialized `float64` values.\n\n```go\ncontent, _ := json.Marshal(&WriteReq{\n    Data: WriteReqData{\n        Columns: []string{\"name\", \"time\", \"value\"},\n        Rows: [][]any{\n            {\"wave.sin\", ts.UTC().UnixNano(), sin},\n            {\"wave.cos\", ts.UTC().UnixNano(), cos},\n        },\n    },\n})\n```\n\nIt will be encoded as JSON for writing API like below.\n\n\n```json\n{\n    \"data\": {\n        \"columns\":[\"name\", \"time\", \"value\"],\n        \"rows\": [\n            [ \"wave.sin\", 1670380342000000000, 1.1 ],\n            [ \"wave.cos\", 1670380343000000000, 2.2 ]\n        ]\n    }\n}\n```\n\nSend it to server via http POST request.\n\n```go\nclient := http.Client{}\nrsp, err := client.Post(\"http://127.0.0.1:5654/db/write/EXAMPLE\", \n    \"application/json\", bytes.NewBuffer(content))\n```\n\nServer replies `HTTP 200 OK` if it successfully writes data.\n","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
{"data":[{"id":"1693283587003921","contents":"# Bridges\n\nBridges make machbase-neo enabled to inter-work external systems.\nFor example, machbase-neo can execute DDL and DML SQL statements via bridges to other dbms system.\nAnd receive messages from an external MQTT broker.\n\n## Register a bridge to sqlite3\n\nRegister a bridge that connects to the SQLite.\n\n```\nbridge add -t sqlite sqlitedb file:/data/sqlite.db;\n```\n\nSQLite supports memory only mode like below.\n\n\n```\nbridge add -t sqlite mem file::memory:?cache=shared\n```\n\n## Test the bridge's connecitivity\n\n```\nmachbase-neo» bridge test mem;\nTest bridge mem connectivity... success 11.917µs\n```\n\n## Create table\n\nOpen machbase-neo shell and execute the command below which creates a `mem_example` table via the `mem` bridge.\n\n```sh\nbridge exec mem CREATE TABLE IF NOT EXISTS mem_example(\n    id         INTEGER NOT NULL PRIMARY KEY,\n    company    TEXT,\n    employee   INTEGER,\n    discount   REAL,\n    code       TEXT,\n    valid      BOOLEAN,\n    memo       BLOB,\n    created_on DATETIME NOT NULL\n);\n```\n\n## *TQL* writing on the SQLite","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693283621886376","contents":"BYTES(payload() ?? `{\n  \"company\": \"acme\",\n  \"employee\": 10\n}`)\nSCRIPT({\n  // get current time\n  times := import(\"times\")\n  ts := times.now()\n  // parse json from the payload\n  ctx := import(\"context\")\n  val := ctx.value()\n  // parse json\n  json := import(\"json\")\n  msg := json.decode(val[0])\n  ctx.yieldKey(msg.company, msg.employee, ts)\n})\nINSERT(bridge(\"mem\"), table(\"mem_example\"), \"company\", \"employee\", \"created_on\")","height":354,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693283587041985","contents":"```\nmachbase-neo» bridge query mem select * from mem_example;\n╭────┬─────────┬──────────┬──────────┬───────┬───────┬──────┬──────────────────────────────────────╮\n│ ID │ COMPANY │ EMPLOYEE │ DISCOUNT │ CODE  │ VALID │ MEMO │ CREATED_ON                           │\n├────┼─────────┼──────────┼──────────┼───────┼───────┼──────┼──────────────────────────────────────┤\n│  1 │ acme    │       10 │ <nil>    │ <nil> │ <nil> │ []   │ 2023-08-10 14:33:08.667491 +0900 KST │\n╰────┴─────────┴──────────┴──────────┴───────┴───────┴──────┴──────────────────────────────────────╯\n```\n\n## *TQL* reading from the SQLite\n\nSave the code below as `sqlite.tql`.","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"169328369315617","contents":"SQL(bridge('mem'), \"select * from mem_example\")\nCSV()","height":62,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"169328369798184","contents":"And call `curl -o - http://127.0.0.126:5654/db/tql/sqlite.tql`\n\n```sh\ncurl -o - http://127.0.0.1:5654/db/tql/sqlite.tql\n1,acme,10,,,,,1691647672291731000\n```","height":154,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
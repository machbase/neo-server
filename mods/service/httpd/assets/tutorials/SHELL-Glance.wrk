{"data":[{"id":"1693275716358360","contents":"# machbase-neo shell\n\n## Help\nLists and explains the commands of the machbase-neo shell.\n\n```sh\nmachbase-neo shell --help\n\nmachbase-neo shell [flags] <sub-command> [args...]\n\nshell flags:\n  -s, --server=<addr>     server address (default unix:///home/liunx/work/neo/neo-server/tmp/mach-grpc.sock)\n\nshell sub-commands:\n  bridge command [options]\n        commands:\n          list                            shows registered bridges\n          add [options] <name>  <conn>    add bridge\n...\n  show [options] <object>\n        objects:\n          info                   show server info\n          license                show license info\n          ports                  show service ports\n          users                  list users\n          tables [-a]            list tables\n          table [-a] <table>     describe the table\n...\n```\n\n## No Arguments\nIt will start interactive mode shell if there are no other arguments.\n\nA machbase-neo operation command and a machbase query may be executed through the interactive shell mode.\n\n### Flags\n{:.no_toc}\n\n| flag (long)     | flag (short) | desc                                                      |\n|:----------------|:-------------|:----------------------------------------------------------|\n| `--server`      | `-s`         | machbase-neo's gRPC address. <br/> default: `--server tcp://127.0.0.1:5655` <br/> e.g. `-s unix://./mach-grpc.sock` |\n\n\nconnect internal server\n\n```sh\nmachbase-neo shell\nmachbase-neo» \n```\n\nconnect external server\n\n```sh\nmachbase-neo shell --server tcp://*.*.*.*:5655\nmachbase-neo» \n```\n\n- Run Query\n  \n```sh\nmachbase-neo» select binary_signature from v$version;\n┌────────┬─────────────────────────────────────────────┐\n│ ROWNUM │ BINARY_SIGNATURE                            │\n├────────┼─────────────────────────────────────────────┤\n│      1 │ 8.0.2.develop-LINUX-X86-64-release-standard │\n└────────┴─────────────────────────────────────────────┘\na row fetched.\n```\n\n- Create Table\n\n```sh\nmachbase-neo» create tag table if not exists example (name varchar(20) primary key, time datetime basetime, value double summarized);\nexecuted.\n```\n\n- Schema Table\n\n```sh\nmachbase-neo» desc example;\n┌────────┬───────┬──────────┬────────┐\n│ ROWNUM │ NAME  │ TYPE     │ LENGTH │\n├────────┼───────┼──────────┼────────┤\n│      1 │ NAME  │ varchar  │     20 │\n│      2 │ TIME  │ datetime │      8 │\n│      3 │ VALUE │ double   │      8 │\n└────────┴───────┴──────────┴────────┘\n```\n\n- Insert Table\n\n```sh\nmachbase-neo» insert into example values('tag0', to_date('2021-08-12'), 100);\na row inserted.\n```\n\n- Select Table\n\n```sh\nmachbase-neo» select * from example;\n┌────────┬──────┬─────────────────────┬───────┐\n│ ROWNUM │ NAME │ TIME(LOCAL)         │ VALUE │\n├────────┼──────┼─────────────────────┼───────┤\n│      1 │ tag0 │ 2021-08-12 00:00:00 │ 100   │\n└────────┴──────┴─────────────────────┴───────┘\na row fetched.\n```\n\n- Drop Table\n\n```sh\nmachbase-neo» drop table example;\nexecuted.\n```\n\n## Show\n\nDisplay information.\n\n```sh\nshow [options] <object>\n        objects:\n          info                   show server info\n          license                show license info\n          ports                  show service ports\n          users                  list users\n          tables [-a]            list tables\n          table [-a] <table>     describe the table\n          meta-tables            list meta tables\n...\n        options:\n          -a,--all               includes all hidden tables/columns\n```\n\n### info\n\n```sh\nmachbase-neo» show info;\n┌────────────────────┬─────────────────────────────┐\n│ NAME               │ VALUE                       │\n├────────────────────┼─────────────────────────────┤\n│ build.version      │ v2.0.0                      │\n│ build.hash         │ #c953293f                   │\n│ build.timestamp    │ 2023-08-29T08:08:00         │\n│ build.engine       │ static_standard_linux_amd64 │\n│ runtime.os         │ linux                       │\n│ runtime.arch       │ amd64                       │\n│ runtime.pid        │ 57814                       │\n│ runtime.uptime     │ 2h 30m 57s                  │\n│ runtime.goroutines │ 45                          │\n│ mem.sys            │ 32.6 MB                     │\n│ mem.heap.sys       │ 19.0 MB                     │\n│ mem.heap.alloc     │ 9.7 MB                      │\n│ mem.heap.in-use    │ 13.0 MB                     │\n│ mem.stack.sys      │ 1,024.0 KB                  │\n│ mem.stack.in-use   │ 1,024.0 KB                  │\n└────────────────────┴─────────────────────────────┘\n```\n\n## Desc\n\nDescribe table structure.\n\n```sh\nmachbase-neo» desc example;\n┌────────┬───────┬──────────┬────────┐\n│ ROWNUM │ NAME  │ TYPE     │ LENGTH │\n├────────┼───────┼──────────┼────────┤\n│      1 │ NAME  │ varchar  │     20 │\n│      2 │ TIME  │ datetime │      8 │\n│      3 │ VALUE │ double   │      8 │\n└────────┴───────┴──────────┴────────┘\n```\n\n## Run a .sql file\n\n`machbase-neo shell run <file>` executes multiple comands in the given file.\n\n### Make a script file\n\nMake an example script file like below.\n\n- `cat batch.sh`\n\n```sql\n#\n# comments starts with `#` or `--`\n# A statement should be ends with semi-colon `;`\n#\n\nCREATE TAG TABLE IF NOT EXISTS EXAMPLE (NAME VARCHAR(20) PRIMARY KEY, TIME DATETIME BASETIME, VALUE DOUBLE SUMMARIZED);\n\n-- Insert\nINSERT INTO EXAMPLE VALUES('tag0', TO_DATE('2021-08-12'), 100);\n\n-- Count\nSELECT * FROM EXAMPLE;\n```\n\n### Run the script file\n\n```sh\nmachbase-neo shell run batch.sh\n```\n\n- result\n\n```\nCREATE TAG TABLE IF NOT EXISTS EXAMPLE (NAME VARCHAR(20) PRIMARY KEY, TIME DATETIME BASETIME, VALUE DOUBLE SUMMARIZED)\nexecuted.\n\nINSERT INTO EXAMPLE VALUES('tag0', TO_DATE('2021-08-12'), 100)\na row inserted.\n\nSELECT * FROM EXAMPLE\n ROWNUM  NAME  TIME(LOCAL)          VALUE \n──────────────────────────────────────────\n      1  tag0  2021-08-12 00:00:00  100   \na row fetched.\n```\n","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
{"data":[{"id":"1693185382409568","contents":"# Fast Fourier Transform in TQL\n\n> For smooth practice, the following query should be run to prepare tables and data.\n","height":89,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185395295208","contents":"CREATE TAG TABLE IF NOT EXISTS EXAMPLE (NAME VARCHAR(20) PRIMARY KEY, TIME DATETIME BASETIME, VALUE DOUBLE SUMMARIZED);","height":42,"minimal":false,"type":"sql","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185406134342","contents":"## Generates sample data\n\nOpen a new *tql* editor on the web ui and copy the code below and run it.\n\nIn this example, `oscillator()` generates a composite wave of 15Hz 1.0 + 24Hz 1.5.\nAnd `CHART_SCATTER()` has `dataZoom()` option function that provides an slider under the x-Axis.","height":134,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185471314300","contents":"FAKE( \n  oscillator(\n    freq(15, 1.0), freq(24, 1.5),\n    range('now', '10s', '1ms')) \n)\nCHART_SCATTER( dataZoom('slider', 95, 100))","height":151,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185480484418","contents":"## Store data into database\n\nStore the generated data into the database with the tag name 'signal'.\n\nIt will show \"10000 rows inserted.\" message in the \"Result\" pane.\n","height":129,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185488745566","contents":"FAKE( oscillator(\n    freq(15, 1.0), freq(24, 1.5),\n    range('now', '10s', '1ms')) \n)\nINSERT( 'time', 'value', table('example'), tag('signal') )","height":117,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185544492738","contents":"It will show \"10000 rows inserted.\" message in the \"Result\" pane.\n\nFor a comment, it took about *270ms* in a test machine (Apple mac mini M1), but using `APPEND()` method in the example below, took *65ms* (x4 faster).\n\n> The 'APPEND' works only when fields of input records exactly match with columns of the table in order and types.","height":122,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"169318555927233","contents":"FAKE( oscillator(\n    freq(15, 1.0), freq(24, 1.5),\n    range('now', '10s', '1ms')) \n)\nPUSHKEY('signal')\nAPPEND( table('example') )","height":144,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185567858178","contents":"## Read data from database\n\nThe code below reads the stored data from the 'example' table.","height":77,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185579715516","contents":"QUERY('value', from('example', 'signal'), between('last-10s', 'last'))\nCHART_LINE( dataZoom('slider', 95, 100))","height":58,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185613602805","contents":"## Fast Fourier Transform\n\nAdd few data manipulation function between `QUERY()` source and `CHART_LINE()` sink.","height":84,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185622900289","contents":"QUERY('value', from('example', 'signal'), between('last-10s', 'last'))\n\nPUSHKEY('sample')\nGROUPBYKEY()\nFFT()\nFLATTEN()\nPOPKEY()\n\nCHART_LINE(\n      xAxis(0, 'Hz'),\n      yAxis(1, 'Amplitude'),\n      dataZoom('slider', 0, 10) \n)","height":302,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185620522250","contents":"### How it works\n\n1. `QUERY(...)` yields records from the query result, and *tql* treats the first field as *key* and the others are *value* tuple. `{key: time, value: (value) }`\n2. `PUSHKEY('sample')` sets the constant string 'sample' as new keys for all records and \"push\" original key into value tuple. As result all records have same *key* `'sample'` and `(time, value)` as *value*. `{key: 'sample', value:(time, value)}`\n3. `GROUPBYKEY()` merge all records that has the same key. In this example, all query results are combined into a record that has same *key* 'sample' and value is an array of tuples which formed `{key: 'sample', value:[ (time1, value1), (time2, value2), ..., (timeN, valueN) ]}`.\n4. `FFT()` applies Fast Fourier Transform on the value of the record and transform the value (time-value) into an array of tuples (frequency-amplitude). `{key: 'sample', value:[ (Hz1, Ampl1), (Hz2, Ampl2), ... ]}`.\n5. `FLATTEN()` reduces the dimension of the value array by splitting into multiple records. As result it yields `{key:'sample', value:(Hz1, Ampl1)}`, `{key:'sample', value:(Hz2, Ampl2)}`, ...\n6. `POPKEY()` drops current key of record and promote the first element of value as a new key. `{key:Hz1, value:(Ampl1)}`, `{key:Hz2, value:(Ampl2)}`...","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185667303589","contents":"## Adding time axis","height":37,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185667165740","contents":"QUERY( 'value', from('example', 'signal'), between('last-10s', 'last'))\n\nPUSHKEY( roundTime(key(), '500ms') )\nGROUPBYKEY()\nFFT(minHz(0), maxHz(100))\n\nCHART_BAR3D(\n      xAxis(0, 'time', 'time'),\n      yAxis(1, 'Hz'),\n      zAxis(2, 'Amp'),\n      size('600px', '600px'), visualMap(0, 1.5), theme('westeros')\n)","height":278,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693185692735568","contents":"### How it works\n\n1. `QUERY(...)` yields records from the query result, and *tql* treats the first field as *key* and the others are *value* tuple. `{key: time, value: (value) }`\n2. `PUSHKEY( roundTime(key(), '500ms'))` sets the new key with the result of roundTime `key()` by 500 miliseconds and \"push\" original key into value tuple. *tql* reserves capital letter `key()` and `value()` variables for *key* and *value* of a record. `{key: (time/500ms)*500ms, value:(time, value)}`\n3. `GROUPBYKEY()` makes records grouped in every 500ms. `{key: time1In500ms, value:[(time1, value1), (time2, value2)...]}`\n4. `FFT()` applies Fast Fourier Transform for each record. The optional functions `minHz(0)` and `maxHz(100)` limits the scope of the output just for the better visualization. `{key:time1In500ms, value:[(Hz1, Ampl1), ...]}`, `{key:'time2In500ms', value:[(Hz1, Ampl1), ...]}`, ...","height":164,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
{"data":[{"id":"1693183442723687","contents":"\n# Shell script for writing data\n\n> For smooth practice, the following query should be run to prepare tables and data.\n> ```sql\n> CREATE TAG TABLE EXAMPLE  (NAME VARCHAR(20) PRIMARY KEY, TIME DATETIME BASETIME, VALUE DOUBLE SUMMARIZED);\n> ```\n> \n\nThe simplest way writing data into machbase-neo is using its command line tool `machbase-neo shell`.\nWe can import/export/read table with it.\n\n## Step 1. Data generation\n\nFor demonstration, we prepares simple shell script that prints out sine/cosine values per a second.\n\nCopy script below and save it as `gen_wave.sh`\n\n```sh\n#!/bin/bash\nangle=0\nstep_angle=24\nsinval=0\ncosval=0\nPI=3.14159\n\nwhile [ 1 ]\ndo\n    ts=`date +\"%s\"`\n    sinval=$(awk \"BEGIN{ printf \\\"%.6f\\\", (sin($angle*($PI/180)))}\")\n    cosval=$(awk \"BEGIN{ printf \\\"%.6f\\\", (cos($angle*($PI/180)))}\")\n    echo \"wave.sin,$ts,$sinval\"\n    echo \"wave.cos,$ts,$cosval\"\n    sleep 1\n    angle=$((angle+step_angle))\ndone\n```\n\n## Step 2. Run script \n\nLet's run this script for testing.\n\n```sh\nsh ./gen_wave.sh\n```\n\nIt periodically prints sin/cos values with name (`wave.sin`, `wave.cos`), UNIX epoch time and value per a second as below.\nThe output is in csv and it is intended to be utilized by `machbase-neo shell` command.\n\nPress `^C` to stop shell script.\n\n<!--![wave-write-sh01](./img/wave-write-sh01.gif)-->\n\nWhy the output csv should be in this order? It's depends on the table scheme.\n\nRun command below to \"describe\" the table.\n\n```sh\nmachbase-neo shell desc EXAMPLE\n```\n\nSubcommand `desc <table>` shows some details of the table.\n\n```\nTABLE    EXAMPLE\nTYPE     Tag Table\nTAGS     wave.cos, wave.sin\n┌───┬───────┬──────────┬────────┐\n│ # │ NAME  │ TYPE     │ LENGTH │\n├───┼───────┼──────────┼────────┤\n│ 1 │ NAME  │ varchar  │    100 │\n│ 2 │ TIME  │ datetime │      8 │\n│ 3 │ VALUE │ double   │      8 │\n└───┴───────┴──────────┴────────┘\n```\n\nWhen we import the csv data into a table, it is important to make fields of csv arranged in order of columns in the table and its type.\n\n## Step 3. Combine script and command\n\nNow we can use the output of the script for input of `machbase-neo shell`.\n\n```sh\nsh gen_wave.sh | machbase-neo shell import --timeformat=s EXAMPLE\n```\n\n> timeformat\n> \n> Since machbase-neo treats all timestamp in nanoseconds,\n> but shell script generates timestamp in seconds by `time` shell command.\n> It is required explicitly announce to machbase-neo \n> that incoming timestamp of csv data\n> is in seconds time precision by `--timeformat`.\n> \n> Consult `machbase-neo shell help timeformat` for more details.\n\nA each line of CSV that are generated by shell script is processed in `machbase-neo shell import` then \"import\" into `EXAMPLE` table.\n\nThis means also we can write data manually as an exmaple below.\n\n```\necho \"wave.pi,1674860125,3.141592\" | machbase-neo shell import -t s EXAMPLE\n```\n\nor\n\n```\necho \"wave.pi,`date +%s`,3.141592\" | machbase-neo shell import -t s EXAMPLE\n```\n\nThen let's query the latest value.\n\n```sh\nmachbase-neo shell \"select * from EXAMPLE where NAME='wave.pi' order by time desc limit 1\"\n ```\n\n <!--![wave-write-sh02](./img/wave-write-sh02.gif)-->","height":275,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
{"data":[{"id":"1693283744297237","contents":"# Birdge - PostgreSQL\n\n## Register a bridge to postgresql\n\nRegister a bridge that connects to the postgreSQL database.\n\n```\nbridge add -t postgres pg host=127.0.0.1 port=5432 user=dbuser dbname=postgres sslmode=disable;\n```\n\nConnect options\n\n| Option            | Description                            | example         |\n| :-----------      | :---------------------------------     | :-------------  |\n| `dbname`          | The name of the database to connect to |                 |\n| `user`            | The user to sign in as                 |                 |\n| `password`        | The user's password                    |                 |\n| `host`            | The host to connect to. Values that start with / are for unix domain sockets. default is localhost | `host=127.0.0.1` |\n| `port`            | The port to bind to. default is `5432` |     |\n| `sslmode`         | Whether or not to use SSL (default is `require`)  | (see below) |\n| `connect_timeout` | Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely. |  |\n| `sslcert`         | Cert file location. The file must contain PEM encoded data.   |  |\n| `sslkey`          | Key file location. The file must contain PEM encoded data.    |  |\n| `sslrootcert`     | The location of the root certificate file. The file must contain PEM encoded data. |  |\n\n<!-- | `fallback_application_name` | An application_name to fall back to if one isn't provided. | -->\n\nValid values for `sslmode` are:\n\n| sslmode       |  Description                      |\n|:------------  | :---------------------------------|\n| `disable`     | No SSL                            |\n| `require`     | Always SSL (skip verification)    |\n| `verify-ca`   | Always SSL (verify that the certificate presented by the server was signed by a trusted CA) |\n| `verify-full` | Always SSL (verify that the certification presented by the server was signed by a trusted CA and the server host name matches the one in the certificate)|\n\n\n## Create table\n\nOpen machbase-neo shell and execute the command below which creates a `pg_example` table via the `pg` bridge.\n\n```sh\nbridge exec pg CREATE TABLE IF NOT EXISTS pg_example(\n    id         SERIAL PRIMARY KEY,\n    company    VARCHAR(50) UNIQUE NOT NULL,\n    employee   INT,\n    discount   REAL,\n    plan       FLOAT(8),\n    code       UUID,\n    valid      BOOL,\n    memo       TEXT,\n    created_on TIMESTAMP NOT NULL\n);\n```\n\nCan make sure the table has been created with `psql` command line tool\n\n```\npostgres=# \\d pg_example;\n                                        Table \"public.pg_example\"\n   Column   |            Type             | Collation | Nullable |                Default                 \n------------+-----------------------------+-----------+----------+----------------------------------------\n id         | integer                     |           | not null | nextval('pg_example_id_seq'::regclass)\n company    | character varying(50)       |           | not null | \n employee   | integer                     |           |          | \n discount   | real                        |           |          | \n plan       | real                        |           |          | \n code       | uuid                        |           |          | \n valid      | boolean                     |           |          | \n memo       | text                        |           |          | \n created_on | timestamp without time zone |           | not null | \nIndexes:\n    \"pg_example_pkey\" PRIMARY KEY, btree (id)\n    \"pg_example_company_key\" UNIQUE CONSTRAINT, btree (company)\n\n```\n\n## *TQL* writing on the PostgreSQL","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693283757785580","contents":"BYTES(payload() ?? `{\n  \"company\": \"acme\",\n  \"employee\": 10\n}`)\nSCRIPT({\n  // get current time\n  times := import(\"times\")\n  ts := times.now()\n  // parse json from the payload\n  ctx := import(\"context\")\n  val := ctx.value()\n  // parse json\n  json := import(\"json\")\n  msg := json.decode(val[0])\n  ctx.yieldKey(msg.company, msg.employee, ts)\n})\nINSERT(bridge(\"pg\"), table(\"pg_example\"), \"company\", \"employee\", \"created_on\")","height":346,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693283744324648","contents":"\n```\npostgres=# select * from pg_example;\n id | company | employee | discount | plan | code | valid | memo |         created_on         \n----+---------+----------+----------+------+------+-------+------+----------------------------\n  1 | acme    |       10 |          |      |      |       |      | 2023-08-09 11:05:30.039961\n(1 row)\n```\n\n## *TQL* reading from the PostgreSQL","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693283832135231","contents":"SQL(bridge('pg'), \"select * from pg_example\")\nCSV()","height":65,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
{"data":[{"id":"1688539428119497","type":"mrk","contents":"# Fast Fourier Transform in TQL\n\nThis tutorial shows how to draw a FFT plot using *TQL*.\nIt uses *FAKE()* oscillator for the source data, we can apply it with *QUERY()* funciton.\nBecause there is no difference whether it comes from the database or fake.\n\nRun this *worksheet* by click '⏩' on the top right of the page.","result":"","status":true,"height":159,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true},{"id":"1688539615399354","type":"mrk","contents":"## Generate vibration data\n\nUse `FAKE()` and `oscillator()` to generate 15Hz and 24Hz compsite wave and sampling it in every 1 milliseconds.\n\n```js\nFAKE(\n  oscillator(\n    freq(15, 1.0), freq(24, 1.5),\n    range('now', '10s', '1ms')\n))\n```\nThis *tql* code generates records that `key` is *timestamp* and `value` is *amplitude*.","status":true,"height":355,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688543051717804","type":"tql","contents":"FAKE( oscillator( freq(15, 1.0), freq(24, 1.5), range('now', '10s', '1ms') ))\nCHART_SCATTER( dataZoom('slider', 92,100), seriesLabels('data'),\n  xAxis(0, 'time', 'time'), yAxis(1, 'amplitude'), size('500px', '300px') )","status":true,"height":100,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":true,"result":"","tqlType":"html"},{"id":"1688540433509285","type":"mrk","contents":"## Transforming\n\nThe next steps are the processing the records.\n\n```js\nPUSHKEY('sample')\nGROUPBYKEY()\nFFT()\nFLATTEN()\nPOPKEY()\n```\n\n```mermaid\nflowchart TB\n  INPUT(\"FAKE(oscillator(...))\") --\"{key: time, value: (value) }\"--> PUSHKEY(\"PUSHKEY('sample'): Set new key ('sample') to all records and 'push' old key into value tuple.\") \n  PUSHKEY --\"{key: 'sample', value:(time, value)}\"-->GROUPBYKEY(\"GROUPBYKEY(): Combines whole records into one record.\")\n  GROUPBYKEY --\"{key: 'sample', value:[ (time1, value1), (time2, value2), ... ]}\" --> FFT(\"FFT(): Converts array of `time-value` tuples to array of `frequency-amplitude` tuples.\")\n  FFT --\"{key: 'sample', value:[ (Hz1, Ampl1), (Hz2, Ampl2), ... ]}\"--> FLATTEN(\"FLATTEN(): Reducing the dimension of the value array by splitting into multiple records.\")\n  FLATTEN --\"{key:'sample', value:(Hz1, Ampl1)}, {key:'sample', value:(Hz2, Ampl2)},...\"-->POPKEY(\"POPKEY(): Drops current key of record and promote the first element of value as a new key.\")\n  POPKEY --\"{key:Hz1, value:(Ampl1)}, {key:Hz2, value:(Ampl2)},...\"-->OUTPUT(\"CHART_LINE()\")\n```","status":true,"height":522,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688541173053745","type":"mrk","contents":"## Result\n\n```js\nFAKE( oscillator(freq(15, 1.0), freq(24, 1.5), range('now', '10s', '1ms')) )\nPUSHKEY('sample')\nGROUPBYKEY()\nFFT()\nFLATTEN()\nPOPKEY()\nCHART_LINE( xAxis(0, 'Hz'), yAxis(1, 'Amplitude'), dataZoom('slider', 0, 10) )\n```","status":true,"height":294,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688539986481671","type":"tql","contents":"FAKE( oscillator(freq(15, 1.0), freq(24, 1.5), range('now', '10s', '1ms')) )\nPUSHKEY('sample')\nGROUPBYKEY()\nFFT()\nFLATTEN()\nPOPKEY()\nCHART_LINE( xAxis(0, 'Hz'), yAxis(1, 'Amplitude'), dataZoom('slider', 0, 10) )\n","status":true,"height":216,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":true,"result":"","tqlType":"html"},{"id":"1688597727209717","type":"mrk","contents":"## Adding time axis\n\nMake 3D plot by adding time axis to the last 'frequency-amplitude' plot.\n\n```js\nPUSHKEY( roundTime(key(), '500ms') )\nGROUPBYKEY()\nFFT()\n```\n\n```mermaid\nflowchart TB\n  INPUT(\"FAKE(oscillator(...))\") --\"{key: time, value: (value) }\"--> PUSHKEY(\"PUSHKEY(roundTime(key(), '500ms')): Set a new key with the result of roundTime K by 500 milliseconds and 'push' old key into value tuple.\") \n  PUSHKEY --\"{key: (time/500ms)*500ms, value:(time, value)}\"-->GROUPBYKEY(\"GROUPBYKEY(): Makes records grouped in every 500ms\")\n  GROUPBYKEY --\"{key: time1In500ms, value:[(time1, value1), (time2, value2)...]}\" --> FFT(\"FFT(): Converts array of `time-value` tuples to array of `frequency-amplitude` tuples.\")\n  FFT --\"{key:time1In500ms, value:[(Hz1, Ampl1), ...]}, {key:'time2In500ms', value:[(Hz1, Ampl1), ...]}, ...\"--> OUTPUT(\"CHART_BAR3D()\")\n```","status":true,"height":483,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688598847121564","type":"mrk","contents":"## Result\n```js\nFAKE( oscillator(freq(15, 1.0), freq(24, 1.5), range('now', '10s', '1ms')) )\nPUSHKEY( roundTime(key(), '500ms') )\nGROUPBYKEY()\nFFT(maxHz(100))\nCHART_BAR3D(\n  xAxis(0, 'Time', 'time'),\n  yAxis(1, 'Hz'),\n  zAxis(2, 'Amplitude'), \n  size('600px', '600px'), visualMap(0, 1.5), opacity(0.7)\n)\n```","status":true,"height":376,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688598211780580","type":"tql","contents":"FAKE( oscillator(freq(15, 1.0), freq(24, 1.5), range('now', '10s', '1ms')) )\nPUSHKEY( roundTime(key(), '500ms') )\nGROUPBYKEY()\nFFT(maxHz(100))\nCHART_BAR3D( xAxis(0, 'Time', 'time'), yAxis(1, 'Hz'), zAxis(2, 'Amplitude'), size('600px', '600px'), visualMap(0, 1.5), opacity(0.7) )","status":true,"height":157,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":true,"result":"","tqlType":"html"}]}
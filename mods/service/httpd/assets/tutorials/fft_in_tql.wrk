{"data":[{"id":"1688539428119497","type":"mrk","contents":"# Fast Fourier Transform in TQL\n\nThis tutorial shows how to draw a FFT plot using *TQL*.\nIt uses *FAKE()* oscillator for the source data, we can apply it with *QUERY()* funciton.\nBecause there is no difference whether it comes from the database or fake.\nRun this *worksheet* by click '⏩' on the top right of the page.","result":"","status":true,"height":159,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true},{"id":"1688539615399354","type":"mrk","contents":"## Generate vibration data\n\nUse `FAKE()` and `oscillator()` to generate 24Hz and 53Hz compsite wave and sampling it in every 500 microseconds.\n\n```js\nINPUT(\n  FAKE(\n    oscillator(\n      freq(24, 1.2), freq(53, 2.3),\n      range('now', '3s', '500us')\n)))\n```\n\nThis *tql* code generates records that `key` is *timestamp* and `value` is *magnitude*.","status":true,"height":355,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688543051717804","type":"tql","contents":"INPUT( FAKE( oscillator( freq(24, 1.2), freq(53, 2.3), range('now', '3s', '500us') )))\nOUTPUT( CHART_SCATTER( dataZoom('slider', 92,100), seriesLabels('data'),\n  xAxis(0, 'time', 'time'), yAxis(1, 'amplitude'), size('500px', '300px') ) )","status":true,"height":100,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":true,"result":"","tqlType":"html"},{"id":"1688540433509285","type":"mrk","contents":"## Transforming\n\nThe next steps are the processing the records.\n\n```js\nPUSHKEY('sample')\nGROUPBYKEY()\nFFT()\nFLATTEN()\nPOPKEY()\n```\n\n```mermaid\nflowchart TB\n  INPUT(\"INPUT(FAKE(oscillator(...)))\") --\"{key: time, value: (value) }\"--> PUSHKEY(\"PUSHKEY('sample'): Set new key ('sample') to all records and 'push' old key into value tuple.\") \n  PUSHKEY --\"{key: 'sample', value:(time, value)}\"-->GROUPBYKEY(\"GROUPBYKEY(): Combines whole records into one record.\")\n  GROUPBYKEY --\"{key: 'sample', value:[ (time1, value1), (time2, value2), ... ]}\" --> FFT(\"FFT(): Converts array of `time-value` tuples to array of `frequency-amplitude` tuples.\")\n  FFT --\"{key: 'sample', value:[ (Hz1, Ampl1), (Hz2, Ampl2), ... ]}\"--> FLATTEN(\"FLATTEN(): Reducing the dimension of the value array by splitting into multiple records.\")\n  FLATTEN --\"{key:'sample', value:(Hz1, Ampl1)}, {key:'sample', value:(Hz2, Ampl2)},...\"-->POPKEY(\"POPKEY(): Drops current key of record and promote the first element of value as a new key.\")\n  POPKEY --\"{key:Hz1, value:(Ampl1)}, {key:Hz2, value:(Ampl2)},...\"-->OUTPUT(\"OUTPUT()\")\n```","status":true,"height":522,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688541173053745","type":"mrk","contents":"## Result\n\n```js\nINPUT( FAKE( oscillator(freq(24, 1.2), freq(53, 2.3), range('now', '3s', '500us')) ))\nPUSHKEY('sample')\nGROUPBYKEY()\nFFT()\nFLATTEN()\nPOPKEY()\nOUTPUT( CHART_LINE( xAxis(0, 'Hz'), yAxis(1, 'Amplitude'), dataZoom('slider', 0, 10) ))\n```","status":true,"height":294,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688539986481671","type":"tql","contents":"INPUT( FAKE( oscillator(freq(24, 1.2), freq(53, 2.3), range('now', '3s', '500us')) ))\nPUSHKEY('sample')\nGROUPBYKEY()\nFFT()\nFLATTEN()\nPOPKEY()\nOUTPUT( CHART_LINE( xAxis(0, 'Hz'), yAxis(1, 'Amplitude'), dataZoom('slider', 0, 10) ))\n","status":true,"height":216,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":true,"result":"","tqlType":"html"}]}
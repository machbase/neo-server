{"data":[{"id":"1693188685767615","contents":"# User data formats in TQL\n\n## Decode JSON\n\nIt is required to tranform the incoming JSON data that is sent by external system to process into machbase-neo. Using TQL script makes it possible without developing or modifying exsting applictions.\n\nPrepare test data saved in \"script-data.json\".\n\n```json\n{\n  \"tag\": \"pump\",\n  \"data\": {\n    \"string\": \"Hello TQL?\",\n    \"number\": \"123.456\",\n    \"time\": 1687405320,\n    \"boolean\": true\n  },\n  \"array\": [\"elements\", 234.567, 345.678, false]\n}\n```\n\nCopy the code below into TQL editor and save `script-post-json.tql`.\n\n","height":287,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693188705926565","contents":"BYTES(payload() ?? `{\n  \"tag\": \"pump\",\n  \"data\": {\n    \"string\": \"Hello TQL?\",\n    \"number\": \"123.456\",\n    \"time\": 1687405320,\n    \"boolean\": true\n  },\n  \"array\": [\"elements\", 234.567, 345.678, false]\n}`)\nSCRIPT({\n  json := import(\"json\")\n  ctx := import(\"context\")\n  val := ctx.value()\n  obj := json.decode(val[0])\n  // parse a value from json, yield multiple records\n  ctx.yieldKey(obj.tag+\"_0\", obj.data.time*1000000000, obj.data.number)\n  ctx.yieldKey(obj.tag+\"_1\", obj.data.time*1000000000, obj.array[1])\n  ctx.yieldKey(obj.tag+\"_2\", obj.data.time*1000000000, obj.array[2])\n})\nCSV()","height":447,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693188705626139","contents":"Post the test data JSON to the tql.\n\n```sh\ncurl -o - --data-binary @script-data.json http://127.0.0.1:5654/db/tql/script-post-json.tql\n```\n\nThis example takes a json object via HTTP POST and decode with JSON decoder then produces records by  calling `context.yield()` multiple times.\n\n```sh\n$ curl -o - --data-binary @script-data.json http://127.0.0.1:5654/db/tql/script-post-json.tql\nname-0,1687405320000000000,123.456\nname-1,1687405320000000000,234.567000\nname-2,1687405320000000000,345.678000\n```\n\nIf the script ends with `APPEND(...)` or `INSERT(...)` instead of `CSV()` the final result records will be written into database.","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693188705465260","contents":"# Decode text\n\nMake test data in 'script-post-lines.txt'.\n\n```\n11111\n22222\n33333\n44444\n```\n\nCopy the code below into TQL editor and save as `script-post-lines.tql`.","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693188704140887","contents":"// Produce a {key:lineno, value:string} record per line\nSTRING(payload() ?? `11111\n22222\n33333\n44444`, separator('\\n'))\nSCRIPT({\n  text := import(\"text\")\n  times := import(\"times\")\n  ctx := import(\"context\")\n  key := ctx.key()\n  values := ctx.value()\n  str := text.trim_space(values[0])\n  if len(str) == 0 {\n    ctx.drop() // ignore empty line\n  } else { // parsing\n    str = text.substr(str, 0, 2)\n    ctx.yieldKey(\n      \"text_\"+key,                // new key\n      times.now(),                // time\n      text.parse_int(str, 10, 64) // convert to int\n    )\n  }\n})\nCSV()","height":487,"minimal":false,"type":"tql","tqlType":"csv","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693189043385438","contents":"Send the test data to the *tql* via HTTP POST.\n\n```sh\ncurl -o - --data-binary @script-post-lines.txt http://127.0.0.1:5654/db/tql/script-post-lines.tql\n```\n\n```sh\n$ curl -o - --data-binary @script-post-lines.txt http://127.0.0.1:5654/db/tql/script-post-lines.tql\ntext_0,1687476301286716000,11\ntext_1,1687476301286750000,22\ntext_2,1687476301286791000,33\ntext_3,1687476301286853000,44\n```\n\nIf the script ends with `APPEND(...)` or `INSERT(...)` instead of `CSV()` the final result records will be written into database.","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
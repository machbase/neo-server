{"data":[{"id":"1693186196337945","contents":"# User script in TQL\n\nOpen a new *tql* editor on the web ui and copy the code below and run it.\n\nIn this example, `linspace(-4,4,100)` generates an array contains 100 elements which are ranged from -4.0 to 4.0 in every `8/100` step. `meshgrid()` takes two array and produce meshed new array. As result of FAKE() in the example produces an array of 10000 elements (100 x 100 meshed) contains array of two float point numbers.\n`SCRIPT()` function takes a code block which enclosed by `{` and `}` and run it for each record.\nUsers can takes the key and value of the records via `context.key()` and `context.value()` then yield transformed data via `context.yield()` or `context.yieldKey()`.\n","height":185,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693186208156926","contents":"FAKE(meshgrid(linspace(-4,4,100), linspace(-4,4, 100)))\nSCRIPT({\n  math := import(\"math\")\n  // Define a custom function in the script\n  calc := func(a, b) {\n    return math.sin(math.pow(a, 2) + math.pow(b, 2)) /\n           (math.pow(a, 2) + math.pow(b, 2))\n  }\n  // Receive values of the record from context\n  ctx := import(\"context\")\n  values := ctx.value()\n  x := values[0]\n  y := values[1]\n  z := calc(x, y)\n  // Yield new value\n  //  - yieldKey() build and passes new value with new key to the next step.\n  //  - yeild() build and passes new value to the next step with the received key from previous step\n  ctx.yieldKey(x, y, z)\n})\nCHART_LINE3D(\n  // chart size in HTML syntax\n  size('1000px', '600px'),\n  // width, height, depth grids in percentage\n  gridSize(100,50,100),\n  lineWidth(5), visualMap(-0.1, 1),\n  // rotation speed in degree per sec.\n  autoRotate(20)\n)","height":575,"minimal":false,"type":"tql","tqlType":"text","lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
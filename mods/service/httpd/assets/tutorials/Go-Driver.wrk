{"data":[{"id":"169319259899855","contents":"# How to use Go driver\n\n> For smooth practice, the following query should be run to prepare tables and data.","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"1693192626373509","contents":"CREATE TAG TABLE EXAMPLE (NAME VARCHAR(20) PRIMARY KEY, TIME DATETIME BASETIME, VALUE DOUBLE SUMMARIZED);","height":200,"minimal":false,"type":"sql","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true},{"id":"169319262409083","contents":"Go provides `database/sql` package you can incorporate a wide variety of databases and data access in your applications.\n\nThis tutorial gives an introductory guide to access machbase-neo with `database/sql` package in Go.\n\nFind [full source code from github](https://github.com/machbase/neo-docs/tree/main/examples/go/sql_driver/sql_driver.go)\n\n## Install\n\nTp add driver into your `go.mod`, execute this command on your working directory.\n\n```sh\ngo get -u github.com/machbase/neo-grpc/driver\n```\n\n## Import\n\nAdd import statement in your source file.\n\n```go\nimport (\n    \"database/sql\"\n    _ \"github.com/machbase/neo-grpc/driver\"\n)\n```\n\n{: .note }\n> The package name `github.com/machbase/neo-grpc/driver` implies that the driver is implemented over gRPC API of machbase-neo. See [gRPC API](https://neo.machbase.com/docs/api-grpc/) for more about it.\n\nLet's load sql driver and connect to server.\n\n```go\ndb, err := sql.Open(\"machbase\", \"127.0.0.1:5655\")\nif err != nil {\n    panic(err)\n}\ndefer db.Close()\n```\n\n`sql.Open()` is called, `machbase` as driverName and second argument is machbase-neo's gRPC address.\n\n## Insert and Query\n\nSince we get `*sql.DB` successfully, write and read data can be done by Go standard sql package.\n\n```go\nvar tag = \"tag01\"\n_, err = db.Exec(\"INSERT INTO EXAMPLE (name, time, value) VALUES(?, ?, ?)\", tag, time.Now(), 1.234)\n```\n\nUse `db.QueryRow()` to count total records of same tag name.\n\n```go\nvar count int\nrow := db.QueryRow(\"SELECT count(*) FROM EXAMPLE WHERE name = ?\", tag)\nrow.Scan(&count)\n```\n\nTo iterate result of query, use `db.Query()` and get `*sql.Rows`.\n\n{: .note }\n> It is import not to forget releasing `rows` as soon as possible when you finish the work to prevent leaking resource.\n> \n> General pattern is using `defer rows.Close()`.\n\n```go\nrows, err := db.Query(\"SELECT name, time, value FROM EXAMPLE WHERE name = ? ORDER BY TIME DESC\", tag)\nif err != nil {\n    panic(err)\n}\ndefer rows.Close()\n\nfor rows.Next() {\n    var name string\n    var ts time.Time\n    var value float64\n    rows.Scan(&name, &ts, &value)\n    fmt.Println(\"name:\", name, \"time:\", ts.Local().String(), \"value:\", value)\n}\n```","height":200,"minimal":false,"type":"mrk","tqlType":null,"lang":[["markdown","Markdown"],["SQL","SQL"],["go","TQL"]],"result":"","status":true}]}
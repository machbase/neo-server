{"data":[{"id":"1688003944419302","type":"mrk","contents":"# Let's make waves in TQL\n\n**TQL** (*Transforming Query Language*) is a new way to tranform the data\nbefore writing it on the database or after querying it from the database.\n\nThis example shows how to simulate a vibration data with *FAKE()* function,\nsaving it on the database, query and disiplay it as plots in *TQL*.","result":"","status":true,"height":198,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true},{"id":"1688004052269735","type":"mrk","contents":"## Create table `EXAMPLE`\n\nCreate `EXAMPLE` table if you don't have it yet.\n\n```sql\nCREATE TAG TABLE IF NOT EXISTS example (\n  name varchar(100) primary key,\n  time datetime basetime,\n  value double\n);\n```","status":true,"height":324,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1690441162591887","type":"sql","contents":"CREATE TAG TABLE IF NOT EXISTS example (\n  name varchar(100) primary key,\n  time datetime basetime,\n  value double\n);","status":true,"height":158,"lang":[["SQL","SQL"],["markdown","Markdown"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688004171883164","type":"mrk","contents":"## Generate simulated wave\n\nUse *FAKE()* function to generate simulated data which is a wave\nthat has 1.5Hz frequence and 1.0 magnitude.\n\nIt generates data in 100 sampling rate (every 10 millisecodns) for 3 seconds.\nThen it shows the result in a plot.","status":true,"height":195,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688004209851688","type":"tql","contents":"FAKE( oscillator(freq(1.5, 1.0), range('now', '3s', '10ms')) )\nCHART_SCATTER()","status":true,"height":77,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":false,"tqlType":"html","result":""},{"id":"1688004248031724","type":"mrk","contents":"## Store the data in the database\n\nReplace `OUTPUT(CHART_SCATTER())` with `OUTPUT(INSERT(...))`\nso that it writes the genrated data in the `EXAMPLE` table.","status":true,"height":122,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true},{"id":"1688004284363401","type":"tql","contents":"FAKE( oscillator(freq(1.5, 1.0), range('now', '3s', '10ms')) )\nINSERT( 'time', 'value', table('example'), tag('wave.sin') )","status":true,"height":77,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":false,"tqlType":"text","result":"fail"},{"id":"1688380762447955","type":"mrk","contents":"## Query the data with SQL\n\n> This worksheet only shows the first 5 records for the briefness,\n> execute the quey on the `SQL` editor to show the full result.","status":true,"height":114,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true},{"id":"1688004100166204","type":"sql","contents":"SELECT * FROM EXAMPLE WHERE name = 'wave.sin';","status":true,"height":50,"lang":[["SQL","SQL"],["markdown","Markdown"],["javascript","TQL"]],"minimal":false,"tqlType":"csv","result":""},{"id":"168800431761486","type":"mrk","contents":"## Query the data and plot\n\nReplace `FAKE(...)` with `SQL(...)`.","status":true,"height":91,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688004354527301","type":"tql","contents":"SQL(`select time, value from example where name = 'wave.sin' limit 300`)\nCHART_LINE()","status":true,"height":71,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":false,"tqlType":"html","result":""},{"id":"1688381165204497","type":"mrk","contents":"## Query() function\n\nSometimes, composing SQL statements is a tedious work, especially when it is related to time range conditions.\nBecause it often requires converting date-time conversions (for example: `to_date`).\n*TQL* provides a simple way with `QUERY()` with `between()` function.\n\nThe first line `QUERY(...between(...))` of the example below shows the equivalent result \nthat executes this SQL statement.\n\n```sql\nSELECT\n    time, value \nFROM EXAMPLE\nWHERE\n    name = 'wave.sin'\nAND time BETWEEN\n        (SELECT MAX_TIME-3000000000 FROM V$EXAMPLE_STAT WHERE name = 'wave.sin')\n    AND (SELECT MAX_TIME FROM V$EXAMPLE_STAT WHERE name = 'wave.sin')\nLIMIT 0, 1000000\n```","status":true,"height":529,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1688381640684127","type":"tql","contents":"QUERY('value', from('example', 'wave.sin'), between('last-3s', 'last'))\nCHART_BAR()","status":true,"height":81,"lang":[["javascript","TQL"],["markdown","Markdown"],["SQL","SQL"]],"minimal":false,"result":"","tqlType":"html"},{"id":"1688340086180408","type":"mrk","contents":"## TQL as RESTful API - HTTP GET\n\n> Any tql script that saved as a file in ‘.tql’ extension can be invoked via HTTP GET request.\n\nSave the example code above as `hello.tql` then open it with web brower \nat [http://127.0.0.1:5654/db/tql/hello.tql](http://127.0.0.1:5654/db/tql/hello.tql)\nor use curl.\n\n```sh\ncurl -o - http://127.0.0.1:5654/db/tql/hello.tql\n```","status":true,"height":281,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689271756871584","type":"mrk","contents":"### JSON()\n\nMake it to respond in a JSON.\n\n```js\nQUERY('value', from('example', 'wave.sin'), between('last-3s', 'last'))\nJSON()\n```","status":true,"height":209,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689271991306820","type":"mrk","contents":"### JSON() with transpose()\n\nIt is useful for plotting if the result json is formatted in series of columns instead of rows.\n\n```js\nQUERY('value', from('example', 'wave.sin'), between('last-3s', 'last'))\nJSON( transpose(true) )\n```","status":true,"height":215,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689272197613210","type":"mrk","contents":"## Query params\n\nQuery params become variables in a TQL script.\n\n```js\nQUERY('value', from('example', 'wave.sin'), between('last-3s', 'last'))\nJSON( transpose( $trans ?? false) )\n```\n\nHere `$trans` is a variable that caller can set via query param. \n\nThe operator `??` means that if the left operand (`$trans` in this case) is defined use the value, \notherwise (if not defined) use right operand as a default value.\n\nLet's save this code and call in three different cases.\n\n- [http://127.0.0.1:5654/db/tql/hello.tql](http://127.0.0.1:5654/db/tql/hello.tql)\n- [http://127.0.0.1:5654/db/tql/hello.tql?trans=false](http://127.0.0.1:5654/db/tql/hello.tql?trans=false)\n- [http://127.0.0.1:5654/db/tql/hello.tql?trans=true](http://127.0.0.1:5654/db/tql/hello.tql?trans=true)\n","status":true,"height":509,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689271907535725","type":"mrk","contents":"### CSV()\n\nMake it respond in a CSV.\n\n```js\nQUERY('value', from('example', 'wave.sin'), between('last-3s', 'last'))\nCSV()\n```\n\nIf you are writing Python, the code below shows how to load CSV from the *tql* with pandas.\n\n```python\nfrom urllib import parse\nimport pandas as pd\n\npath = \"http://127.0.0.1:5654/db/tql/hello.tql\"\ndf = pd.read_csv(path, header=None)\ndf\n```\n","status":true,"height":498,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689271968206465","type":"mrk","contents":"## TQL as RESTful API - HTTP POST\n\nA tql that starts with `CSV(CTX.Body...)` then ends with `APPEND(...)` works as an API that ingests data.\n\nMake a new script and save it as `append.tql`.\n\n```js\nCSV(\n    CTX.Body,\n    col(0, stringType(), 'name'),\n    col(1, datetimeType('s'), 'time'),\n    col(2, doubleType(), 'value')\n)\nAPPEND(table('example'))\n```\n\n**Note**\n> The ‘APPEND’ works only when fields of input records exactly match with columns of the table in order and types.\n> If you need *transforming* the incoming data for writing to a table, please refer to the *user script in tql*.\n>\n> Actually the 'T' of *tql* stands for the *transforming*.","status":true,"height":584,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689273289792102","type":"mrk","contents":"And make a test CSV data file as `data.csv`\n\n```csv\nbarn,1677646800,0.03135\ndew_point,1677646800,24.4\ndishwasher,1677646800,3.33e-05\nfridge,1677646800,0.12415\nfurnace,1677646800,0.0207\ngarage_door,1677646800,0.0130833\ngen,1677646800,0.00348333\nhome_office,1677646800,0.442633\nhouse_overall,1677646800,0.932833\nhumidity,1677646800,0.62\n```","status":true,"height":165,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689273711936342","type":"mrk","contents":"Then send the data file to the `append.tql` via HTTP POST.\n\n```sh\ncurl -o - -v --data-binary @data.csv http://127.0.0.1:5654/db/tql/append.tql\n```","status":true,"height":140,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""},{"id":"1689273774318673","type":"mrk","contents":"```\n$ curl -o - -v --data-binary @data.csv http://127.0.0.1:5654/db/tql/append.tql\n> POST /db/tql/append2.tql HTTP/1.1\n> Host: 127.0.0.1:5654\n> User-Agent: curl/7.88.1\n> Accept: */*\n> Content-Length: 283\n> Content-Type: application/x-www-form-urlencoded\n>\n< HTTP/1.1 200 OK\n< Content-Type: application/octet-stream\n< Date: Fri, 16 Jun 2023 06:15:11 GMT\n< Content-Length: 36\n<\nappend 10 rows (success 10, fail 0).\n```","status":true,"height":200,"lang":[["markdown","Markdown"],["SQL","SQL"],["javascript","TQL"]],"minimal":true,"result":""}]}
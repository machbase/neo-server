//go:build ignore
// +build ignore

package main

import (
	"fmt"
	"os"
	"slices"
	"strings"
)

func main() {
	entries, err := os.ReadDir(".")
	if err != nil {
		panic(err)
	}

	list := make(map[string]string)

	for _, ent := range entries {
		if ent.IsDir() || !strings.HasSuffix(ent.Name(), ".js") {
			continue
		}
		cmd := strings.TrimSuffix(ent.Name(), ".js")
		name := ent.Name()
		list[cmd] = name
	}
	fd, err := os.OpenFile("generate.gen.go", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		panic(err)
	}
	defer fd.Close()

	fd.WriteString("package builtin\n")
	fd.WriteString("\n")
	fd.WriteString(`// Code generated by go generate; DO NOT EDIT.` + "\n")
	fd.WriteString("import (\n")
	fd.WriteString(`	_ "embed"` + "\n")
	fd.WriteString(")\n")
	fd.WriteString("\n")

	names := make([]string, 0, len(list))
	for name := range list {
		names = append(names, name)
	}
	slices.Sort(names)

	fd.WriteString("var cmds = map[string]string{\n")
	for _, name := range names {
		fd.WriteString(fmt.Sprintf(`	"%s": %sCode,`+"\n", name, name))
	}
	fd.WriteString("}\n")
	fd.WriteString("\n")

	for _, name := range names {
		path := list[name]
		fd.WriteString(fmt.Sprintf("//go:embed %s\n", path))
		fd.WriteString(fmt.Sprintf("var %sCode string\n", name))
		fd.WriteString("\n")
	}
}

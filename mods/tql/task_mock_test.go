// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tql_test

import (
	"context"
	"github.com/machbase/neo-spi"
	"sync"
)

// Ensure, that DatabaseMock does implement spi.Database.
// If this is not the case, regenerate this file with moq.
var _ spi.Database = &DatabaseMock{}

// DatabaseMock is a mock implementation of spi.Database.
//
//	func TestSomethingThatUsesDatabase(t *testing.T) {
//
//		// make and configure a mocked spi.Database
//		mockedDatabase := &DatabaseMock{
//			AppenderFunc: func(tableName string, opts ...spi.AppendOption) (spi.Appender, error) {
//				panic("mock out the Appender method")
//			},
//			ExecFunc: func(sqlText string, params ...any) spi.Result {
//				panic("mock out the Exec method")
//			},
//			ExecContextFunc: func(ctx context.Context, sqlText string, params ...any) spi.Result {
//				panic("mock out the ExecContext method")
//			},
//			ExplainFunc: func(sqlText string, full bool) (string, error) {
//				panic("mock out the Explain method")
//			},
//			GetServerInfoFunc: func() (*spi.ServerInfo, error) {
//				panic("mock out the GetServerInfo method")
//			},
//			GetServicePortsFunc: func(service string) ([]*spi.ServicePort, error) {
//				panic("mock out the GetServicePorts method")
//			},
//			QueryFunc: func(sqlText string, params ...any) (spi.Rows, error) {
//				panic("mock out the Query method")
//			},
//			QueryContextFunc: func(ctx context.Context, sqlText string, params ...any) (spi.Rows, error) {
//				panic("mock out the QueryContext method")
//			},
//			QueryRowFunc: func(sqlText string, params ...any) spi.Row {
//				panic("mock out the QueryRow method")
//			},
//			QueryRowContextFunc: func(ctx context.Context, sqlText string, params ...any) spi.Row {
//				panic("mock out the QueryRowContext method")
//			},
//		}
//
//		// use mockedDatabase in code that requires spi.Database
//		// and then make assertions.
//
//	}
type DatabaseMock struct {
	// AppenderFunc mocks the Appender method.
	AppenderFunc func(tableName string, opts ...spi.AppendOption) (spi.Appender, error)

	// ExecFunc mocks the Exec method.
	ExecFunc func(sqlText string, params ...any) spi.Result

	// ExecContextFunc mocks the ExecContext method.
	ExecContextFunc func(ctx context.Context, sqlText string, params ...any) spi.Result

	// ExplainFunc mocks the Explain method.
	ExplainFunc func(sqlText string, full bool) (string, error)

	// GetServerInfoFunc mocks the GetServerInfo method.
	GetServerInfoFunc func() (*spi.ServerInfo, error)

	// GetServicePortsFunc mocks the GetServicePorts method.
	GetServicePortsFunc func(service string) ([]*spi.ServicePort, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(sqlText string, params ...any) (spi.Rows, error)

	// QueryContextFunc mocks the QueryContext method.
	QueryContextFunc func(ctx context.Context, sqlText string, params ...any) (spi.Rows, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(sqlText string, params ...any) spi.Row

	// QueryRowContextFunc mocks the QueryRowContext method.
	QueryRowContextFunc func(ctx context.Context, sqlText string, params ...any) spi.Row

	// calls tracks calls to the methods.
	calls struct {
		// Appender holds details about calls to the Appender method.
		Appender []struct {
			// TableName is the tableName argument value.
			TableName string
			// Opts is the opts argument value.
			Opts []spi.AppendOption
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// ExecContext holds details about calls to the ExecContext method.
		ExecContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// Explain holds details about calls to the Explain method.
		Explain []struct {
			// SqlText is the sqlText argument value.
			SqlText string
			// Full is the full argument value.
			Full bool
		}
		// GetServerInfo holds details about calls to the GetServerInfo method.
		GetServerInfo []struct {
		}
		// GetServicePorts holds details about calls to the GetServicePorts method.
		GetServicePorts []struct {
			// Service is the service argument value.
			Service string
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// QueryContext holds details about calls to the QueryContext method.
		QueryContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
		// QueryRowContext holds details about calls to the QueryRowContext method.
		QueryRowContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SqlText is the sqlText argument value.
			SqlText string
			// Params is the params argument value.
			Params []any
		}
	}
	lockAppender        sync.RWMutex
	lockExec            sync.RWMutex
	lockExecContext     sync.RWMutex
	lockExplain         sync.RWMutex
	lockGetServerInfo   sync.RWMutex
	lockGetServicePorts sync.RWMutex
	lockQuery           sync.RWMutex
	lockQueryContext    sync.RWMutex
	lockQueryRow        sync.RWMutex
	lockQueryRowContext sync.RWMutex
}

// Appender calls AppenderFunc.
func (mock *DatabaseMock) Appender(tableName string, opts ...spi.AppendOption) (spi.Appender, error) {
	if mock.AppenderFunc == nil {
		panic("DatabaseMock.AppenderFunc: method is nil but Database.Appender was just called")
	}
	callInfo := struct {
		TableName string
		Opts      []spi.AppendOption
	}{
		TableName: tableName,
		Opts:      opts,
	}
	mock.lockAppender.Lock()
	mock.calls.Appender = append(mock.calls.Appender, callInfo)
	mock.lockAppender.Unlock()
	return mock.AppenderFunc(tableName, opts...)
}

// AppenderCalls gets all the calls that were made to Appender.
// Check the length with:
//
//	len(mockedDatabase.AppenderCalls())
func (mock *DatabaseMock) AppenderCalls() []struct {
	TableName string
	Opts      []spi.AppendOption
} {
	var calls []struct {
		TableName string
		Opts      []spi.AppendOption
	}
	mock.lockAppender.RLock()
	calls = mock.calls.Appender
	mock.lockAppender.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *DatabaseMock) Exec(sqlText string, params ...any) spi.Result {
	if mock.ExecFunc == nil {
		panic("DatabaseMock.ExecFunc: method is nil but Database.Exec was just called")
	}
	callInfo := struct {
		SqlText string
		Params  []any
	}{
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(sqlText, params...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedDatabase.ExecCalls())
func (mock *DatabaseMock) ExecCalls() []struct {
	SqlText string
	Params  []any
} {
	var calls []struct {
		SqlText string
		Params  []any
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// ExecContext calls ExecContextFunc.
func (mock *DatabaseMock) ExecContext(ctx context.Context, sqlText string, params ...any) spi.Result {
	if mock.ExecContextFunc == nil {
		panic("DatabaseMock.ExecContextFunc: method is nil but Database.ExecContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}{
		Ctx:     ctx,
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockExecContext.Lock()
	mock.calls.ExecContext = append(mock.calls.ExecContext, callInfo)
	mock.lockExecContext.Unlock()
	return mock.ExecContextFunc(ctx, sqlText, params...)
}

// ExecContextCalls gets all the calls that were made to ExecContext.
// Check the length with:
//
//	len(mockedDatabase.ExecContextCalls())
func (mock *DatabaseMock) ExecContextCalls() []struct {
	Ctx     context.Context
	SqlText string
	Params  []any
} {
	var calls []struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}
	mock.lockExecContext.RLock()
	calls = mock.calls.ExecContext
	mock.lockExecContext.RUnlock()
	return calls
}

// Explain calls ExplainFunc.
func (mock *DatabaseMock) Explain(sqlText string, full bool) (string, error) {
	if mock.ExplainFunc == nil {
		panic("DatabaseMock.ExplainFunc: method is nil but Database.Explain was just called")
	}
	callInfo := struct {
		SqlText string
		Full    bool
	}{
		SqlText: sqlText,
		Full:    full,
	}
	mock.lockExplain.Lock()
	mock.calls.Explain = append(mock.calls.Explain, callInfo)
	mock.lockExplain.Unlock()
	return mock.ExplainFunc(sqlText, full)
}

// ExplainCalls gets all the calls that were made to Explain.
// Check the length with:
//
//	len(mockedDatabase.ExplainCalls())
func (mock *DatabaseMock) ExplainCalls() []struct {
	SqlText string
	Full    bool
} {
	var calls []struct {
		SqlText string
		Full    bool
	}
	mock.lockExplain.RLock()
	calls = mock.calls.Explain
	mock.lockExplain.RUnlock()
	return calls
}

// GetServerInfo calls GetServerInfoFunc.
func (mock *DatabaseMock) GetServerInfo() (*spi.ServerInfo, error) {
	if mock.GetServerInfoFunc == nil {
		panic("DatabaseMock.GetServerInfoFunc: method is nil but Database.GetServerInfo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetServerInfo.Lock()
	mock.calls.GetServerInfo = append(mock.calls.GetServerInfo, callInfo)
	mock.lockGetServerInfo.Unlock()
	return mock.GetServerInfoFunc()
}

// GetServerInfoCalls gets all the calls that were made to GetServerInfo.
// Check the length with:
//
//	len(mockedDatabase.GetServerInfoCalls())
func (mock *DatabaseMock) GetServerInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetServerInfo.RLock()
	calls = mock.calls.GetServerInfo
	mock.lockGetServerInfo.RUnlock()
	return calls
}

// GetServicePorts calls GetServicePortsFunc.
func (mock *DatabaseMock) GetServicePorts(service string) ([]*spi.ServicePort, error) {
	if mock.GetServicePortsFunc == nil {
		panic("DatabaseMock.GetServicePortsFunc: method is nil but Database.GetServicePorts was just called")
	}
	callInfo := struct {
		Service string
	}{
		Service: service,
	}
	mock.lockGetServicePorts.Lock()
	mock.calls.GetServicePorts = append(mock.calls.GetServicePorts, callInfo)
	mock.lockGetServicePorts.Unlock()
	return mock.GetServicePortsFunc(service)
}

// GetServicePortsCalls gets all the calls that were made to GetServicePorts.
// Check the length with:
//
//	len(mockedDatabase.GetServicePortsCalls())
func (mock *DatabaseMock) GetServicePortsCalls() []struct {
	Service string
} {
	var calls []struct {
		Service string
	}
	mock.lockGetServicePorts.RLock()
	calls = mock.calls.GetServicePorts
	mock.lockGetServicePorts.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DatabaseMock) Query(sqlText string, params ...any) (spi.Rows, error) {
	if mock.QueryFunc == nil {
		panic("DatabaseMock.QueryFunc: method is nil but Database.Query was just called")
	}
	callInfo := struct {
		SqlText string
		Params  []any
	}{
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(sqlText, params...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedDatabase.QueryCalls())
func (mock *DatabaseMock) QueryCalls() []struct {
	SqlText string
	Params  []any
} {
	var calls []struct {
		SqlText string
		Params  []any
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// QueryContext calls QueryContextFunc.
func (mock *DatabaseMock) QueryContext(ctx context.Context, sqlText string, params ...any) (spi.Rows, error) {
	if mock.QueryContextFunc == nil {
		panic("DatabaseMock.QueryContextFunc: method is nil but Database.QueryContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}{
		Ctx:     ctx,
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockQueryContext.Lock()
	mock.calls.QueryContext = append(mock.calls.QueryContext, callInfo)
	mock.lockQueryContext.Unlock()
	return mock.QueryContextFunc(ctx, sqlText, params...)
}

// QueryContextCalls gets all the calls that were made to QueryContext.
// Check the length with:
//
//	len(mockedDatabase.QueryContextCalls())
func (mock *DatabaseMock) QueryContextCalls() []struct {
	Ctx     context.Context
	SqlText string
	Params  []any
} {
	var calls []struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}
	mock.lockQueryContext.RLock()
	calls = mock.calls.QueryContext
	mock.lockQueryContext.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *DatabaseMock) QueryRow(sqlText string, params ...any) spi.Row {
	if mock.QueryRowFunc == nil {
		panic("DatabaseMock.QueryRowFunc: method is nil but Database.QueryRow was just called")
	}
	callInfo := struct {
		SqlText string
		Params  []any
	}{
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	mock.lockQueryRow.Unlock()
	return mock.QueryRowFunc(sqlText, params...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//
//	len(mockedDatabase.QueryRowCalls())
func (mock *DatabaseMock) QueryRowCalls() []struct {
	SqlText string
	Params  []any
} {
	var calls []struct {
		SqlText string
		Params  []any
	}
	mock.lockQueryRow.RLock()
	calls = mock.calls.QueryRow
	mock.lockQueryRow.RUnlock()
	return calls
}

// QueryRowContext calls QueryRowContextFunc.
func (mock *DatabaseMock) QueryRowContext(ctx context.Context, sqlText string, params ...any) spi.Row {
	if mock.QueryRowContextFunc == nil {
		panic("DatabaseMock.QueryRowContextFunc: method is nil but Database.QueryRowContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}{
		Ctx:     ctx,
		SqlText: sqlText,
		Params:  params,
	}
	mock.lockQueryRowContext.Lock()
	mock.calls.QueryRowContext = append(mock.calls.QueryRowContext, callInfo)
	mock.lockQueryRowContext.Unlock()
	return mock.QueryRowContextFunc(ctx, sqlText, params...)
}

// QueryRowContextCalls gets all the calls that were made to QueryRowContext.
// Check the length with:
//
//	len(mockedDatabase.QueryRowContextCalls())
func (mock *DatabaseMock) QueryRowContextCalls() []struct {
	Ctx     context.Context
	SqlText string
	Params  []any
} {
	var calls []struct {
		Ctx     context.Context
		SqlText string
		Params  []any
	}
	mock.lockQueryRowContext.RLock()
	calls = mock.calls.QueryRowContext
	mock.lockQueryRowContext.RUnlock()
	return calls
}

// Ensure, that RowsMock does implement spi.Rows.
// If this is not the case, regenerate this file with moq.
var _ spi.Rows = &RowsMock{}

// RowsMock is a mock implementation of spi.Rows.
//
//	func TestSomethingThatUsesRows(t *testing.T) {
//
//		// make and configure a mocked spi.Rows
//		mockedRows := &RowsMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			ColumnsFunc: func() (spi.Columns, error) {
//				panic("mock out the Columns method")
//			},
//			IsFetchableFunc: func() bool {
//				panic("mock out the IsFetchable method")
//			},
//			MessageFunc: func() string {
//				panic("mock out the Message method")
//			},
//			NextFunc: func() bool {
//				panic("mock out the Next method")
//			},
//			RowsAffectedFunc: func() int64 {
//				panic("mock out the RowsAffected method")
//			},
//			ScanFunc: func(cols ...any) error {
//				panic("mock out the Scan method")
//			},
//		}
//
//		// use mockedRows in code that requires spi.Rows
//		// and then make assertions.
//
//	}
type RowsMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ColumnsFunc mocks the Columns method.
	ColumnsFunc func() (spi.Columns, error)

	// IsFetchableFunc mocks the IsFetchable method.
	IsFetchableFunc func() bool

	// MessageFunc mocks the Message method.
	MessageFunc func() string

	// NextFunc mocks the Next method.
	NextFunc func() bool

	// RowsAffectedFunc mocks the RowsAffected method.
	RowsAffectedFunc func() int64

	// ScanFunc mocks the Scan method.
	ScanFunc func(cols ...any) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Columns holds details about calls to the Columns method.
		Columns []struct {
		}
		// IsFetchable holds details about calls to the IsFetchable method.
		IsFetchable []struct {
		}
		// Message holds details about calls to the Message method.
		Message []struct {
		}
		// Next holds details about calls to the Next method.
		Next []struct {
		}
		// RowsAffected holds details about calls to the RowsAffected method.
		RowsAffected []struct {
		}
		// Scan holds details about calls to the Scan method.
		Scan []struct {
			// Cols is the cols argument value.
			Cols []any
		}
	}
	lockClose        sync.RWMutex
	lockColumns      sync.RWMutex
	lockIsFetchable  sync.RWMutex
	lockMessage      sync.RWMutex
	lockNext         sync.RWMutex
	lockRowsAffected sync.RWMutex
	lockScan         sync.RWMutex
}

// Close calls CloseFunc.
func (mock *RowsMock) Close() error {
	if mock.CloseFunc == nil {
		panic("RowsMock.CloseFunc: method is nil but Rows.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedRows.CloseCalls())
func (mock *RowsMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Columns calls ColumnsFunc.
func (mock *RowsMock) Columns() (spi.Columns, error) {
	if mock.ColumnsFunc == nil {
		panic("RowsMock.ColumnsFunc: method is nil but Rows.Columns was just called")
	}
	callInfo := struct {
	}{}
	mock.lockColumns.Lock()
	mock.calls.Columns = append(mock.calls.Columns, callInfo)
	mock.lockColumns.Unlock()
	return mock.ColumnsFunc()
}

// ColumnsCalls gets all the calls that were made to Columns.
// Check the length with:
//
//	len(mockedRows.ColumnsCalls())
func (mock *RowsMock) ColumnsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockColumns.RLock()
	calls = mock.calls.Columns
	mock.lockColumns.RUnlock()
	return calls
}

// IsFetchable calls IsFetchableFunc.
func (mock *RowsMock) IsFetchable() bool {
	if mock.IsFetchableFunc == nil {
		panic("RowsMock.IsFetchableFunc: method is nil but Rows.IsFetchable was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsFetchable.Lock()
	mock.calls.IsFetchable = append(mock.calls.IsFetchable, callInfo)
	mock.lockIsFetchable.Unlock()
	return mock.IsFetchableFunc()
}

// IsFetchableCalls gets all the calls that were made to IsFetchable.
// Check the length with:
//
//	len(mockedRows.IsFetchableCalls())
func (mock *RowsMock) IsFetchableCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsFetchable.RLock()
	calls = mock.calls.IsFetchable
	mock.lockIsFetchable.RUnlock()
	return calls
}

// Message calls MessageFunc.
func (mock *RowsMock) Message() string {
	if mock.MessageFunc == nil {
		panic("RowsMock.MessageFunc: method is nil but Rows.Message was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMessage.Lock()
	mock.calls.Message = append(mock.calls.Message, callInfo)
	mock.lockMessage.Unlock()
	return mock.MessageFunc()
}

// MessageCalls gets all the calls that were made to Message.
// Check the length with:
//
//	len(mockedRows.MessageCalls())
func (mock *RowsMock) MessageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMessage.RLock()
	calls = mock.calls.Message
	mock.lockMessage.RUnlock()
	return calls
}

// Next calls NextFunc.
func (mock *RowsMock) Next() bool {
	if mock.NextFunc == nil {
		panic("RowsMock.NextFunc: method is nil but Rows.Next was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc()
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//
//	len(mockedRows.NextCalls())
func (mock *RowsMock) NextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}

// RowsAffected calls RowsAffectedFunc.
func (mock *RowsMock) RowsAffected() int64 {
	if mock.RowsAffectedFunc == nil {
		panic("RowsMock.RowsAffectedFunc: method is nil but Rows.RowsAffected was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRowsAffected.Lock()
	mock.calls.RowsAffected = append(mock.calls.RowsAffected, callInfo)
	mock.lockRowsAffected.Unlock()
	return mock.RowsAffectedFunc()
}

// RowsAffectedCalls gets all the calls that were made to RowsAffected.
// Check the length with:
//
//	len(mockedRows.RowsAffectedCalls())
func (mock *RowsMock) RowsAffectedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRowsAffected.RLock()
	calls = mock.calls.RowsAffected
	mock.lockRowsAffected.RUnlock()
	return calls
}

// Scan calls ScanFunc.
func (mock *RowsMock) Scan(cols ...any) error {
	if mock.ScanFunc == nil {
		panic("RowsMock.ScanFunc: method is nil but Rows.Scan was just called")
	}
	callInfo := struct {
		Cols []any
	}{
		Cols: cols,
	}
	mock.lockScan.Lock()
	mock.calls.Scan = append(mock.calls.Scan, callInfo)
	mock.lockScan.Unlock()
	return mock.ScanFunc(cols...)
}

// ScanCalls gets all the calls that were made to Scan.
// Check the length with:
//
//	len(mockedRows.ScanCalls())
func (mock *RowsMock) ScanCalls() []struct {
	Cols []any
} {
	var calls []struct {
		Cols []any
	}
	mock.lockScan.RLock()
	calls = mock.calls.Scan
	mock.lockScan.RUnlock()
	return calls
}

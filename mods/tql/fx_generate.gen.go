//go:generate go run fx_generate.go

package tql

// Code generated by go generate; DO NOT EDIT.

import (
	"math"

	"github.com/machbase/neo-server/mods/codec/opts"
	"github.com/machbase/neo-server/mods/expression"
	"github.com/machbase/neo-server/mods/nums"
)

func NewTask() Task {
	x := &task{}
	x.functions = map[string]expression.Function{
		// math
		"sin":   x.gen_sin,
		"cos":   x.gen_cos,
		"tan":   x.gen_tan,
		"exp":   x.gen_exp,
		"exp2":  x.gen_exp2,
		"log":   x.gen_log,
		"log10": x.gen_log10,
		// nums
		"count":      nums.Count,
		"len":        nums.Len,
		"element":    nums.Element,
		"round":      x.gen_round,
		"linspace":   x.gen_linspace,
		"linspace50": x.gen_linspace50,
		"meshgrid":   x.gen_meshgrid,
		// maps.time
		"time":      x.gen_time,
		"timeAdd":   x.gen_timeAdd,
		"roundTime": x.gen_roundTime,
		"range":     x.gen_range,
		// maps.monad
		"TAKE":       x.gen_TAKE,
		"DROP":       x.gen_DROP,
		"FILTER":     x.gen_FILTER,
		"FLATTEN":    x.gen_FLATTEN,
		"GROUPBYKEY": x.gen_GROUPBYKEY,
		"POPKEY":     x.gen_POPKEY,
		"PUSHKEY":    x.gen_PUSHKEY,
		"SCRIPT":     x.gen_SCRIPT,
		"lazy":       x.gen_lazy,
		// maps.dbsrc
		"from":    x.gen_from,
		"limit":   x.gen_limit,
		"between": x.gen_between,
		"dump":    x.gen_dump,
		"QUERY":   x.gen_QUERY,
		"SQL":     x.gen_SQL,
		// maps.dbsink
		"table":  x.gen_table,
		"tag":    x.gen_tag,
		"INSERT": x.gen_INSERT,
		"APPEND": x.gen_APPEND,
		// maps.fourier
		"minHz": x.gen_minHz,
		"maxHz": x.gen_maxHz,
		"FFT":   x.gen_FFT,
		// maps.encoder
		"CSV":             x.gen_CSV,
		"JSON":            x.gen_JSON,
		"MARKDOWN":        x.gen_MARKDOWN,
		"CHART_LINE":      x.gen_CHART_LINE,
		"CHART_SCATTER":   x.gen_CHART_SCATTER,
		"CHART_BAR":       x.gen_CHART_BAR,
		"CHART_LINE3D":    x.gen_CHART_LINE3D,
		"CHART_BAR3D":     x.gen_CHART_BAR3D,
		"CHART_SURFACE3D": x.gen_CHART_SURFACE3D,
		"CHART_SCATTER3D": x.gen_CHART_SCATTER3D,
		// maps.bytes
		"separator": x.gen_separator,
		"file":      x.gen_file,
		"STRING":    x.gen_STRING,
		"BYTES":     x.gen_BYTES,
		// maps.csv
		"col":          x.gen_col,
		"field":        x.gen_field,
		"header":       x.gen_header,
		"datetimeType": x.gen_datetimeType,
		"stringType":   x.gen_stringType,
		"doubleType":   x.gen_doubleType,
		"freq":         x.gen_freq,
		"oscillator":   x.gen_oscillator,
		"sphere":       x.gen_sphere,
		"FAKE":         x.gen_FAKE,
		// maps.input
		"INPUT": x.gen_INPUT,
		// maps.output
		"OUTPUT": x.gen_OUTPUT,
		// aliases
		"markArea":  fmMarkArea,
		"markXAxis": x.gen_markLineXAxisCoord,
		"markYAxis": x.gen_markLineYAxisCoord,
		"tz":        x.gen_tz,
		"sep":       x.gen_sep,
		// codec.opts
		"assetHost":          x.gen_assetHost,
		"autoRotate":         x.gen_autoRotate,
		"boxDrawBorder":      x.gen_boxDrawBorder,
		"boxSeparateColumns": x.gen_boxSeparateColumns,
		"boxStyle":           x.gen_boxStyle,
		"brief":              x.gen_brief,
		"briefCount":         x.gen_briefCount,
		"chartJson":          x.gen_chartJson,
		"columnTypes":        x.gen_columnTypes,
		"columns":            x.gen_columns,
		"dataZoom":           x.gen_dataZoom,
		"delimiter":          x.gen_delimiter,
		"gridSize":           x.gen_gridSize,
		"heading":            x.gen_heading,
		"html":               x.gen_html,
		"inputStream":        x.gen_inputStream,
		"lineWidth":          x.gen_lineWidth,
		"markAreaNameCoord":  x.gen_markAreaNameCoord,
		"markLineXAxisCoord": x.gen_markLineXAxisCoord,
		"markLineYAxisCoord": x.gen_markLineYAxisCoord,
		"opacity":            x.gen_opacity,
		"outputStream":       x.gen_outputStream,
		"precision":          x.gen_precision,
		"rownum":             x.gen_rownum,
		"seriesLabels":       x.gen_seriesLabels,
		"showGrid":           x.gen_showGrid,
		"size":               x.gen_size,
		"subtitle":           x.gen_subtitle,
		"tableName":          x.gen_tableName,
		"theme":              x.gen_theme,
		"timeLocation":       x.gen_timeLocation,
		"timeformat":         x.gen_timeformat,
		"title":              x.gen_title,
		"transcoder":         x.gen_transcoder,
		"transpose":          x.gen_transpose,
		"visualMap":          x.gen_visualMap,
		"xAxis":              x.gen_xAxis,
		"yAxis":              x.gen_yAxis,
		"zAxis":              x.gen_zAxis,
	}
	return x
}

// gen_sin
//
// syntax: sin(float64)
func (_ *task) gen_sin(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("sin", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "sin", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Sin(p0)
	return ret, nil
}

// gen_cos
//
// syntax: cos(float64)
func (_ *task) gen_cos(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("cos", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "cos", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Cos(p0)
	return ret, nil
}

// gen_tan
//
// syntax: tan(float64)
func (_ *task) gen_tan(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("tan", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "tan", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Tan(p0)
	return ret, nil
}

// gen_exp
//
// syntax: exp(float64)
func (_ *task) gen_exp(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("exp", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "exp", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Exp(p0)
	return ret, nil
}

// gen_exp2
//
// syntax: exp2(float64)
func (_ *task) gen_exp2(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("exp2", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "exp2", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Exp2(p0)
	return ret, nil
}

// gen_log
//
// syntax: log(float64)
func (_ *task) gen_log(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("log", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "log", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Log(p0)
	return ret, nil
}

// gen_log10
//
// syntax: log10(float64)
func (_ *task) gen_log10(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("log10", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "log10", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Log10(p0)
	return ret, nil
}

// gen_round
//
// syntax: round(int64, int64)
func (_ *task) gen_round(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("round", 2, len(args))
	}
	p0, err := convInt64(args, 0, "round", "int64")
	if err != nil {
		return nil, err
	}
	p1, err := convInt64(args, 1, "round", "int64")
	if err != nil {
		return nil, err
	}
	ret := nums.Round(p0, p1)
	return ret, nil
}

// gen_linspace
//
// syntax: linspace(float64, float64, int)
func (_ *task) gen_linspace(args ...any) (any, error) {
	if len(args) != 3 {
		return nil, ErrInvalidNumOfArgs("linspace", 3, len(args))
	}
	p0, err := convFloat64(args, 0, "linspace", "float64")
	if err != nil {
		return nil, err
	}
	p1, err := convFloat64(args, 1, "linspace", "float64")
	if err != nil {
		return nil, err
	}
	p2, err := convInt(args, 2, "linspace", "int")
	if err != nil {
		return nil, err
	}
	ret := nums.Linspace(p0, p1, p2)
	return ret, nil
}

// gen_linspace50
//
// syntax: linspace50(float64, float64)
func (_ *task) gen_linspace50(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("linspace50", 2, len(args))
	}
	p0, err := convFloat64(args, 0, "linspace50", "float64")
	if err != nil {
		return nil, err
	}
	p1, err := convFloat64(args, 1, "linspace50", "float64")
	if err != nil {
		return nil, err
	}
	ret := nums.Linspace50(p0, p1)
	return ret, nil
}

// gen_meshgrid
//
// syntax: meshgrid([]float64, []float64)
func (_ *task) gen_meshgrid(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("meshgrid", 2, len(args))
	}
	p0, ok := args[0].([]float64)
	if !ok {
		return nil, ErrWrongTypeOfArgs("meshgrid", 0, "[]float64", args[0])
	}
	p1, ok := args[1].([]float64)
	if !ok {
		return nil, ErrWrongTypeOfArgs("meshgrid", 1, "[]float64", args[1])
	}
	ret := nums.Meshgrid(p0, p1)
	return ret, nil
}

// gen_time
//
// syntax: time()
func (_ *task) gen_time(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("time", 1, len(args))
	}
	p0, err := convAny(args, 0, "time", "interface {}")
	if err != nil {
		return nil, err
	}
	return fmTime(p0)
}

// gen_timeAdd
//
// syntax: timeAdd(, )
func (_ *task) gen_timeAdd(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("timeAdd", 2, len(args))
	}
	p0, err := convAny(args, 0, "timeAdd", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "timeAdd", "interface {}")
	if err != nil {
		return nil, err
	}
	return fmTimeAdd(p0, p1)
}

// gen_roundTime
//
// syntax: roundTime(, )
func (_ *task) gen_roundTime(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("roundTime", 2, len(args))
	}
	p0, err := convAny(args, 0, "roundTime", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "roundTime", "interface {}")
	if err != nil {
		return nil, err
	}
	return fmRoundTime(p0, p1)
}

// gen_range
//
// syntax: range(, , ...interface {})
func (_ *task) gen_range(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, ErrInvalidNumOfArgs("range", 2, len(args))
	}
	p0, err := convAny(args, 0, "range", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "range", "interface {}")
	if err != nil {
		return nil, err
	}
	p2 := []interface{}{}
	for n := 2; n < len(args); n++ {
		argv, err := convAny(args, n, "range", "...interface {}")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	return fmTimeRange(p0, p1, p2...)
}

// gen_TAKE
//
// syntax: TAKE(, , , int)
func (_ *task) gen_TAKE(args ...any) (any, error) {
	if len(args) != 4 {
		return nil, ErrInvalidNumOfArgs("TAKE", 4, len(args))
	}
	p0, err := convContext(args, 0, "TAKE", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "TAKE", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convAny(args, 2, "TAKE", "interface {}")
	if err != nil {
		return nil, err
	}
	p3, err := convInt(args, 3, "TAKE", "int")
	if err != nil {
		return nil, err
	}
	ret := fmTake(p0, p1, p2, p3)
	return ret, nil
}

// gen_DROP
//
// syntax: DROP(, , , int)
func (_ *task) gen_DROP(args ...any) (any, error) {
	if len(args) != 4 {
		return nil, ErrInvalidNumOfArgs("DROP", 4, len(args))
	}
	p0, err := convContext(args, 0, "DROP", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "DROP", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convAny(args, 2, "DROP", "interface {}")
	if err != nil {
		return nil, err
	}
	p3, err := convInt(args, 3, "DROP", "int")
	if err != nil {
		return nil, err
	}
	ret := fmDrop(p0, p1, p2, p3)
	return ret, nil
}

// gen_FILTER
//
// syntax: FILTER(, , , bool)
func (_ *task) gen_FILTER(args ...any) (any, error) {
	if len(args) != 4 {
		return nil, ErrInvalidNumOfArgs("FILTER", 4, len(args))
	}
	p0, err := convContext(args, 0, "FILTER", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "FILTER", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convAny(args, 2, "FILTER", "interface {}")
	if err != nil {
		return nil, err
	}
	p3, err := convBool(args, 3, "FILTER", "bool")
	if err != nil {
		return nil, err
	}
	ret := fmFilter(p0, p1, p2, p3)
	return ret, nil
}

// gen_FLATTEN
//
// syntax: FLATTEN(, , )
func (_ *task) gen_FLATTEN(args ...any) (any, error) {
	if len(args) != 3 {
		return nil, ErrInvalidNumOfArgs("FLATTEN", 3, len(args))
	}
	p0, err := convContext(args, 0, "FLATTEN", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "FLATTEN", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convAny(args, 2, "FLATTEN", "interface {}")
	if err != nil {
		return nil, err
	}
	ret := fmFlatten(p0, p1, p2)
	return ret, nil
}

// gen_GROUPBYKEY
//
// syntax: GROUPBYKEY(, , , ...interface {})
func (_ *task) gen_GROUPBYKEY(args ...any) (any, error) {
	if len(args) < 3 {
		return nil, ErrInvalidNumOfArgs("GROUPBYKEY", 3, len(args))
	}
	p0, err := convContext(args, 0, "GROUPBYKEY", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "GROUPBYKEY", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convAny(args, 2, "GROUPBYKEY", "interface {}")
	if err != nil {
		return nil, err
	}
	p3 := []interface{}{}
	for n := 3; n < len(args); n++ {
		argv, err := convAny(args, n, "GROUPBYKEY", "...interface {}")
		if err != nil {
			return nil, err
		}
		p3 = append(p3, argv)
	}
	ret := fmGroupByKey(p0, p1, p2, p3...)
	return ret, nil
}

// gen_POPKEY
//
// syntax: POPKEY(, , , ...int)
func (_ *task) gen_POPKEY(args ...any) (any, error) {
	if len(args) < 3 {
		return nil, ErrInvalidNumOfArgs("POPKEY", 3, len(args))
	}
	p0, err := convContext(args, 0, "POPKEY", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "POPKEY", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convAny(args, 2, "POPKEY", "interface {}")
	if err != nil {
		return nil, err
	}
	p3 := []int{}
	for n := 3; n < len(args); n++ {
		argv, err := convInt(args, n, "POPKEY", "...int")
		if err != nil {
			return nil, err
		}
		p3 = append(p3, argv)
	}
	return fmPopKey(p0, p1, p2, p3...)
}

// gen_PUSHKEY
//
// syntax: PUSHKEY(, , , )
func (_ *task) gen_PUSHKEY(args ...any) (any, error) {
	if len(args) != 4 {
		return nil, ErrInvalidNumOfArgs("PUSHKEY", 4, len(args))
	}
	p0, err := convContext(args, 0, "PUSHKEY", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "PUSHKEY", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convAny(args, 2, "PUSHKEY", "interface {}")
	if err != nil {
		return nil, err
	}
	p3, err := convAny(args, 3, "PUSHKEY", "interface {}")
	if err != nil {
		return nil, err
	}
	return fmPushKey(p0, p1, p2, p3)
}

// gen_SCRIPT
//
// syntax: SCRIPT(, , , string)
func (_ *task) gen_SCRIPT(args ...any) (any, error) {
	if len(args) != 4 {
		return nil, ErrInvalidNumOfArgs("SCRIPT", 4, len(args))
	}
	p0, err := convContext(args, 0, "SCRIPT", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "SCRIPT", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convAny(args, 2, "SCRIPT", "interface {}")
	if err != nil {
		return nil, err
	}
	p3, err := convString(args, 3, "SCRIPT", "string")
	if err != nil {
		return nil, err
	}
	return fmScriptTengo(p0, p1, p2, p3)
}

// gen_lazy
//
// syntax: lazy(bool)
func (_ *task) gen_lazy(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("lazy", 1, len(args))
	}
	p0, err := convBool(args, 0, "lazy", "bool")
	if err != nil {
		return nil, err
	}
	ret := fmLazy(p0)
	return ret, nil
}

// gen_from
//
// syntax: from(string, string, ...string)
func (_ *task) gen_from(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, ErrInvalidNumOfArgs("from", 2, len(args))
	}
	p0, err := convString(args, 0, "from", "string")
	if err != nil {
		return nil, err
	}
	p1, err := convString(args, 1, "from", "string")
	if err != nil {
		return nil, err
	}
	p2 := []string{}
	for n := 2; n < len(args); n++ {
		argv, err := convString(args, n, "from", "...string")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	ret := fmFrom(p0, p1, p2...)
	return ret, nil
}

// gen_limit
//
// syntax: limit(...int)
func (_ *task) gen_limit(args ...any) (any, error) {
	p0 := []int{}
	for n := 0; n < len(args); n++ {
		argv, err := convInt(args, n, "limit", "...int")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmLimit(p0...)
	return ret, nil
}

// gen_between
//
// syntax: between(, , ...interface {})
func (_ *task) gen_between(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, ErrInvalidNumOfArgs("between", 2, len(args))
	}
	p0, err := convAny(args, 0, "between", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "between", "interface {}")
	if err != nil {
		return nil, err
	}
	p2 := []interface{}{}
	for n := 2; n < len(args); n++ {
		argv, err := convAny(args, n, "between", "...interface {}")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	return fmBetween(p0, p1, p2...)
}

// gen_dump
//
// syntax: dump(...bool)
func (_ *task) gen_dump(args ...any) (any, error) {
	p0 := []bool{}
	for n := 0; n < len(args); n++ {
		argv, err := convBool(args, n, "dump", "...bool")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmDump(p0...)
	return ret, nil
}

// gen_QUERY
//
// syntax: QUERY(...interface {})
func (_ *task) gen_QUERY(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "QUERY", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmQuery(p0...)
}

// gen_SQL
//
// syntax: SQL(string)
func (_ *task) gen_SQL(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("SQL", 1, len(args))
	}
	p0, err := convString(args, 0, "SQL", "string")
	if err != nil {
		return nil, err
	}
	ret := fmSql(p0)
	return ret, nil
}

// gen_table
//
// syntax: table(string)
func (_ *task) gen_table(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("table", 1, len(args))
	}
	p0, err := convString(args, 0, "table", "string")
	if err != nil {
		return nil, err
	}
	ret := fmTable(p0)
	return ret, nil
}

// gen_tag
//
// syntax: tag(string, ...string)
func (_ *task) gen_tag(args ...any) (any, error) {
	if len(args) < 1 {
		return nil, ErrInvalidNumOfArgs("tag", 1, len(args))
	}
	p0, err := convString(args, 0, "tag", "string")
	if err != nil {
		return nil, err
	}
	p1 := []string{}
	for n := 1; n < len(args); n++ {
		argv, err := convString(args, n, "tag", "...string")
		if err != nil {
			return nil, err
		}
		p1 = append(p1, argv)
	}
	ret := fmTag(p0, p1...)
	return ret, nil
}

// gen_INSERT
//
// syntax: INSERT(...interface {})
func (_ *task) gen_INSERT(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "INSERT", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmInsert(p0...)
}

// gen_APPEND
//
// syntax: APPEND(...interface {})
func (_ *task) gen_APPEND(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "APPEND", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmAppend(p0...)
}

// gen_minHz
//
// syntax: minHz(float64)
func (_ *task) gen_minHz(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("minHz", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "minHz", "float64")
	if err != nil {
		return nil, err
	}
	ret := fmMinHz(p0)
	return ret, nil
}

// gen_maxHz
//
// syntax: maxHz(float64)
func (_ *task) gen_maxHz(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("maxHz", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "maxHz", "float64")
	if err != nil {
		return nil, err
	}
	ret := fmMaxHz(p0)
	return ret, nil
}

// gen_FFT
//
// syntax: FFT(, , []interface {}, ...interface {})
func (_ *task) gen_FFT(args ...any) (any, error) {
	if len(args) < 3 {
		return nil, ErrInvalidNumOfArgs("FFT", 3, len(args))
	}
	p0, err := convContext(args, 0, "FFT", "*tql.SubContext")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "FFT", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, ok := args[2].([]interface{})
	if !ok {
		return nil, ErrWrongTypeOfArgs("FFT", 2, "[]interface {}", args[2])
	}
	p3 := []interface{}{}
	for n := 3; n < len(args); n++ {
		argv, err := convAny(args, n, "FFT", "...interface {}")
		if err != nil {
			return nil, err
		}
		p3 = append(p3, argv)
	}
	return fmFastFourierTransform(p0, p1, p2, p3...)
}

// gen_CSV
//
// syntax: CSV(...interface {})
func (_ *task) gen_CSV(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "CSV", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmCsv(p0...)
}

// gen_JSON
//
// syntax: JSON(...interface {})
func (_ *task) gen_JSON(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "JSON", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmJson(p0...)
	return ret, nil
}

// gen_MARKDOWN
//
// syntax: MARKDOWN(...interface {})
func (_ *task) gen_MARKDOWN(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "MARKDOWN", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmMarkdown(p0...)
	return ret, nil
}

// gen_CHART_LINE
//
// syntax: CHART_LINE(...interface {})
func (_ *task) gen_CHART_LINE(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "CHART_LINE", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := ChartLine(p0...)
	return ret, nil
}

// gen_CHART_SCATTER
//
// syntax: CHART_SCATTER(...interface {})
func (_ *task) gen_CHART_SCATTER(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "CHART_SCATTER", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmChartScatter(p0...)
	return ret, nil
}

// gen_CHART_BAR
//
// syntax: CHART_BAR(...interface {})
func (_ *task) gen_CHART_BAR(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "CHART_BAR", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmChartBar(p0...)
	return ret, nil
}

// gen_CHART_LINE3D
//
// syntax: CHART_LINE3D(...interface {})
func (_ *task) gen_CHART_LINE3D(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "CHART_LINE3D", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmChartLine3D(p0...)
	return ret, nil
}

// gen_CHART_BAR3D
//
// syntax: CHART_BAR3D(...interface {})
func (_ *task) gen_CHART_BAR3D(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "CHART_BAR3D", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmChartBar3D(p0...)
	return ret, nil
}

// gen_CHART_SURFACE3D
//
// syntax: CHART_SURFACE3D(...interface {})
func (_ *task) gen_CHART_SURFACE3D(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "CHART_SURFACE3D", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmChartSurface3D(p0...)
	return ret, nil
}

// gen_CHART_SCATTER3D
//
// syntax: CHART_SCATTER3D(...interface {})
func (_ *task) gen_CHART_SCATTER3D(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "CHART_SCATTER3D", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := fmChartScatter3D(p0...)
	return ret, nil
}

// gen_separator
//
// syntax: separator(uint8)
func (_ *task) gen_separator(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("separator", 1, len(args))
	}
	p0, err := convByte(args, 0, "separator", "uint8")
	if err != nil {
		return nil, err
	}
	ret := fmSeparator(p0)
	return ret, nil
}

// gen_file
//
// syntax: file(string)
func (_ *task) gen_file(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("file", 1, len(args))
	}
	p0, err := convString(args, 0, "file", "string")
	if err != nil {
		return nil, err
	}
	return fmFile(p0)
}

// gen_STRING
//
// syntax: STRING(, ...interface {})
func (_ *task) gen_STRING(args ...any) (any, error) {
	if len(args) < 1 {
		return nil, ErrInvalidNumOfArgs("STRING", 1, len(args))
	}
	p0, err := convAny(args, 0, "STRING", "interface {}")
	if err != nil {
		return nil, err
	}
	p1 := []interface{}{}
	for n := 1; n < len(args); n++ {
		argv, err := convAny(args, n, "STRING", "...interface {}")
		if err != nil {
			return nil, err
		}
		p1 = append(p1, argv)
	}
	return fmString(p0, p1...)
}

// gen_BYTES
//
// syntax: BYTES(, ...interface {})
func (_ *task) gen_BYTES(args ...any) (any, error) {
	if len(args) < 1 {
		return nil, ErrInvalidNumOfArgs("BYTES", 1, len(args))
	}
	p0, err := convAny(args, 0, "BYTES", "interface {}")
	if err != nil {
		return nil, err
	}
	p1 := []interface{}{}
	for n := 1; n < len(args); n++ {
		argv, err := convAny(args, n, "BYTES", "...interface {}")
		if err != nil {
			return nil, err
		}
		p1 = append(p1, argv)
	}
	return fmBytes(p0, p1...)
}

// gen_col
//
// syntax: col(...interface {})
func (_ *task) gen_col(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "col", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmCol(p0...)
}

// gen_field
//
// syntax: field(...interface {})
func (_ *task) gen_field(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "field", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmField(p0...)
}

// gen_header
//
// syntax: header(...interface {})
func (_ *task) gen_header(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "header", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return ToHeader(p0...)
}

// gen_datetimeType
//
// syntax: datetimeType(...interface {})
func (_ *task) gen_datetimeType(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "datetimeType", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmDatetimeType(p0...)
}

// gen_stringType
//
// syntax: stringType(...interface {})
func (_ *task) gen_stringType(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "stringType", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmStringType(p0...)
}

// gen_doubleType
//
// syntax: doubleType(...interface {})
func (_ *task) gen_doubleType(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "doubleType", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmDoubleType(p0...)
}

// gen_freq
//
// syntax: freq(float64, float64, ...float64)
func (_ *task) gen_freq(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, ErrInvalidNumOfArgs("freq", 2, len(args))
	}
	p0, err := convFloat64(args, 0, "freq", "float64")
	if err != nil {
		return nil, err
	}
	p1, err := convFloat64(args, 1, "freq", "float64")
	if err != nil {
		return nil, err
	}
	p2 := []float64{}
	for n := 2; n < len(args); n++ {
		argv, err := convFloat64(args, n, "freq", "...float64")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	ret := fmFreq(p0, p1, p2...)
	return ret, nil
}

// gen_oscillator
//
// syntax: oscillator(...interface {})
func (_ *task) gen_oscillator(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "oscillator", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmOscillator(p0...)
}

// gen_sphere
//
// syntax: sphere()
func (_ *task) gen_sphere(args ...any) (any, error) {
	if len(args) != 0 {
		return nil, ErrInvalidNumOfArgs("sphere", 0, len(args))
	}
	ret := fmSphere()
	return ret, nil
}

// gen_FAKE
//
// syntax: FAKE()
func (_ *task) gen_FAKE(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("FAKE", 1, len(args))
	}
	p0, err := convAny(args, 0, "FAKE", "interface {}")
	if err != nil {
		return nil, err
	}
	return fmFake(p0)
}

// gen_INPUT
//
// syntax: INPUT(...interface {})
func (_ *task) gen_INPUT(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "INPUT", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmINPUT(p0...)
}

// gen_OUTPUT
//
// syntax: OUTPUT(...interface {})
func (_ *task) gen_OUTPUT(args ...any) (any, error) {
	p0 := []interface{}{}
	for n := 0; n < len(args); n++ {
		argv, err := convAny(args, n, "OUTPUT", "...interface {}")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	return fmOUTPUT(p0...)
}

// gen_tz
//
// syntax: tz(string)
func (_ *task) gen_tz(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("tz", 1, len(args))
	}
	p0, err := convString(args, 0, "tz", "string")
	if err != nil {
		return nil, err
	}
	return TimeLocation(p0)
}

// gen_sep
//
// syntax: sep(uint8)
func (_ *task) gen_sep(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("sep", 1, len(args))
	}
	p0, err := convByte(args, 0, "sep", "uint8")
	if err != nil {
		return nil, err
	}
	ret := fmSeparator(p0)
	return ret, nil
}

// gen_assetHost
//
// syntax: assetHost(string)
func (_ *task) gen_assetHost(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("assetHost", 1, len(args))
	}
	p0, err := convString(args, 0, "assetHost", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.AssetHost(p0)
	return ret, nil
}

// gen_autoRotate
//
// syntax: autoRotate(float64)
func (_ *task) gen_autoRotate(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("autoRotate", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "autoRotate", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.AutoRotate(p0)
	return ret, nil
}

// gen_boxDrawBorder
//
// syntax: boxDrawBorder(bool)
func (_ *task) gen_boxDrawBorder(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("boxDrawBorder", 1, len(args))
	}
	p0, err := convBool(args, 0, "boxDrawBorder", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.BoxDrawBorder(p0)
	return ret, nil
}

// gen_boxSeparateColumns
//
// syntax: boxSeparateColumns(bool)
func (_ *task) gen_boxSeparateColumns(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("boxSeparateColumns", 1, len(args))
	}
	p0, err := convBool(args, 0, "boxSeparateColumns", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.BoxSeparateColumns(p0)
	return ret, nil
}

// gen_boxStyle
//
// syntax: boxStyle(string)
func (_ *task) gen_boxStyle(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("boxStyle", 1, len(args))
	}
	p0, err := convString(args, 0, "boxStyle", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.BoxStyle(p0)
	return ret, nil
}

// gen_brief
//
// syntax: brief(bool)
func (_ *task) gen_brief(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("brief", 1, len(args))
	}
	p0, err := convBool(args, 0, "brief", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Brief(p0)
	return ret, nil
}

// gen_briefCount
//
// syntax: briefCount(int)
func (_ *task) gen_briefCount(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("briefCount", 1, len(args))
	}
	p0, err := convInt(args, 0, "briefCount", "int")
	if err != nil {
		return nil, err
	}
	ret := opts.BriefCount(p0)
	return ret, nil
}

// gen_chartJson
//
// syntax: chartJson(bool)
func (_ *task) gen_chartJson(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("chartJson", 1, len(args))
	}
	p0, err := convBool(args, 0, "chartJson", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.ChartJson(p0)
	return ret, nil
}

// gen_columnTypes
//
// syntax: columnTypes(...string)
func (_ *task) gen_columnTypes(args ...any) (any, error) {
	p0 := []string{}
	for n := 0; n < len(args); n++ {
		argv, err := convString(args, n, "columnTypes", "...string")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := opts.ColumnTypes(p0...)
	return ret, nil
}

// gen_columns
//
// syntax: columns(...string)
func (_ *task) gen_columns(args ...any) (any, error) {
	p0 := []string{}
	for n := 0; n < len(args); n++ {
		argv, err := convString(args, n, "columns", "...string")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := opts.Columns(p0...)
	return ret, nil
}

// gen_dataZoom
//
// syntax: dataZoom(string, float32, float32)
func (_ *task) gen_dataZoom(args ...any) (any, error) {
	if len(args) != 3 {
		return nil, ErrInvalidNumOfArgs("dataZoom", 3, len(args))
	}
	p0, err := convString(args, 0, "dataZoom", "string")
	if err != nil {
		return nil, err
	}
	p1, err := convFloat32(args, 1, "dataZoom", "float32")
	if err != nil {
		return nil, err
	}
	p2, err := convFloat32(args, 2, "dataZoom", "float32")
	if err != nil {
		return nil, err
	}
	ret := opts.DataZoom(p0, p1, p2)
	return ret, nil
}

// gen_delimiter
//
// syntax: delimiter(string)
func (_ *task) gen_delimiter(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("delimiter", 1, len(args))
	}
	p0, err := convString(args, 0, "delimiter", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Delimiter(p0)
	return ret, nil
}

// gen_gridSize
//
// syntax: gridSize(...float64)
func (_ *task) gen_gridSize(args ...any) (any, error) {
	p0 := []float64{}
	for n := 0; n < len(args); n++ {
		argv, err := convFloat64(args, n, "gridSize", "...float64")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := opts.GridSize(p0...)
	return ret, nil
}

// gen_heading
//
// syntax: heading(bool)
func (_ *task) gen_heading(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("heading", 1, len(args))
	}
	p0, err := convBool(args, 0, "heading", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Heading(p0)
	return ret, nil
}

// gen_html
//
// syntax: html(bool)
func (_ *task) gen_html(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("html", 1, len(args))
	}
	p0, err := convBool(args, 0, "html", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Html(p0)
	return ret, nil
}

// gen_inputStream
//
// syntax: inputStream(InputStream)
func (_ *task) gen_inputStream(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("inputStream", 1, len(args))
	}
	p0, err := convInputStream(args, 0, "inputStream", "spec.InputStream")
	if err != nil {
		return nil, err
	}
	ret := opts.InputStream(p0)
	return ret, nil
}

// gen_lineWidth
//
// syntax: lineWidth(float64)
func (_ *task) gen_lineWidth(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("lineWidth", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "lineWidth", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.LineWidth(p0)
	return ret, nil
}

// gen_markAreaNameCoord
//
// syntax: markAreaNameCoord(, , string, string, float64)
func (_ *task) gen_markAreaNameCoord(args ...any) (any, error) {
	if len(args) != 5 {
		return nil, ErrInvalidNumOfArgs("markAreaNameCoord", 5, len(args))
	}
	p0, err := convAny(args, 0, "markAreaNameCoord", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := convAny(args, 1, "markAreaNameCoord", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := convString(args, 2, "markAreaNameCoord", "string")
	if err != nil {
		return nil, err
	}
	p3, err := convString(args, 3, "markAreaNameCoord", "string")
	if err != nil {
		return nil, err
	}
	p4, err := convFloat64(args, 4, "markAreaNameCoord", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.MarkAreaNameCoord(p0, p1, p2, p3, p4)
	return ret, nil
}

// gen_markLineXAxisCoord
//
// syntax: markLineXAxisCoord(, string)
func (_ *task) gen_markLineXAxisCoord(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("markLineXAxisCoord", 2, len(args))
	}
	p0, err := convAny(args, 0, "markLineXAxisCoord", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := convString(args, 1, "markLineXAxisCoord", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.MarkLineXAxisCoord(p0, p1)
	return ret, nil
}

// gen_markLineYAxisCoord
//
// syntax: markLineYAxisCoord(, string)
func (_ *task) gen_markLineYAxisCoord(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("markLineYAxisCoord", 2, len(args))
	}
	p0, err := convAny(args, 0, "markLineYAxisCoord", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := convString(args, 1, "markLineYAxisCoord", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.MarkLineYAxisCoord(p0, p1)
	return ret, nil
}

// gen_opacity
//
// syntax: opacity(float64)
func (_ *task) gen_opacity(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("opacity", 1, len(args))
	}
	p0, err := convFloat64(args, 0, "opacity", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.Opacity(p0)
	return ret, nil
}

// gen_outputStream
//
// syntax: outputStream(OutputStream)
func (_ *task) gen_outputStream(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("outputStream", 1, len(args))
	}
	p0, err := convOutputStream(args, 0, "outputStream", "spec.OutputStream")
	if err != nil {
		return nil, err
	}
	ret := opts.OutputStream(p0)
	return ret, nil
}

// gen_precision
//
// syntax: precision(int)
func (_ *task) gen_precision(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("precision", 1, len(args))
	}
	p0, err := convInt(args, 0, "precision", "int")
	if err != nil {
		return nil, err
	}
	ret := opts.Precision(p0)
	return ret, nil
}

// gen_rownum
//
// syntax: rownum(bool)
func (_ *task) gen_rownum(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("rownum", 1, len(args))
	}
	p0, err := convBool(args, 0, "rownum", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Rownum(p0)
	return ret, nil
}

// gen_seriesLabels
//
// syntax: seriesLabels(...string)
func (_ *task) gen_seriesLabels(args ...any) (any, error) {
	p0 := []string{}
	for n := 0; n < len(args); n++ {
		argv, err := convString(args, n, "seriesLabels", "...string")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := opts.SeriesLabels(p0...)
	return ret, nil
}

// gen_showGrid
//
// syntax: showGrid(bool)
func (_ *task) gen_showGrid(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("showGrid", 1, len(args))
	}
	p0, err := convBool(args, 0, "showGrid", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.ShowGrid(p0)
	return ret, nil
}

// gen_size
//
// syntax: size(string, string)
func (_ *task) gen_size(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("size", 2, len(args))
	}
	p0, err := convString(args, 0, "size", "string")
	if err != nil {
		return nil, err
	}
	p1, err := convString(args, 1, "size", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Size(p0, p1)
	return ret, nil
}

// gen_subtitle
//
// syntax: subtitle(string)
func (_ *task) gen_subtitle(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("subtitle", 1, len(args))
	}
	p0, err := convString(args, 0, "subtitle", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Subtitle(p0)
	return ret, nil
}

// gen_tableName
//
// syntax: tableName(string)
func (_ *task) gen_tableName(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("tableName", 1, len(args))
	}
	p0, err := convString(args, 0, "tableName", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.TableName(p0)
	return ret, nil
}

// gen_theme
//
// syntax: theme(string)
func (_ *task) gen_theme(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("theme", 1, len(args))
	}
	p0, err := convString(args, 0, "theme", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Theme(p0)
	return ret, nil
}

// gen_timeLocation
//
// syntax: timeLocation()
func (_ *task) gen_timeLocation(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("timeLocation", 1, len(args))
	}
	p0, err := convTimeLocation(args, 0, "timeLocation", "*time.Location")
	if err != nil {
		return nil, err
	}
	ret := opts.TimeLocation(p0)
	return ret, nil
}

// gen_timeformat
//
// syntax: timeformat(string)
func (_ *task) gen_timeformat(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("timeformat", 1, len(args))
	}
	p0, err := convString(args, 0, "timeformat", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Timeformat(p0)
	return ret, nil
}

// gen_title
//
// syntax: title(string)
func (_ *task) gen_title(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("title", 1, len(args))
	}
	p0, err := convString(args, 0, "title", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Title(p0)
	return ret, nil
}

// gen_transcoder
//
// syntax: transcoder(Transcoder)
func (_ *task) gen_transcoder(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("transcoder", 1, len(args))
	}
	p0, err := convTranscoder(args, 0, "transcoder", "transcoder.Transcoder")
	if err != nil {
		return nil, err
	}
	ret := opts.Transcoder(p0)
	return ret, nil
}

// gen_transpose
//
// syntax: transpose(bool)
func (_ *task) gen_transpose(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, ErrInvalidNumOfArgs("transpose", 1, len(args))
	}
	p0, err := convBool(args, 0, "transpose", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Transpose(p0)
	return ret, nil
}

// gen_visualMap
//
// syntax: visualMap(float64, float64)
func (_ *task) gen_visualMap(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, ErrInvalidNumOfArgs("visualMap", 2, len(args))
	}
	p0, err := convFloat64(args, 0, "visualMap", "float64")
	if err != nil {
		return nil, err
	}
	p1, err := convFloat64(args, 1, "visualMap", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.VisualMap(p0, p1)
	return ret, nil
}

// gen_xAxis
//
// syntax: xAxis(int, string, ...string)
func (_ *task) gen_xAxis(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, ErrInvalidNumOfArgs("xAxis", 2, len(args))
	}
	p0, err := convInt(args, 0, "xAxis", "int")
	if err != nil {
		return nil, err
	}
	p1, err := convString(args, 1, "xAxis", "string")
	if err != nil {
		return nil, err
	}
	p2 := []string{}
	for n := 2; n < len(args); n++ {
		argv, err := convString(args, n, "xAxis", "...string")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	ret := opts.XAxis(p0, p1, p2...)
	return ret, nil
}

// gen_yAxis
//
// syntax: yAxis(int, string, ...string)
func (_ *task) gen_yAxis(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, ErrInvalidNumOfArgs("yAxis", 2, len(args))
	}
	p0, err := convInt(args, 0, "yAxis", "int")
	if err != nil {
		return nil, err
	}
	p1, err := convString(args, 1, "yAxis", "string")
	if err != nil {
		return nil, err
	}
	p2 := []string{}
	for n := 2; n < len(args); n++ {
		argv, err := convString(args, n, "yAxis", "...string")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	ret := opts.YAxis(p0, p1, p2...)
	return ret, nil
}

// gen_zAxis
//
// syntax: zAxis(int, string, ...string)
func (_ *task) gen_zAxis(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, ErrInvalidNumOfArgs("zAxis", 2, len(args))
	}
	p0, err := convInt(args, 0, "zAxis", "int")
	if err != nil {
		return nil, err
	}
	p1, err := convString(args, 1, "zAxis", "string")
	if err != nil {
		return nil, err
	}
	p2 := []string{}
	for n := 2; n < len(args); n++ {
		argv, err := convString(args, n, "zAxis", "...string")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	ret := opts.ZAxis(p0, p1, p2...)
	return ret, nil
}

//go:generate go run fx_generate.go

package fx

// Code generated by go generate; DO NOT EDIT.

import (
	"math"

	"github.com/machbase/neo-server/mods/codec/opts"
	"github.com/machbase/neo-server/mods/expression"
	"github.com/machbase/neo-server/mods/nums"
	"github.com/machbase/neo-server/mods/tql/conv"
	"github.com/machbase/neo-server/mods/tql/maps"
)

var GenFunctions = map[string]expression.Function{
	// math
	"sin":   gen_sin,
	"cos":   gen_cos,
	"tan":   gen_tan,
	"exp":   gen_exp,
	"exp2":  gen_exp2,
	"log":   gen_log,
	"log10": gen_log10,
	// nums
	"count":      nums.Count,
	"len":        nums.Len,
	"element":    nums.Element,
	"round":      gen_round,
	"linspace":   gen_linspace,
	"linspace50": gen_linspace50,
	"meshgrid":   gen_meshgrid,
	"roundTime":  gen_roundTime,
	"time":       gen_time,
	"timeAdd":    gen_timeAdd,
	// maps
	"TAKE": gen_TAKE,
	"DROP": gen_DROP,
	// aliases
	"markArea":  markArea,
	"markXAxis": gen_markLineXAxisCoord,
	"markYAxis": gen_markLineYAxisCoord,
	// codec.opts
	"assetHost":          gen_assetHost,
	"autoRotate":         gen_autoRotate,
	"boxDrawBorder":      gen_boxDrawBorder,
	"boxSeparateColumns": gen_boxSeparateColumns,
	"boxStyle":           gen_boxStyle,
	"brief":              gen_brief,
	"briefCount":         gen_briefCount,
	"chartJson":          gen_chartJson,
	"columns":            gen_columns,
	"dataZoom":           gen_dataZoom,
	"delimiter":          gen_delimiter,
	"gridSize":           gen_gridSize,
	"heading":            gen_heading,
	"html":               gen_html,
	"inputStream":        gen_inputStream,
	"lineWidth":          gen_lineWidth,
	"markAreaNameCoord":  gen_markAreaNameCoord,
	"markLineXAxisCoord": gen_markLineXAxisCoord,
	"markLineYAxisCoord": gen_markLineYAxisCoord,
	"opacity":            gen_opacity,
	"outputStream":       gen_outputStream,
	"precision":          gen_precision,
	"rownum":             gen_rownum,
	"seriesLabels":       gen_seriesLabels,
	"showGrid":           gen_showGrid,
	"size":               gen_size,
	"subtitle":           gen_subtitle,
	"table":              gen_table,
	"theme":              gen_theme,
	"timeLocation":       gen_timeLocation,
	"timeformat":         gen_timeformat,
	"title":              gen_title,
	"transcoder":         gen_transcoder,
	"transpose":          gen_transpose,
	"visualMap":          gen_visualMap,
	"xAxis":              gen_xAxis,
	"yAxis":              gen_yAxis,
	"zAxis":              gen_zAxis,
}

// gen_sin
//
// syntax: sin(float64)
func gen_sin(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("sin", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "sin", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Sin(p0)
	return ret, nil
}

// gen_cos
//
// syntax: cos(float64)
func gen_cos(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("cos", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "cos", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Cos(p0)
	return ret, nil
}

// gen_tan
//
// syntax: tan(float64)
func gen_tan(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("tan", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "tan", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Tan(p0)
	return ret, nil
}

// gen_exp
//
// syntax: exp(float64)
func gen_exp(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("exp", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "exp", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Exp(p0)
	return ret, nil
}

// gen_exp2
//
// syntax: exp2(float64)
func gen_exp2(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("exp2", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "exp2", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Exp2(p0)
	return ret, nil
}

// gen_log
//
// syntax: log(float64)
func gen_log(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("log", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "log", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Log(p0)
	return ret, nil
}

// gen_log10
//
// syntax: log10(float64)
func gen_log10(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("log10", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "log10", "float64")
	if err != nil {
		return nil, err
	}
	ret := math.Log10(p0)
	return ret, nil
}

// gen_round
//
// syntax: round(int64, int64)
func gen_round(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("round", 2, len(args))
	}
	p0, err := conv.Int64(args, 0, "round", "int64")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Int64(args, 1, "round", "int64")
	if err != nil {
		return nil, err
	}
	ret := nums.Round(p0, p1)
	return ret, nil
}

// gen_linspace
//
// syntax: linspace(float64, float64, int)
func gen_linspace(args ...any) (any, error) {
	if len(args) != 3 {
		return nil, conv.ErrInvalidNumOfArgs("linspace", 3, len(args))
	}
	p0, err := conv.Float64(args, 0, "linspace", "float64")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Float64(args, 1, "linspace", "float64")
	if err != nil {
		return nil, err
	}
	p2, err := conv.Int(args, 2, "linspace", "int")
	if err != nil {
		return nil, err
	}
	ret := nums.Linspace(p0, p1, p2)
	return ret, nil
}

// gen_linspace50
//
// syntax: linspace50(float64, float64)
func gen_linspace50(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("linspace50", 2, len(args))
	}
	p0, err := conv.Float64(args, 0, "linspace50", "float64")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Float64(args, 1, "linspace50", "float64")
	if err != nil {
		return nil, err
	}
	ret := nums.Linspace50(p0, p1)
	return ret, nil
}

// gen_meshgrid
//
// syntax: meshgrid([]float64, []float64)
func gen_meshgrid(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("meshgrid", 2, len(args))
	}
	p0, ok := args[0].([]float64)
	if !ok {
		return nil, conv.ErrWrongTypeOfArgs("meshgrid", 0, "[]float64", args[0])
	}
	p1, ok := args[1].([]float64)
	if !ok {
		return nil, conv.ErrWrongTypeOfArgs("meshgrid", 1, "[]float64", args[1])
	}
	ret := nums.Meshgrid(p0, p1)
	return ret, nil
}

// gen_roundTime
//
// syntax: roundTime(, )
func gen_roundTime(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("roundTime", 2, len(args))
	}
	p0, err := conv.Any(args, 0, "roundTime", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Any(args, 1, "roundTime", "interface {}")
	if err != nil {
		return nil, err
	}
	return nums.RoundTime(p0, p1)
}

// gen_time
//
// syntax: time()
func gen_time(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("time", 1, len(args))
	}
	p0, err := conv.Any(args, 0, "time", "interface {}")
	if err != nil {
		return nil, err
	}
	return nums.Time(p0)
}

// gen_timeAdd
//
// syntax: timeAdd(, )
func gen_timeAdd(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("timeAdd", 2, len(args))
	}
	p0, err := conv.Any(args, 0, "timeAdd", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Any(args, 1, "timeAdd", "interface {}")
	if err != nil {
		return nil, err
	}
	return nums.TimeAdd(p0, p1)
}

// gen_TAKE
//
// syntax: TAKE(, , , int)
func gen_TAKE(args ...any) (any, error) {
	if len(args) != 4 {
		return nil, conv.ErrInvalidNumOfArgs("TAKE", 4, len(args))
	}
	p0, err := conv.Context(args, 0, "TAKE", "*context.Context")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Any(args, 1, "TAKE", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := conv.Any(args, 2, "TAKE", "interface {}")
	if err != nil {
		return nil, err
	}
	p3, err := conv.Int(args, 3, "TAKE", "int")
	if err != nil {
		return nil, err
	}
	ret := maps.Take(p0, p1, p2, p3)
	return ret, nil
}

// gen_DROP
//
// syntax: DROP(, , , int)
func gen_DROP(args ...any) (any, error) {
	if len(args) != 4 {
		return nil, conv.ErrInvalidNumOfArgs("DROP", 4, len(args))
	}
	p0, err := conv.Context(args, 0, "DROP", "*context.Context")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Any(args, 1, "DROP", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := conv.Any(args, 2, "DROP", "interface {}")
	if err != nil {
		return nil, err
	}
	p3, err := conv.Int(args, 3, "DROP", "int")
	if err != nil {
		return nil, err
	}
	ret := maps.Drop(p0, p1, p2, p3)
	return ret, nil
}

// gen_assetHost
//
// syntax: assetHost(string)
func gen_assetHost(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("assetHost", 1, len(args))
	}
	p0, err := conv.String(args, 0, "assetHost", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.AssetHost(p0)
	return ret, nil
}

// gen_autoRotate
//
// syntax: autoRotate(float64)
func gen_autoRotate(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("autoRotate", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "autoRotate", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.AutoRotate(p0)
	return ret, nil
}

// gen_boxDrawBorder
//
// syntax: boxDrawBorder(bool)
func gen_boxDrawBorder(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("boxDrawBorder", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "boxDrawBorder", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.BoxDrawBorder(p0)
	return ret, nil
}

// gen_boxSeparateColumns
//
// syntax: boxSeparateColumns(bool)
func gen_boxSeparateColumns(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("boxSeparateColumns", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "boxSeparateColumns", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.BoxSeparateColumns(p0)
	return ret, nil
}

// gen_boxStyle
//
// syntax: boxStyle(string)
func gen_boxStyle(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("boxStyle", 1, len(args))
	}
	p0, err := conv.String(args, 0, "boxStyle", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.BoxStyle(p0)
	return ret, nil
}

// gen_brief
//
// syntax: brief(bool)
func gen_brief(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("brief", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "brief", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Brief(p0)
	return ret, nil
}

// gen_briefCount
//
// syntax: briefCount(int)
func gen_briefCount(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("briefCount", 1, len(args))
	}
	p0, err := conv.Int(args, 0, "briefCount", "int")
	if err != nil {
		return nil, err
	}
	ret := opts.BriefCount(p0)
	return ret, nil
}

// gen_chartJson
//
// syntax: chartJson(bool)
func gen_chartJson(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("chartJson", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "chartJson", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.ChartJson(p0)
	return ret, nil
}

// gen_columns
//
// syntax: columns([]string, []string)
func gen_columns(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("columns", 2, len(args))
	}
	p0, ok := args[0].([]string)
	if !ok {
		return nil, conv.ErrWrongTypeOfArgs("columns", 0, "[]string", args[0])
	}
	p1, ok := args[1].([]string)
	if !ok {
		return nil, conv.ErrWrongTypeOfArgs("columns", 1, "[]string", args[1])
	}
	ret := opts.Columns(p0, p1)
	return ret, nil
}

// gen_dataZoom
//
// syntax: dataZoom(string, float32, float32)
func gen_dataZoom(args ...any) (any, error) {
	if len(args) != 3 {
		return nil, conv.ErrInvalidNumOfArgs("dataZoom", 3, len(args))
	}
	p0, err := conv.String(args, 0, "dataZoom", "string")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Float32(args, 1, "dataZoom", "float32")
	if err != nil {
		return nil, err
	}
	p2, err := conv.Float32(args, 2, "dataZoom", "float32")
	if err != nil {
		return nil, err
	}
	ret := opts.DataZoom(p0, p1, p2)
	return ret, nil
}

// gen_delimiter
//
// syntax: delimiter(string)
func gen_delimiter(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("delimiter", 1, len(args))
	}
	p0, err := conv.String(args, 0, "delimiter", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Delimiter(p0)
	return ret, nil
}

// gen_gridSize
//
// syntax: gridSize(...float64)
func gen_gridSize(args ...any) (any, error) {
	p0 := []float64{}
	for n := 0; n < len(args); n++ {
		argv, err := conv.Float64(args, n, "gridSize", "...float64")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := opts.GridSize(p0...)
	return ret, nil
}

// gen_heading
//
// syntax: heading(bool)
func gen_heading(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("heading", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "heading", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Heading(p0)
	return ret, nil
}

// gen_html
//
// syntax: html(bool)
func gen_html(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("html", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "html", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Html(p0)
	return ret, nil
}

// gen_inputStream
//
// syntax: inputStream(InputStream)
func gen_inputStream(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("inputStream", 1, len(args))
	}
	p0, err := conv.InputStream(args, 0, "inputStream", "spec.InputStream")
	if err != nil {
		return nil, err
	}
	ret := opts.InputStream(p0)
	return ret, nil
}

// gen_lineWidth
//
// syntax: lineWidth(float64)
func gen_lineWidth(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("lineWidth", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "lineWidth", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.LineWidth(p0)
	return ret, nil
}

// gen_markAreaNameCoord
//
// syntax: markAreaNameCoord(, , string, string, float64)
func gen_markAreaNameCoord(args ...any) (any, error) {
	if len(args) != 5 {
		return nil, conv.ErrInvalidNumOfArgs("markAreaNameCoord", 5, len(args))
	}
	p0, err := conv.Any(args, 0, "markAreaNameCoord", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Any(args, 1, "markAreaNameCoord", "interface {}")
	if err != nil {
		return nil, err
	}
	p2, err := conv.String(args, 2, "markAreaNameCoord", "string")
	if err != nil {
		return nil, err
	}
	p3, err := conv.String(args, 3, "markAreaNameCoord", "string")
	if err != nil {
		return nil, err
	}
	p4, err := conv.Float64(args, 4, "markAreaNameCoord", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.MarkAreaNameCoord(p0, p1, p2, p3, p4)
	return ret, nil
}

// gen_markLineXAxisCoord
//
// syntax: markLineXAxisCoord(, string)
func gen_markLineXAxisCoord(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("markLineXAxisCoord", 2, len(args))
	}
	p0, err := conv.Any(args, 0, "markLineXAxisCoord", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := conv.String(args, 1, "markLineXAxisCoord", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.MarkLineXAxisCoord(p0, p1)
	return ret, nil
}

// gen_markLineYAxisCoord
//
// syntax: markLineYAxisCoord(, string)
func gen_markLineYAxisCoord(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("markLineYAxisCoord", 2, len(args))
	}
	p0, err := conv.Any(args, 0, "markLineYAxisCoord", "interface {}")
	if err != nil {
		return nil, err
	}
	p1, err := conv.String(args, 1, "markLineYAxisCoord", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.MarkLineYAxisCoord(p0, p1)
	return ret, nil
}

// gen_opacity
//
// syntax: opacity(float64)
func gen_opacity(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("opacity", 1, len(args))
	}
	p0, err := conv.Float64(args, 0, "opacity", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.Opacity(p0)
	return ret, nil
}

// gen_outputStream
//
// syntax: outputStream(OutputStream)
func gen_outputStream(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("outputStream", 1, len(args))
	}
	p0, err := conv.OutputStream(args, 0, "outputStream", "spec.OutputStream")
	if err != nil {
		return nil, err
	}
	ret := opts.OutputStream(p0)
	return ret, nil
}

// gen_precision
//
// syntax: precision(int)
func gen_precision(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("precision", 1, len(args))
	}
	p0, err := conv.Int(args, 0, "precision", "int")
	if err != nil {
		return nil, err
	}
	ret := opts.Precision(p0)
	return ret, nil
}

// gen_rownum
//
// syntax: rownum(bool)
func gen_rownum(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("rownum", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "rownum", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Rownum(p0)
	return ret, nil
}

// gen_seriesLabels
//
// syntax: seriesLabels(...string)
func gen_seriesLabels(args ...any) (any, error) {
	p0 := []string{}
	for n := 0; n < len(args); n++ {
		argv, err := conv.String(args, n, "seriesLabels", "...string")
		if err != nil {
			return nil, err
		}
		p0 = append(p0, argv)
	}
	ret := opts.SeriesLabels(p0...)
	return ret, nil
}

// gen_showGrid
//
// syntax: showGrid(bool)
func gen_showGrid(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("showGrid", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "showGrid", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.ShowGrid(p0)
	return ret, nil
}

// gen_size
//
// syntax: size(string, string)
func gen_size(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("size", 2, len(args))
	}
	p0, err := conv.String(args, 0, "size", "string")
	if err != nil {
		return nil, err
	}
	p1, err := conv.String(args, 1, "size", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Size(p0, p1)
	return ret, nil
}

// gen_subtitle
//
// syntax: subtitle(string)
func gen_subtitle(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("subtitle", 1, len(args))
	}
	p0, err := conv.String(args, 0, "subtitle", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Subtitle(p0)
	return ret, nil
}

// gen_table
//
// syntax: table(string)
func gen_table(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("table", 1, len(args))
	}
	p0, err := conv.String(args, 0, "table", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Table(p0)
	return ret, nil
}

// gen_theme
//
// syntax: theme(string)
func gen_theme(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("theme", 1, len(args))
	}
	p0, err := conv.String(args, 0, "theme", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Theme(p0)
	return ret, nil
}

// gen_timeLocation
//
// syntax: timeLocation()
func gen_timeLocation(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("timeLocation", 1, len(args))
	}
	p0, err := conv.TimeLocation(args, 0, "timeLocation", "*time.Location")
	if err != nil {
		return nil, err
	}
	ret := opts.TimeLocation(p0)
	return ret, nil
}

// gen_timeformat
//
// syntax: timeformat(string)
func gen_timeformat(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("timeformat", 1, len(args))
	}
	p0, err := conv.String(args, 0, "timeformat", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Timeformat(p0)
	return ret, nil
}

// gen_title
//
// syntax: title(string)
func gen_title(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("title", 1, len(args))
	}
	p0, err := conv.String(args, 0, "title", "string")
	if err != nil {
		return nil, err
	}
	ret := opts.Title(p0)
	return ret, nil
}

// gen_transcoder
//
// syntax: transcoder(Transcoder)
func gen_transcoder(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("transcoder", 1, len(args))
	}
	p0, err := conv.Transcoder(args, 0, "transcoder", "transcoder.Transcoder")
	if err != nil {
		return nil, err
	}
	ret := opts.Transcoder(p0)
	return ret, nil
}

// gen_transpose
//
// syntax: transpose(bool)
func gen_transpose(args ...any) (any, error) {
	if len(args) != 1 {
		return nil, conv.ErrInvalidNumOfArgs("transpose", 1, len(args))
	}
	p0, err := conv.Bool(args, 0, "transpose", "bool")
	if err != nil {
		return nil, err
	}
	ret := opts.Transpose(p0)
	return ret, nil
}

// gen_visualMap
//
// syntax: visualMap(float64, float64)
func gen_visualMap(args ...any) (any, error) {
	if len(args) != 2 {
		return nil, conv.ErrInvalidNumOfArgs("visualMap", 2, len(args))
	}
	p0, err := conv.Float64(args, 0, "visualMap", "float64")
	if err != nil {
		return nil, err
	}
	p1, err := conv.Float64(args, 1, "visualMap", "float64")
	if err != nil {
		return nil, err
	}
	ret := opts.VisualMap(p0, p1)
	return ret, nil
}

// gen_xAxis
//
// syntax: xAxis(int, string, ...string)
func gen_xAxis(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, conv.ErrInvalidNumOfArgs("xAxis", 2, len(args))
	}
	p0, err := conv.Int(args, 0, "xAxis", "int")
	if err != nil {
		return nil, err
	}
	p1, err := conv.String(args, 1, "xAxis", "string")
	if err != nil {
		return nil, err
	}
	p2 := []string{}
	for n := 2; n < len(args); n++ {
		argv, err := conv.String(args, n, "xAxis", "...string")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	ret := opts.XAxis(p0, p1, p2...)
	return ret, nil
}

// gen_yAxis
//
// syntax: yAxis(int, string, ...string)
func gen_yAxis(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, conv.ErrInvalidNumOfArgs("yAxis", 2, len(args))
	}
	p0, err := conv.Int(args, 0, "yAxis", "int")
	if err != nil {
		return nil, err
	}
	p1, err := conv.String(args, 1, "yAxis", "string")
	if err != nil {
		return nil, err
	}
	p2 := []string{}
	for n := 2; n < len(args); n++ {
		argv, err := conv.String(args, n, "yAxis", "...string")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	ret := opts.YAxis(p0, p1, p2...)
	return ret, nil
}

// gen_zAxis
//
// syntax: zAxis(int, string, ...string)
func gen_zAxis(args ...any) (any, error) {
	if len(args) < 2 {
		return nil, conv.ErrInvalidNumOfArgs("zAxis", 2, len(args))
	}
	p0, err := conv.Int(args, 0, "zAxis", "int")
	if err != nil {
		return nil, err
	}
	p1, err := conv.String(args, 1, "zAxis", "string")
	if err != nil {
		return nil, err
	}
	p2 := []string{}
	for n := 2; n < len(args); n++ {
		argv, err := conv.String(args, n, "zAxis", "...string")
		if err != nil {
			return nil, err
		}
		p2 = append(p2, argv)
	}
	ret := opts.ZAxis(p0, p1, p2...)
	return ret, nil
}
